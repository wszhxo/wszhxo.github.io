<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springcloud学习</title>
      <link href="/2020/08/18/Springcloud%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/18/Springcloud%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 单体应用（传统项目）—&gt;  分布式架构 —-&gt;SOA架构—–&gt;  微服务架构</p></blockquote><h1 id="StringCloud"><a href="#StringCloud" class="headerlink" title="StringCloud"></a>StringCloud</h1><h2 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h2><p>传统项目，所有的模块都在一个项目中开发，</p><p>当项目变大时，开发人员任务不好分配，容易产生冲突，一个模块的错误导致整个项目都不能用</p><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p>将传统的项目拆分成很多个子项目，比如会员项目，订单项目，每个项目都有自己独立的数据库，不同模块部署在不同的服务器上，减轻单台服务器压力</p><blockquote><p> 注：Maven聚合依赖项目并不是分布式项目，只是单纯的横向拆分多个项目，纵向就是分为常见的controller，service，dao</p></blockquote><h2 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h2><p>分布式的升级版，面向服务，更加细化，分的模块更多，逐渐演变成组件的形式，就是可以共用的一个服务，服务之间采用rpc远程调用机制</p><blockquote><p>rpc远程调用技术框架有httpclient，spingcloud，dubbo，grpc，底层使用的socket或者netty实现</p></blockquote><p>底层使用SOAP（Http或者Https+xml）或者ESB消息总线实现</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>由于SOA缺少对于服务的治理设施，而且json比xml文件更加轻量化，服务更加细化，每个服务独立部署，数据库也不共享，互不影响，使用restful风格提供API，更加轻量级，更加便于敏捷开发，快速迭代</p><h1 id="SpringCloud-服务注册与发现"><a href="#SpringCloud-服务注册与发现" class="headerlink" title="SpringCloud 服务注册与发现"></a>SpringCloud 服务注册与发现</h1><p>在传统的rpc远程调用中，服务与服务之间的依赖关系比较复杂，耦合度过高，A服务调用B服务，B服务调用C服务，服务URL越来越多的时候就需要使用服务治理技术</p><h3 id="SpringCloud支持的注册中心"><a href="#SpringCloud支持的注册中心" class="headerlink" title="SpringCloud支持的注册中心"></a>SpringCloud支持的注册中心</h3><p>注册中心就是存放接口地址信息，有以下三种， Eureka，Consul（go语言写的），Zookeeper</p><p> 首先启动注册中心 ，再启动比如（订单服务）（会员服务） 的相关服务，启动时会把服务地址和端口取个别名，相当于键值的形式注册到注册中心（键app_menber值127.0.0.1:8080）</p><blockquote><p> Eureka这个注册中心，它可不是什么第三方jar包需要安装什么的，Eureka它本身就是一个SpringBoot，也就是说我们用的是一个项目来充当注册中心。 </p></blockquote><p>服务注册：将服务信息注册到注册中心上</p><p>服务发现：从注册中心上获取服务信息</p><p>消费者调用接口时就会使用别名（键）从注册中心获取值（具体的url和端口），提供者使用HttpClient技术实现调用</p><p>在Application.java中使用注解#EnableEurakaServer，就能把服务注册</p><p><img src="/2020/08/18/Springcloud%E5%AD%A6%E4%B9%A0/1595141609531.png" alt="1595141609531"></p><p>调用服务</p><p><img src="/2020/08/18/Springcloud%E5%AD%A6%E4%B9%A0/1595141649554.png" alt="1595141649554"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt单点登录</title>
      <link href="/2020/08/18/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2020/08/18/jwt%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2020/08/18/Zookeeper/"/>
      <url>/2020/08/18/Zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p>Zookper是一个文件系统类型的数据库，创建结点必须要有/斜杠</p><p><code>zkServer.sh start 后边加上cfg的文件路径</code></p><p>就能启动服务,配置多个cfg就可以启动多个服务 ,</p><p><code>zhCli.sh -server ip:端口</code></p><p>启动客户端,可以改变端口和ip连接不同的客户端</p><p>当在A客户端创建结点后,B客户端也能访问到A的结点,具有<strong>数据一致性的分布式</strong></p><h3 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h3><p>某一个用户更新数据库A的数据比如value=2,另外一名用户在集群中从数据库B读取到的value一定要是2,这样就要求数据库之间的同步非常迅速,或者加上锁同步完成后才能读到同步后的数据</p><h3 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h3><p>允许用户读取到同步之前的旧数据</p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>允许读到旧数据,但一段时间后一定要是新数据</p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>Consistency:强一致性</p><p>Avalibility:可用性,集群可不可用</p><p>Partition Tolerance:分区容错性 </p><p><strong>分区容错性</strong>:分布式架构中,由于很多模块都分开部署,比如在不同的服务器,这就是分区了 ,但此时模块之间的交互就需要网络很快,网络越快容错性就越高,这就是分区容错性</p><p>一个集群需要对外部提供强一致性,所以只要集群内部某一台服务器发生了改编,那么就需要等待集群内其他服务器的数据同步完成后才能正常对外提供服务</p><p>保证了强一致性,通常需要存好可用性</p><h2 id="如何保证一致性"><a href="#如何保证一致性" class="headerlink" title="如何保证一致性"></a>如何保证一致性</h2><p>上课时老师讲完一个知识点通常会问,懂了没有,当有<strong>大部分学生</strong>懂了,老师就会认为同学懂了,老师不会确保所有学生都听懂了,(<strong>过半机制</strong>)</p><p>其中老师和同学就是不同的服务器,老师是老大,老师讲课过程就是同步的过程,同学们回答懂了,就是完成了同步,同步数据的任务就交给老大服务器</p><p><strong>谁的数据越新谁就是老大</strong>,判断依据就是一个<strong>事务id叫做zxid</strong>,是一个自增id,每次进行<strong>事务性请求(增删改)</strong>时就会自增,非事务性请求(查询)就不会改变id,</p><h2 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h2><p>如何选择老大,需要投票,首先每个<strong>服务启动时</strong>会进行类似于淘汰赛的<strong>选举机制</strong>,</p><p>选出zxid最大的作为老大服务器,如果zxid相同则选择myid最大的,谁最后启动最大,新建请求就由老大处理,并同步到子服务器,</p><p>当新进来一个服务器时,不管zxid比老大的zxid大还是小,为了保证稳定性,都要与老大服务器同步,</p><p>老大服务器(leader)挂掉之后,就会重新进行选举机制,当子服务器挂掉,导致少于一半的跟随服务器(follower),也会重新进行选举机制</p><h2 id="同步过程"><a href="#同步过程" class="headerlink" title="同步过程"></a>同步过程</h2><p>首先leader服务器<strong>预提交</strong>,就是在follower服务器中创建事务日志,事务日志中包含了具体的修改数据过程,当follower服务器保存成功则返回ack给leader服务器,</p><p>当有大于一半的服务器都返回了ack,则开始真正的同步数据(<strong>提交</strong>),就是把事务日志中的操作变成各个follower服务器的datatree中具体的数据</p><p>当有7台服务器,<code>7/2=3</code>因此只要大于3就算是过半,</p><p>三台服务器在A机房,三台服务器在B机房,就会存在两个老大的问题,会导致数据不一致,</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装</title>
      <link href="/2020/08/18/MongoDB%E5%AE%89%E8%A3%85/"/>
      <url>/2020/08/18/MongoDB%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>直接插入排序</title>
      <link href="/2020/08/09/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把一个数组分成两份  左边是有序的,右边是无序的</p><a id="more"></a><p><img src="/2020/08/09/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/1568356900630.png" alt="1568356900630"></p><h2 id="以下为动态图"><a href="#以下为动态图" class="headerlink" title="以下为动态图"></a>以下为动态图</h2><p>取自<a href="https://blog.csdn.net/jiangying_emma/article/details/82222458" target="_blank" rel="noopener">网友博客</a></p><p><img src="/2020/08/09/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/20180830152907477.gif" alt="20180830152907477"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>定义临时下标<strong>index</strong>左边有序中的最右边那个</p><p>定义下一个要插入的值<strong>insertValue</strong>右边无序中的第一个</p><p>index下标的值和insertValue比较,小的话index–,依次和左边的比较,</p><p>大的话插到index+1的后边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] StraightInsertion(<span class="keyword">int</span> [] arr)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index=i-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> insertValue=arr[i];</span><br><span class="line"><span class="keyword">while</span>(index&gt;=<span class="number">0</span>&amp;&amp;insertValue&lt;arr[index]) &#123;</span><br><span class="line"><span class="comment">//新插入的值insertValue和index下标的值比较,小的话,arr[index]后移</span></span><br><span class="line">arr[index+<span class="number">1</span>]=arr[index];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">arr[index+<span class="number">1</span>]=insertValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 直接插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延迟加载特效(美化页面)</title>
      <link href="/2020/08/09/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%89%B9%E6%95%88(%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2)/"/>
      <url>/2020/08/09/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%89%B9%E6%95%88(%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2)/</url>
      
        <content type="html"><![CDATA[<p>演示地址:<a href="http://www.dowebok.com/134.html" target="_blank" rel="noopener">http://www.dowebok.com/134.html</a></p><p>实际项目运行效果:<a href="http://coderzhx.cn" target="_blank" rel="noopener">http://coderzhx.cn</a></p><a id="more"></a><h2 id="下载后引入js文件"><a href="#下载后引入js文件" class="headerlink" title="下载后引入js文件"></a>下载后引入js文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/scrollReveal.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在需要加特效的html加入"><a href="#在需要加特效的html加入" class="headerlink" title="在需要加特效的html加入"></a>在需要加特效的html加入</h2><p>有三种效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-scroll-reveal</span>=<span class="string">"enter left and move 50px over 1.33s"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-scroll-reveal</span>=<span class="string">"enter from the bottom after 1s"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-scroll-reveal</span>=<span class="string">"wait 2.5s and then ease-in-out 100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加入js代码"><a href="#加入js代码" class="headerlink" title="加入js代码"></a>加入js代码</h2><p>官网上的那个我运行后只执行一次,以下是改进版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.scrollReveal = <span class="keyword">new</span> scrollReveal(&#123;<span class="attr">reset</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2020/08/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="思想"><a href="#思想" class="headerlink" title="思想:"></a>思想:</h2><p>选择排序顾名思义,<strong>每轮选出最小的(升序)或者最大的(降序)排到前边,</strong></p><p>一个n个元素的数组就需要n-1轮   ,时间复杂度O(n<sup>2</sup>)</p><a id="more"></a><p><img src="/2020/08/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/1568339305601.png" alt="1568339305601"></p><h2 id="简单版本实现"><a href="#简单版本实现" class="headerlink" title="简单版本实现"></a>简单版本实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> [] choice(<span class="keyword">int</span>[]  arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j]&lt;arr[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> a=arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line"> arr[j]=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] Selection(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="comment">// 左边&gt;右边,右边放大的</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line"><span class="comment">// arr[j]是当前最小的</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果arr[i]就是最小的就不交换</span></span><br><span class="line"><span class="keyword">if</span> (min!=i) &#123;</span><br><span class="line"> <span class="keyword">int</span> temp= arr[min];</span><br><span class="line">arr[min] = arr[i];</span><br><span class="line"> arr[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改博客主题,解决中文乱码</title>
      <link href="/2020/08/09/%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98,%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2020/08/09/%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98,%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="关于修改配置文字后-中文乱码的-已经相关主题的切换介绍"><a href="#关于修改配置文字后-中文乱码的-已经相关主题的切换介绍" class="headerlink" title="关于修改配置文字后,中文乱码的,已经相关主题的切换介绍"></a>关于修改配置文字后,中文乱码的,已经相关主题的切换介绍</h2><a id="more"></a><h2 id="克隆别人的Hexo主题"><a href="#克隆别人的Hexo主题" class="headerlink" title="克隆别人的Hexo主题"></a>克隆别人的Hexo主题</h2><p>克隆 github路径  blog文件夹下的themes文件夹/随意名称(这里取名yilia)</p><p><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></p><p>并且需要修改   _config.yml  下的 themes  属性改为  yilia  </p><p> <code>hexo clean</code>  <code>hexo  g -d</code> 重启即可!</p><h2 id="修改博客文字"><a href="#修改博客文字" class="headerlink" title="修改博客文字"></a>修改博客文字</h2><p>_config.yml下    另存为  UTF-8格式覆盖即可 ,不然就乱码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 张某的Blog</span><br><span class="line">subtitle: 记录自己的成长过程!</span><br><span class="line">description: 这里用于百度搜索关键词有利于搜索到你的博客</span><br><span class="line">keywords:</span><br><span class="line">author: 张某</span><br><span class="line">language: zh-CN 必须是themes下的languages中已有的(zh-CN.yml)</span><br><span class="line">timezone: 时区  并不需要写</span><br></pre></td></tr></table></figure><h2 id="文章插入图片的问题"><a href="#文章插入图片的问题" class="headerlink" title="文章插入图片的问题"></a>文章插入图片的问题</h2><p>​    配置文件_config.yml 里的post_asset_folder:这个选项设置为true </p><p>​    下载安装一个可以上传本地图片的插件</p><p>​    <code>npm install hexo-asset-image –save</code></p><p>​    新建文章同名文件夹 ,存图片  (xxxx/图片名.jpg)</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新建SpringBoot遇到的问题</title>
      <link href="/2020/08/09/%E6%96%B0%E5%BB%BASpringBoot%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/%E6%96%B0%E5%BB%BASpringBoot%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="新建Spring-Boot的一些小问题"><a href="#新建Spring-Boot的一些小问题" class="headerlink" title="新建Spring Boot的一些小问题"></a>新建Spring Boot的一些小问题</h2><a id="more"></a><h2 id="1-不能加载-com-mysql-jdbc-Driver-问题"><a href="#1-不能加载-com-mysql-jdbc-Driver-问题" class="headerlink" title="1.不能加载 com.mysql.jdbc.Driver 问题"></a>1.不能加载 com.mysql.jdbc.Driver 问题</h2><p>改为com.mysql.cj.jdbc.Driver</p><h2 id="2-报错信息"><a href="#2-报错信息" class="headerlink" title="2.报错信息"></a>2.报错信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line">Failed to auto-configure a DataSource: &#39;url&#39; is not specified and no embedded datasource could be auto-configured.</span><br><span class="line">Reason: Failed to determine a suitable driver class</span><br><span class="line">Action:</span><br><span class="line">Consider the following:</span><br><span class="line">If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.</span><br><span class="line">If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>因为既然导入了起步依赖就得在application.properties中有相关数据库配置</p><p>比如我导入了mybatis,就得在properties配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># DataSource</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost/blog?characterEncoding=utf-8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mybatis配置 mybatis.config-location=classpath:mybatis-config.xml // 配置文件位置</span><br><span class="line">mybatis.type-aliases-<span class="keyword">package</span>=cn.coderzhx.pojo</span><br><span class="line"># mybatis.typeAliasesPackage=cn.cuberzhx.springboot.pojo // 实体类包</span><br><span class="line">mybatis.mapper-locations=classpath:mapper<span class="comment">/*.xml // mapper文件位置</span></span><br></pre></td></tr></table></figure><h2 id="3-启动Application-java进不了Controller层"><a href="#3-启动Application-java进不了Controller层" class="headerlink" title="3.启动Application.java进不了Controller层"></a>3.启动Application.java进不了Controller层</h2><p>controller层文件夹要与Application.java要同级</p><h2 id="4-加入访问静态资源的包webjars"><a href="#4-加入访问静态资源的包webjars" class="headerlink" title="4.加入访问静态资源的包webjars"></a>4.加入访问静态资源的包webjars</h2><h3 id="因为创建的Spring-Boot是jar不是war所以要导入"><a href="#因为创建的Spring-Boot是jar不是war所以要导入" class="headerlink" title="因为创建的Spring Boot是jar不是war所以要导入"></a>因为创建的Spring Boot是jar不是war所以要导入</h3><p>我用的Layui前端框架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>layui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理jQuery,Bootstrap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bootstrap --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认访问resources下的以下文件夹-resources-maven-static-public"><a href="#默认访问resources下的以下文件夹-resources-maven-static-public" class="headerlink" title="默认访问resources下的以下文件夹/resources , / maven ,/static  ,/public"></a>默认访问resources下的以下文件夹/resources , / maven ,/static  ,/public</h3><p>比如,访问localhost:8080/balabala.js  ,balabala.js资源就是在上述文件夹下的</p><p>在resources下新建这些文件夹的任意都可以</p><h3 id="也可以自定义在application-properties下写-但是写了之后默认的就失效了"><a href="#也可以自定义在application-properties下写-但是写了之后默认的就失效了" class="headerlink" title="也可以自定义在application.properties下写,但是写了之后默认的就失效了"></a>也可以自定义在application.properties下写,但是写了之<strong>后默认的就失效</strong>了</h3><p><strong>spring.resources.static-location=classpath:/hello/,classpath:/sa/,以此类推</strong></p><h3 id="访问http-localhost-8080-默认找上述任意资源文件夹下的index-html"><a href="#访问http-localhost-8080-默认找上述任意资源文件夹下的index-html" class="headerlink" title="访问http://localhost:8080/默认找上述任意资源文件夹下的index.html"></a>访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>默认找上述任意资源文件夹下的index.html</h3><p><img src="/2020/08/09/%E6%96%B0%E5%BB%BASpringBoot%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1562669111349.png" alt="1562669111349"></p><h3 id="同理放置小图标在上述任意文件夹下"><a href="#同理放置小图标在上述任意文件夹下" class="headerlink" title="同理放置小图标在上述任意文件夹下"></a>同理放置小图标在上述任意文件夹下</h3><p><strong>favicon.ioc</strong>必须这个名字,规定的你可以去相关官方类里查看</p><p><img src="/2020/08/09/%E6%96%B0%E5%BB%BASpringBoot%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1562669365859.png" alt="1562669365859"></p><h3 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h3><p>导入依赖就不说了</p><p>所有的模版默认要放在/templates文件下下边</p><p>例子:controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hehe"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">hehe</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"hehe"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8080/hehe" target="_blank" rel="noopener">http://localhost:8080/hehe</a></p><p><img src="/2020/08/09/%E6%96%B0%E5%BB%BASpringBoot%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1562673253563.png" alt="1562673253563"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新建pom.xml文件第一行报错</title>
      <link href="/2020/08/09/%E6%96%B0%E5%BB%BApom.xml%E6%96%87%E4%BB%B6%E7%AC%AC%E4%B8%80%E8%A1%8C%E6%8A%A5%E9%94%99/"/>
      <url>/2020/08/09/%E6%96%B0%E5%BB%BApom.xml%E6%96%87%E4%BB%B6%E7%AC%AC%E4%B8%80%E8%A1%8C%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="新建Spring-Boot-使用Maven管理时pom-xml第一行报错了"><a href="#新建Spring-Boot-使用Maven管理时pom-xml第一行报错了" class="headerlink" title="新建Spring Boot 使用Maven管理时pom.xml第一行报错了"></a>新建Spring Boot 使用Maven管理时pom.xml第一行报错了</h2><a id="more"></a><p>鼠标移到报错行,找到提示中的路径,删除上一级路径的文件</p><p>run as -&gt;maven install  等待完后错误应该就消失了!</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目上传到GitHub</title>
      <link href="/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/"/>
      <url>/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="项目上传到GitHub"><a href="#项目上传到GitHub" class="headerlink" title="项目上传到GitHub"></a>项目上传到GitHub</h1><a id="more"></a><p><img src="/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/1565359416505.png" alt="1565359416505"></p><p>右键项目Git -&gt; add</p><p>右键项目-&gt;Git-&gt;Commit Directory</p><p>新建github仓库，不要点击Readme.md</p><p>右键项目</p><p><img src="/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/1565360816747.png" alt="1565360816747"></p><p><img src="/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/1565360548871.png" alt="1565360548871"></p><p>之后bush</p><p><img src="/2020/08/09/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/1565360849610.png" alt="1565360849610"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线索二叉树</title>
      <link href="/2020/08/09/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/08/09/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>对于二叉树的一个结点，查找其左右子树是方便的，其前驱后继只有在遍历中得到。<strong>为了容易找到前驱和后继</strong>，有两种方法。一是在结点结构中增加向前和向后的指针，这种方法增加了存储开销，不可取；</p><p>二是<strong>利用二叉树的空链指针</strong>。本文就是讲的这种</p><a id="more"></a><p>线索二叉树能很快速地求出二叉树节点的前驱节点和后继节点，算法的复杂度为O(n)，虽然普通二叉树遍历求前驱和后继节点复杂度也是O(n)，<strong>但线索二叉树的常数因子更小，求前驱和后继节点比普通二叉树遍历更快</strong>。应用:堆排序等</p><h2 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h2><p>  先序线索二叉树查找后继节点容易、查找前驱节点困难；后序线索二叉树查找前驱节点容易、查找后继节点困难；而中序线索二叉树查找后继节点和先驱节点都很容易。因此，先序和后序线索二叉树应用较少，<strong>中序线索二叉树应用更加广泛</strong>。</p><p><img src="/2020/08/09/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/1569052699225.png" alt="1569052699225"></p><h2 id="定义结点类"><a href="#定义结点类" class="headerlink" title="定义结点类"></a>定义结点类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">int</span>  id;</span><br><span class="line"><span class="keyword">public</span>  String name;</span><br><span class="line"><span class="keyword">public</span> Human left;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">public</span> Human right;<span class="comment">//右孩子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> leftTag;<span class="comment">//左标志0代表他有子结点,1表示前驱</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> rightTag;<span class="comment">//右标志0代表他有子结点,1表示后继</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(<span class="keyword">int</span> id,String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Human [id="</span> + id + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义线索二叉树"><a href="#定义线索二叉树" class="headerlink" title="定义线索二叉树"></a>定义线索二叉树</h2><p>定义根结点和前驱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedBinaryTree</span></span>&#123;</span><br><span class="line">Human root;</span><br><span class="line">Human pre=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//线索化二叉树,中序线索</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadedBinaryTree</span><span class="params">(Human root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThreadedMid</span><span class="params">(Human node)</span> </span>&#123;</span><br><span class="line"><span class="comment">//遍历到没有子节点时停止</span></span><br><span class="line"><span class="keyword">if</span> (node==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">ThreadedMid(node.left);</span><br><span class="line"><span class="comment">//当前结点线索化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有左右结点(叶子结点)才需要前驱后继,</span></span><br><span class="line"><span class="keyword">if</span> (node.left==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//第一次来是4,没有前驱就是pre为空</span></span><br><span class="line">node.left=pre;</span><br><span class="line"><span class="comment">//表示有前驱</span></span><br><span class="line">node.leftTag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为此时还不知道下一次遍历的元素,等到遍历到了才知道</span></span><br><span class="line"><span class="comment">//第一次是执行不到的因为pre为空</span></span><br><span class="line"><span class="keyword">if</span> (pre!=<span class="keyword">null</span>&amp;&amp;pre.right==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//第二次来node=2,这是的pre就是4了</span></span><br><span class="line"><span class="comment">//这一步才是把4的后继设置为2</span></span><br><span class="line">pre.right=node;</span><br><span class="line">pre.rightTag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让当前结点变成下一个结点的前驱</span></span><br><span class="line">pre=node;</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">ThreadedMid(node.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历方法</span></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//从跟结点开始遍历</span></span><br><span class="line">Human node=root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//中序遍历从左开始,只要存在左子树那就一直到叶子结点停止</span></span><br><span class="line"><span class="keyword">while</span> (node.leftTag==<span class="number">0</span>) &#123;</span><br><span class="line">node=node.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到达叶子结点输出,第一次就是4</span></span><br><span class="line">System.out.println(node);</span><br><span class="line"><span class="comment">//表示叶子结点有后继,那就输出,并指向下一个</span></span><br><span class="line"><span class="keyword">while</span>(node.rightTag==<span class="number">1</span>) &#123;</span><br><span class="line">node=node.right;</span><br><span class="line">System.out.println(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下一个,接着循环</span></span><br><span class="line">node=node.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Human human1=<span class="keyword">new</span> Human(<span class="number">1</span>,<span class="string">"五一"</span>);</span><br><span class="line">Human human2=<span class="keyword">new</span> Human(<span class="number">2</span>,<span class="string">"王二"</span>);</span><br><span class="line">Human human3=<span class="keyword">new</span> Human(<span class="number">3</span>,<span class="string">"张三"</span>);</span><br><span class="line">Human human4=<span class="keyword">new</span> Human(<span class="number">4</span>,<span class="string">"李四"</span>);</span><br><span class="line">Human human5=<span class="keyword">new</span> Human(<span class="number">5</span>,<span class="string">"王五"</span>);</span><br><span class="line">Human human6=<span class="keyword">new</span> Human(<span class="number">6</span>,<span class="string">"赵六"</span>);</span><br><span class="line">human1.left=human2;</span><br><span class="line">human1.right=human3;</span><br><span class="line">human2.left=human4;</span><br><span class="line">human2.right=human5;</span><br><span class="line">human3.left=human6;</span><br><span class="line"><span class="comment">//线索化</span></span><br><span class="line">ThreadedBinaryTree threadedBinaryTree=<span class="keyword">new</span> ThreadedBinaryTree(human1);</span><br><span class="line">threadedBinaryTree.ThreadedMid(human1);</span><br><span class="line"><span class="comment">//验证是否成功</span></span><br><span class="line">System.out.println(human4.right.toString());</span><br><span class="line">    </span><br><span class="line">        threadedBinaryTree.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出Human [id=2, name=王二]说明正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历输出</span></span><br><span class="line">Human [id=<span class="number">4</span>, name=李四]</span><br><span class="line">Human [id=<span class="number">2</span>, name=王二]</span><br><span class="line">Human [id=<span class="number">5</span>, name=王五]</span><br><span class="line">Human [id=<span class="number">1</span>, name=五一]</span><br><span class="line">Human [id=<span class="number">6</span>, name=赵六]</span><br><span class="line">Human [id=<span class="number">3</span>, name=张三]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程等待与唤醒机制</title>
      <link href="/2020/08/09/%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/"/>
      <url>/2020/08/09/%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么保证-输入-–-输出-一套流程-不出错"><a href="#怎么保证-输入-–-输出-一套流程-不出错" class="headerlink" title="怎么保证   输入  –  输出   一套流程  不出错?"></a>怎么保证   输入  –  输出   一套流程  不出错?</h2><a id="more"></a><h2 id="需要赋值的对象Resource"><a href="#需要赋值的对象Resource" class="headerlink" title="需要赋值的对象Resource"></a>需要赋值的对象Resource</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line"><span class="comment">/**线程等待与唤醒案例数据安全解决*/</span></span><br><span class="line"> <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String sex;</span><br><span class="line">     <span class="comment">//public Boolean flag = false;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入流程"><a href="#输入流程" class="headerlink" title="输入流程"></a>输入流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Resource r;</span><br><span class="line"><span class="comment">//为了保证输入输出操作的是同一个Resource对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Input</span><span class="params">(Resource r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">r.name = <span class="string">"张三"</span>;</span><br><span class="line">r.sex = <span class="string">"男"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r.name = <span class="string">"Marry"</span>;</span><br><span class="line">r.sex = <span class="string">"girl"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出流程"><a href="#输出流程" class="headerlink" title="输出流程"></a>输出流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> Resource r ;     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Output</span><span class="params">(Resource r)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.r = r;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">         System.out.println(r.name+<span class="string">".."</span>+r.sex);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Resource r=<span class="keyword">new</span> Resource();</span><br><span class="line">Input in = <span class="keyword">new</span> Input(r);</span><br><span class="line">       Output out = <span class="keyword">new</span> Output(r);</span><br><span class="line">       <span class="comment">//分别创建输入输出线程 操作同一个r对象</span></span><br><span class="line">       Thread tin = <span class="keyword">new</span> Thread(in);</span><br><span class="line">       Thread tout = <span class="keyword">new</span> Thread(out);      </span><br><span class="line">       tin.start();</span><br><span class="line">       tout.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Marry..男</span><br><span class="line">张三..男</span><br><span class="line">张三..girl</span><br></pre></td></tr></table></figure><p>出现输出异常现象!</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>输入线程拿到cpu资源,进行赋值  张三..男   ,但在这时<strong>输出线程并没有抢到资源</strong>,输入线程依然占着资源,又开始赋值就在r.name赋值完成,r.sex还没赋值好的一瞬间 ,</p><p>此时变成  Marry..男  ,输出线程抢到了资源 ,打印就出现了异常问题</p><h2 id="输入流程加入同步"><a href="#输入流程加入同步" class="headerlink" title="输入流程加入同步"></a>输入流程加入同步</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                         r.name = <span class="string">"张三"</span>;</span><br><span class="line">                         r.sex = <span class="string">"男"</span>;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         r.name = <span class="string">"Marry"</span>;</span><br><span class="line">                         r.sex = <span class="string">"girl"</span>;</span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">                 i++;</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出也要加上同步"><a href="#输出也要加上同步" class="headerlink" title="输出也要加上同步"></a>输出也要加上同步</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(r)&#123;  </span><br><span class="line">         System.out.println(r.name+<span class="string">".."</span>+r.sex);</span><br><span class="line">         &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果一堆一堆的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">张三..男</span><br><span class="line">张三..男</span><br><span class="line">张三..男</span><br><span class="line">张三..男</span><br><span class="line">Marry..girl</span><br><span class="line">Marry..girl</span><br><span class="line">Marry..girl</span><br><span class="line">Marry..girl</span><br><span class="line">Marry..girl</span><br></pre></td></tr></table></figure><p>因为输入线程赋值此时 张三..男 此时输出线程一直抢着资源,所以一直输出一堆一堆的 张三..男  </p><p>或者输入线程一直占着资源不断赋值,而输出线程只输出一次,所以有好多次赋值都没有输出.这无法体现在控制台上</p><h2 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h2><p><strong>一次输入一次输出</strong>,而不是一次输入,无数次输出.交替出现 张三..男 Marry..girl</p><h2 id="利用线程等待与唤醒解决问题"><a href="#利用线程等待与唤醒解决问题" class="headerlink" title="利用线程等待与唤醒解决问题"></a>利用线程等待与唤醒解决问题</h2><p>输入完成后等待,输出完成后等待,循环往复  ,利用永久等待wait()和唤醒notify()</p><p>输入输出用一个boolean切换, false是输入线程运行 ,true是输出线程运行</p><p>true的时候输入线程等待,false的时候输出线程等待,每次输入成功都改变标志位并唤醒输出线程,每次输出成功都改变标志位并唤醒输入线程</p><h2 id="输入线程加入等待与唤醒"><a href="#输入线程加入等待与唤醒" class="headerlink" title="输入线程加入等待与唤醒"></a>输入线程加入等待与唤醒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (r) &#123;</span><br><span class="line"><span class="comment">//标记是true,等待,</span></span><br><span class="line"><span class="keyword">if</span> (r.flag) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">r.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">r.name = <span class="string">"张三"</span>;</span><br><span class="line">r.sex = <span class="string">"男"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r.name = <span class="string">"Marry"</span>;</span><br><span class="line">r.sex = <span class="string">"girl"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将对方线程唤醒,标记改为true</span></span><br><span class="line">r.flag = <span class="keyword">true</span>;</span><br><span class="line">r.notify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出线程加入等待与唤醒"><a href="#输出线程加入等待与唤醒" class="headerlink" title="输出线程加入等待与唤醒"></a>输出线程加入等待与唤醒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(r)&#123;  </span><br><span class="line">           <span class="comment">//判断标记,是false,等待</span></span><br><span class="line">         <span class="keyword">if</span>(!r.flag)&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;r.wait();&#125;<span class="keyword">catch</span>(Exception ex)&#123;&#125;</span><br><span class="line">           &#125;</span><br><span class="line">         System.out.println(r.name+<span class="string">".."</span>+r.sex);</span><br><span class="line">         <span class="comment">//标记改成false,唤醒对方线程</span></span><br><span class="line">         r.flag = <span class="keyword">false</span>;</span><br><span class="line">         r.notify();</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">张三..男</span><br><span class="line">Marry..girl</span><br><span class="line">张三..男</span><br><span class="line">Marry..girl</span><br><span class="line">张三..男</span><br><span class="line">Marry..girl</span><br><span class="line">张三..男</span><br><span class="line">Marry..girl</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决!"></a>问题解决!</h2>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组的简单案例</title>
      <link href="/2020/08/09/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/08/09/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是稀疏数组"><a href="#什么是稀疏数组" class="headerlink" title="什么是稀疏数组"></a>什么是稀疏数组</h2><p><a href="https://baike.baidu.com/item/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/3249303?fr=aladdin" target="_blank" rel="noopener">稀疏数组百度百科</a> 简单来说就是矩阵(<i color="green">线性代数里的知识点</i>)中0</p><p>的个数远远多于非0的个数,且非0数字分布不规则,矩阵用代码形容就是数组了</p><p>其实也很好理解,如果非0个数远远多于0的个数,那么完全可以用二维数组表示更加方便,更易阅读.</p><a id="more"></a><p>比如五子棋盘,如果棋子非常多,基本占满整个棋盘,那完全可以用二维数组表示</p><p>黑子白子用12表示,空位用0表示 ,每一个交叉点用一个数字表示</p><h2 id="下边是11X11的棋盘"><a href="#下边是11X11的棋盘" class="headerlink" title="下边是11X11的棋盘,"></a>下边是11X11的棋盘,</h2><p>可以看到只有三个棋子,那么就可以用稀疏数组表示了</p><img src="/2020/08/09/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E7%9A%84%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B/五子棋.png" width="300" alt="五子棋" align="center"><p>先用二维数组表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//1为黑子</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2</span>;<span class="comment">//2位白子</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">2</span>;<span class="comment">//2位白子</span></span><br></pre></td></tr></table></figure><p>循环输出即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>转化为稀疏数组</p><p>第一行表示的是二维数组总共的几行几列,和总共几个值,从第二行开始记录值所在的行列下标</p><table><thead><tr><th>-row</th><th>-col</th><th>value</th></tr></thead><tbody><tr><td><font color="green">总共</font>11<font color="green">行</font></td><td><font color="green">总共</font>11<font color="green">列</font></td><td><font color="green">总共</font>3<font color="green">个值</font></td></tr><tr><td>1</td><td>2</td><td>1</td></tr><tr><td>2</td><td>3</td><td>2</td></tr><tr><td>3</td><td>4</td><td>2</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="模拟五子棋存档过程"><a href="#模拟五子棋存档过程" class="headerlink" title="模拟五子棋存档过程"></a>模拟五子棋存档过程</h2><p>二维数组-&gt;稀疏数组-&gt;存储文件-&gt;读取文件-&gt;稀疏数组-&gt;二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 稀疏数组 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模仿五子棋8X8的棋盘</span></span><br><span class="line"><span class="comment">//定义二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//1为黑子</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2</span>;<span class="comment">//2位白子</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">2</span>;<span class="comment">//2位白子</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(a[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"><span class="comment">//修改为稀疏数组</span></span><br><span class="line"><span class="keyword">int</span>[][] b=<span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//第一行定义的是稀疏数组的属性  行 列  值 </span></span><br><span class="line"><span class="keyword">int</span> row=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">"d:/a.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//稀疏数组输出到文件</span></span><br><span class="line">FileOutputStream foStream =<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">OutputStreamWriter osWriter=<span class="keyword">new</span> OutputStreamWriter(foStream, <span class="string">"utf-8"</span>);</span><br><span class="line">BufferedWriter fwFileWriter=<span class="keyword">new</span> BufferedWriter(osWriter);</span><br><span class="line"><span class="comment">//BufferedReader,,,,BufferedWriter按行写入和读取</span></span><br><span class="line"></span><br><span class="line">String lString=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> s1=b[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">11</span>;<span class="comment">//几行</span></span><br><span class="line"><span class="keyword">int</span> s2=b[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">11</span>;<span class="comment">//几列</span></span><br><span class="line"><span class="keyword">int</span> s3=b[<span class="number">0</span>][<span class="number">2</span>]=count;<span class="comment">//有数据的点的个数</span></span><br><span class="line">lString=s1+<span class="string">","</span>+s2+<span class="string">","</span>+s3+<span class="string">","</span>;</span><br><span class="line">fwFileWriter.write(lString,<span class="number">0</span>,lString.length());</span><br><span class="line">fwFileWriter.newLine();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> str1=b[row][<span class="number">0</span>]=i;<span class="comment">//几列</span></span><br><span class="line"><span class="keyword">int</span> str2=b[row][<span class="number">1</span>]=j;<span class="comment">//几列</span></span><br><span class="line"><span class="keyword">int</span> str3=b[row][<span class="number">2</span>]=a[i][j];<span class="comment">//几列</span></span><br><span class="line">lString=str1+<span class="string">","</span>+str2+<span class="string">","</span>+str3+<span class="string">","</span>;</span><br><span class="line">row++;</span><br><span class="line">fwFileWriter.write(lString,<span class="number">0</span>,lString.length());</span><br><span class="line">fwFileWriter.newLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwFileWriter.flush();<span class="comment">////强刷字节到内容中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FileInputStream fileInputStream=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">InputStreamReader isw=<span class="keyword">new</span> InputStreamReader(fileInputStream,<span class="string">"utf-8"</span>);</span><br><span class="line">BufferedReader reader=<span class="keyword">new</span> BufferedReader(isw);</span><br><span class="line"><span class="comment">//读取文件转化为二维数组</span></span><br><span class="line">String strRead=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] a2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((strRead=reader.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!strRead.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line"> String[] split = strRead.split(<span class="string">","</span>);</span><br><span class="line"> <span class="keyword">if</span> (c!=<span class="number">0</span>) &#123;</span><br><span class="line"> a2[Integer.parseInt(split[<span class="number">0</span>])][Integer.parseInt(split[<span class="number">1</span>])]=Integer.parseInt(split[<span class="number">2</span>]);</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> a2=<span class="keyword">new</span> <span class="keyword">int</span>[Integer.parseInt(split[<span class="number">0</span>])][Integer.parseInt(split[<span class="number">1</span>])];</span><br><span class="line"> c++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试输出看是否成功</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a2.length; j++) &#123;</span><br><span class="line">System.out.print(a2[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*创建人:</span></span><br><span class="line"><span class="comment">*项目名:zhx</span></span><br><span class="line"><span class="comment">*算法</span></span><br><span class="line"><span class="comment">*2019年8月29日-下午7:13:28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无向图(深广度优先遍历)</title>
      <link href="/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/"/>
      <url>/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>没有方向的图,但是每个点之间总有连通的路 ,这篇文章主要讲述深度优先遍历和广度优先遍历,用java实现两个算法,如下图无向图用二位数组表示,连通代表1</p><a id="more"></a><p><img src="/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/1569509392959.png" alt="1569509406568"></p><h2 id="二维数组实现无向图"><a href="#二维数组实现无向图" class="headerlink" title="二维数组实现无向图"></a>二维数组实现无向图</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; list;<span class="comment">//用于存储结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] arr;<span class="comment">//用于存储是否连通,连通为1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span>[] bs;<span class="comment">//用于判断结点是否被访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;<span class="comment">//连通的线的条数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">arr=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">bs=<span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">list=<span class="keyword">new</span>  ArrayList&lt;String&gt;(n);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLine</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line">arr[v1][v2]=<span class="number">1</span>;</span><br><span class="line">arr[v2][v1]=<span class="number">1</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加连通线"><a href="#添加连通线" class="headerlink" title="添加连通线"></a>添加连通线</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Graph graph=<span class="keyword">new</span> Graph(<span class="number">5</span>);<span class="comment">//5个结点</span></span><br><span class="line">ArrayList&lt;String&gt; arrayList = graph.list;</span><br><span class="line">添加结点,对应下标分别是 <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">arrayList.add(<span class="string">"A"</span>);</span><br><span class="line">arrayList.add(<span class="string">"B"</span>);</span><br><span class="line">arrayList.add(<span class="string">"C"</span>);</span><br><span class="line">arrayList.add(<span class="string">"D"</span>);</span><br><span class="line">arrayList.add(<span class="string">"E"</span>);</span><br><span class="line"><span class="comment">//AB  AE  BC  BD  CD </span></span><br><span class="line">graph.addLine(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">graph.addLine(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">graph.addLine(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">graph.addLine(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">graph.addLine(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>结果如上图的二位数组</strong></p><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>连通的有:AB  AE  BC  BD  CD </p><ul><li><strong>A</strong>开始找第一个没访问过的连通点<strong>B</strong>,</li><li><strong>B</strong>找第一个没访问过的连通点<strong>C</strong>,</li><li><strong>C</strong>找第一个没访问过的连通点<strong>D</strong></li><li>D连通点BC都已访问过,同理回退到A的第二个结点E,结束</li><li>输出A B C D E</li></ul><p><img src="/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/1569656230364.png" alt="1569656230364"></p><p><strong>把以下方法添加到类Graph</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找下一个邻结点b的下一个的下标</span></span><br><span class="line"><span class="comment">//比如b=1,那么a就是2或3或4</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findNeighbourNode</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = b+<span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[a][i]==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">boolean</span>[] bs,<span class="keyword">int</span> v1)</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出结点</span></span><br><span class="line">System.out.print(list.get(v1)+<span class="string">"-&gt;"</span>);</span><br><span class="line"><span class="comment">//表示已经走过</span></span><br><span class="line">bs[v1]=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> w = findNeighbourNode(v1,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//说明存在结点</span></span><br><span class="line"><span class="keyword">while</span> (w!=-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//只要还没访问过,继续往下遍历</span></span><br><span class="line"><span class="keyword">if</span> (!bs[w]) &#123;</span><br><span class="line">dfs(bs,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则就是换上一个结点的第二个节点</span></span><br><span class="line"> w=findNeighbourNode(v1,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//循环只要是没走过的都走一遍</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!bs[i]) &#123;</span><br><span class="line">dfs(bs,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p><img src="/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/1569509392956.png" alt="1569509392956"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//广度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">boolean</span>[] bs,<span class="keyword">int</span> v1)</span> </span>&#123;</span><br><span class="line">LinkedList&lt;Integer&gt; linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="comment">//输出结点</span></span><br><span class="line">System.out.print(list.get(v1)+<span class="string">"-&gt;"</span>);</span><br><span class="line"><span class="comment">//表示已经走过</span></span><br><span class="line">bs[v1]=<span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//队尾添加</span></span><br><span class="line">linkedList.addLast(v1);</span><br><span class="line"><span class="keyword">while</span>(!linkedList.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//拿出队头</span></span><br><span class="line"><span class="keyword">int</span> u=(Integer)linkedList.removeFirst();</span><br><span class="line"><span class="keyword">int</span> w = findNeighbourNode(u,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//说明存在结点</span></span><br><span class="line"><span class="keyword">while</span> (w!=-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//只要还没访问过,继续往下遍历</span></span><br><span class="line"><span class="keyword">if</span> (!bs[w]) &#123;</span><br><span class="line"><span class="comment">//输出结点</span></span><br><span class="line">System.out.print(list.get(w)+<span class="string">"-&gt;"</span>);</span><br><span class="line"><span class="comment">//表示已经走过</span></span><br><span class="line">bs[w]=<span class="keyword">true</span>;</span><br><span class="line">linkedList.addLast(w);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则就是换上一个结点的第二个节点</span></span><br><span class="line">w=findNeighbourNode(u,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//循环只要是没走过的都走一遍</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!bs[i]) &#123;</span><br><span class="line">bfs(bs,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="举个更合适的例子"><a href="#举个更合适的例子" class="headerlink" title="举个更合适的例子"></a>举个更合适的例子</h2><p><img src="/2020/08/09/%E6%97%A0%E5%90%91%E5%9B%BE/1569659710239.png" alt="1569659710239"></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么0.1+0.2=0.30000000000000004</title>
      <link href="/2020/08/09/%E4%B8%BA%E4%BB%80%E4%B9%880.1+0.2=0.30000000000000004/"/>
      <url>/2020/08/09/%E4%B8%BA%E4%BB%80%E4%B9%880.1+0.2=0.30000000000000004/</url>
      
        <content type="html"><![CDATA[<p>在js和Java中都会出现一些小数计算不准确的情况</p><p>比如4.0-3.6=0.400000001</p><a id="more"></a><h2 id="其实很简单"><a href="#其实很简单" class="headerlink" title="其实很简单"></a>其实很简单</h2><p>二进制的小数无法精确的转化为十进制,因为电脑计算时,会把十进制转化为二进制后才进行计算,整数不存在这个问题,</p><h2 id="小数比如0-9"><a href="#小数比如0-9" class="headerlink" title="小数比如0.9"></a>小数比如0.9</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ↓    <span class="number">0.9</span>    x2          </span><br><span class="line"><span class="number">1.8</span>   <span class="number">0.8</span>    x2        <span class="number">1</span></span><br><span class="line"><span class="number">1.6</span>   <span class="number">0.6</span>    x2        <span class="number">1</span></span><br><span class="line"><span class="number">1.2</span>   <span class="number">0.2</span>    x2        <span class="number">1</span></span><br><span class="line"><span class="number">0.4</span>          x2        <span class="number">0</span></span><br><span class="line"><span class="number">0.8</span>          x2        <span class="number">0</span></span><br><span class="line"><span class="number">1.6</span>   <span class="number">0.6</span>    x2        <span class="number">1</span></span><br><span class="line"><span class="number">1.2</span>   <span class="number">0.2</span>    x2        <span class="number">1</span></span><br><span class="line">....开始循环</span><br></pre></td></tr></table></figure><p>结果就是0.11100110011…….这是无限的,所以既然不能准确转化为二进制,那么再次转化回来时,自然就不同了</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站换皮肤功能</title>
      <link href="/2020/08/09/%E7%BD%91%E7%AB%99%E6%8D%A2%E7%9A%AE%E8%82%A4%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/08/09/%E7%BD%91%E7%AB%99%E6%8D%A2%E7%9A%AE%E8%82%A4%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>由于本人看腻了自己网站的颜色所以加入了这个功能,将会出现在我的博客2.0版本中,1.0版本是<a href="https://coderzhx.cn" target="_blank" rel="noopener">https://coderzhx.cn</a>, 预计2.0在12月份上线</p><a id="more"></a><h2 id="核心思路-替换css文件"><a href="#核心思路-替换css文件" class="headerlink" title="核心思路:替换css文件"></a>核心思路:替换css文件</h2><h2 id="1-head中加入代码"><a href="#1-head中加入代码" class="headerlink" title="1.head中加入代码"></a>1.head中加入代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/grey.css"</span>  <span class="attr">id</span>=<span class="string">"cssfile"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加按钮"><a href="#2-添加按钮" class="headerlink" title="2.添加按钮"></a>2.添加按钮</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">id</span>=<span class="string">"blue"</span> &gt;</span>换肤<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-监听点击事件"><a href="#3-监听点击事件" class="headerlink" title="3.监听点击事件"></a>3.监听点击事件</h2><p><strong>id获取标签,监听点击,替换css文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获得按钮</span></span><br><span class="line">    <span class="keyword">var</span> blue = <span class="built_in">document</span>.getElementById(<span class="string">'blue'</span>);</span><br><span class="line">    <span class="comment">//获得link</span></span><br><span class="line">    <span class="keyword">var</span> cssfile = <span class="built_in">document</span>.getElementById(<span class="string">'cssfile'</span>);</span><br><span class="line">    <span class="keyword">var</span> i=<span class="literal">false</span>;</span><br><span class="line">    blue.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        cssfile.href = <span class="string">'/css/blue.css'</span>;</span><br><span class="line">        i=<span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cssfile.href = <span class="string">'/css/grey.css'</span>;</span><br><span class="line">        i=<span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/2020/08/09/%E7%BD%91%E7%AB%99%E6%8D%A2%E7%9A%AE%E8%82%A4%E5%8A%9F%E8%83%BD/1570946802228.png" alt="1570946802228"></p><p><img src="/2020/08/09/%E7%BD%91%E7%AB%99%E6%8D%A2%E7%9A%AE%E8%82%A4%E5%8A%9F%E8%83%BD/%E7%BD%91%E7%AB%99%E6%8D%A2%E7%9A%AE%E8%82%A4%E5%8A%9F%E8%83%BD%5C1570946827256.png" alt="1570946827256"></p><h2 id="具体的css样式自己定义即可"><a href="#具体的css样式自己定义即可" class="headerlink" title="具体的css样式自己定义即可!"></a>具体的css样式自己定义即可!</h2>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序存储二叉树(数组实现)</title>
      <link href="/2020/08/09/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91(%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0)/"/>
      <url>/2020/08/09/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91(%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0)/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是二叉树顺序存储"><a href="#什么是二叉树顺序存储" class="headerlink" title="什么是二叉树顺序存储"></a>什么是二叉树顺序存储</h2><p>二叉树顺序存储是二叉树的一种存储方式。将二叉树存储在一个数组中，通过存储元素的下标反映元素之间的父子关系。用于一些特殊场合，如结点个数已知的完全二叉树或接近完全二叉树的二叉树。<strong>仅适用于完全二叉树</strong>.</p><a id="more"></a><p><img src="/2020/08/09/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91(%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0)/1569044587465.png" alt="1569044587465"></p><h2 id="先序中序后序遍历"><a href="#先序中序后序遍历" class="headerlink" title="先序中序后序遍历"></a>先序中序后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrBinaryTree</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">int</span>[] arr;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrBinaryTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.arr = arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"数组为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">System.out.print(arr[index]+<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//左递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">1</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">2</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mid</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"数组为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(arr[index]+<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//左递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">1</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="comment">//右递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">2</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behind</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"数组为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">1</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右递归</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>*index+<span class="number">2</span>&lt;arr.length) &#123;</span><br><span class="line">pre(<span class="number">2</span>*index+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">System.out.print(arr[index]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">ArrBinaryTree arrBinaryTree=<span class="keyword">new</span> ArrBinaryTree(arr);</span><br><span class="line">System.out.println(<span class="string">"先序遍历"</span>);</span><br><span class="line"> arrBinaryTree.pre(<span class="number">0</span>);<span class="comment">//1 2 4 5 3 6</span></span><br><span class="line">System.out.println(<span class="string">"中序遍历"</span>);</span><br><span class="line">arrBinaryTree.mid(<span class="number">0</span>);<span class="comment">//4 2 5 1 6 3</span></span><br><span class="line">System.out.println(<span class="string">"后序遍历"</span>);</span><br><span class="line">arrBinaryTree.behind(<span class="number">0</span>);<span class="comment">//4 5 2 6 3 1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟环形队列数据结构</title>
      <link href="/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>队列的特点就是先选先出,就像排队有先来后到</p><a id="more"></a><p>从头开始打菜，尾部排队</p><p>队列有一个最大存储空间size。这里为6个</p><p><img src="/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567560317542.png" alt="1567560317542"></p><p><img src="/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567561359614.png" alt="1567561359614"></p><p><img src="/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567559792127.png" alt="1567559792127"></p><h2 id="不成熟版代码实现"><a href="#不成熟版代码实现" class="headerlink" title="不成熟版代码实现"></a>不成熟版代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//队列最大存储空间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> font=-<span class="number">1</span>;<span class="comment">//队列头部下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear=-<span class="number">1</span>;<span class="comment">//队列尾部下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法传入队列大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Queue</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.size=size;</span><br><span class="line">arr=<span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear==size-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> font==rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾部添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isFull()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列已满"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rear++;<span class="comment">//尾部下标+1</span></span><br><span class="line">arr[rear]=value;<span class="comment">//并赋值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从头拿出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">font++;<span class="comment">//头部下标+1</span></span><br><span class="line"><span class="keyword">return</span> arr[font];<span class="comment">//并赋值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历展示队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = font+<span class="number">1</span>; i &lt;rear; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">" arr[%d]=%d "</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取头部，取出，队列数据变少了</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[font+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个队列就如上图所画的，拿走数据后的空间没有利用而队列已满是根据rear下标判断，那么这个模拟队列不完整，因此得用环形队列</strong></p><h2 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h2><p><img src="/2020/08/09/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567578870410.png" alt="1567578870410"></p><p><strong>font指向头元素的下标，初始值都为0，此时的空间看上去像是8实际只有7，因为rear永远指向加入的最后一个元素的后一个位置，如果加入arr[7]=a8，那么rear和font都是指向同一块，空状态和满状态该如何判断呢？所以必须空出一块</strong></p><p>rear可以无限加，因此要正确表示下标，可以用取模方式rear=（rear+1）%size ，所以 rear永远在0 -7间循环</p><p>如果a1被取走，然后font+1，那么font也可以无限加，因此也使用取模运算font=（font+1）%size，为了font永远在0-7之间循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleQueue</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//队列最大存储空间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> font;<span class="comment">//队列头部下标默认0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾部下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法传入队列大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleQueue</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.size=size;</span><br><span class="line">arr=<span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> font==(rear+<span class="number">1</span>)%size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear==font;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾部添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isFull()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列已满,不能添加"</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr[rear]=value;<span class="comment">//并赋值</span></span><br><span class="line">rear=(rear+<span class="number">1</span>)%size;<span class="comment">//尾部下标+1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从头依次拿出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空,不能拿出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> value= arr[font];<span class="comment">//并赋值</span></span><br><span class="line">font=(font+<span class="number">1</span>)%size;<span class="comment">//头部下标+1</span></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历展示队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空,不能展示队列"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rear会出现比font小的情况因此不能写(rear-font)%size,会出现负数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = font; i &lt;font+ (rear+size-font)%size; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">" arr[%d]=%d \n"</span>, i%size, arr[i%size]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取头部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空,不能获取头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[font];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字和字母验证码生成</title>
      <link href="/2020/08/09/%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/2020/08/09/%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="登录界面如何生成数字和字母验证码"><a href="#登录界面如何生成数字和字母验证码" class="headerlink" title="登录界面如何生成数字和字母验证码"></a>登录界面如何生成数字和字母验证码</h2><a id="more"></a><h2 id="1-在web-xml中加入"><a href="#1-在web-xml中加入" class="headerlink" title="1.在web.xml中加入"></a>1.在web.xml中加入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;AuthImage&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">zy</span>.<span class="title">servlet</span>.<span class="title">AuthImage</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">AuthImage</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">authImage</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-新建servlet"><a href="#2-新建servlet" class="headerlink" title="2.新建servlet"></a>2.新建servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zy.utils.VerifyCodeUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;AuthImage Description:&lt;/b&gt; (验证码)&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;DATE:&lt;/b&gt; 2016年6月2日 下午3:53:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthImage</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">http</span>.<span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成随机字串</span></span><br><span class="line">        String verifyCode = VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//存入会话session</span></span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//删除以前的</span></span><br><span class="line">        session.removeAttribute(<span class="string">"verCode"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"verCode"</span>, verifyCode.toLowerCase());</span><br><span class="line">        <span class="comment">//生成图片</span></span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">100</span>, h = <span class="number">30</span>;</span><br><span class="line">        VerifyCodeUtils.outputImage(w, h, response.getOutputStream(), verifyCode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-新建工具类"><a href="#3-新建工具类" class="headerlink" title="3.新建工具类"></a>3.新建工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.RenderingHints;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;VerifyCodeUtils Description:&lt;/b&gt; (验证码生成)&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;DATE:&lt;/b&gt; 2016年6月2日 下午3:53:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODES = <span class="string">"23456789ABCDEFGHJKLMNPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources   验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize, String sources)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sources == <span class="keyword">null</span> || sources.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> codesLen = sources.length();</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        StringBuilder verifyCode = <span class="keyword">new</span> StringBuilder(verifySize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen-<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码文件,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, outputFile, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, os, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定验证码图像文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outputFile == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = outputFile.getParentFile();</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outputFile);</span><br><span class="line">            outputImage(w, h, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> verifySize = code.length();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        Graphics2D g2 = image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> Color[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> Color[] &#123; Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW &#125;;</span><br><span class="line">        <span class="keyword">float</span>[] fractions = <span class="keyword">new</span> <span class="keyword">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"></span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        Color c = getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h-<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="keyword">float</span> yawpRate = <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="keyword">int</span> area = (<span class="keyword">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h);</span><br><span class="line">            <span class="keyword">int</span> rgb = getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="keyword">int</span> fontSize = h-<span class="number">4</span>;</span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"Algerian"</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="keyword">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            AffineTransform affine = <span class="keyword">new</span> AffineTransform();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize/<span class="number">2</span>, h/<span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w-<span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h/<span class="number">2</span> + fontSize/<span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomIntColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="keyword">int</span> color = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shear</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearX</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="keyword">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearY</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="keyword">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"F:/verifies"</span>);</span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">200</span>, h = <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            String verifyCode = generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">            File file = <span class="keyword">new</span> File(dir, verifyCode + <span class="string">".jpg"</span>);</span><br><span class="line">            outputImage(w, h, file, verifyCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title">codeToLowerCase</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">if</span>(str!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">                <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(c))</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                <span class="keyword">if</span>(Character.isUpperCase(c))</span><br><span class="line">                    sb.append(Character.toLowerCase(c));</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(c))</span><br><span class="line">                    sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-html中写入"><a href="#4-html中写入" class="headerlink" title="4.html中写入"></a>4.html中写入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for="checkcode"&gt;验证码:&lt;/label&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"checkcode"</span> id=<span class="string">"checkcode"</span> size=<span class="string">"18"</span>  /&gt;</span><br><span class="line">&lt;img id=<span class="string">"img"</span> src=<span class="string">"/authImage"</span> onclick=<span class="string">"javascript:changeImg()"</span> style=<span class="string">"position: relative;top: 10px"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-点击刷新验证码"><a href="#5-点击刷新验证码" class="headerlink" title="5.点击刷新验证码"></a>5.点击刷新验证码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 触发JS刷新验证码--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line">        img.src = <span class="string">"/authImage?date="</span> + <span class="keyword">new</span> <span class="built_in">Date</span>();;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-SpringMVC中"><a href="#6-SpringMVC中" class="headerlink" title="6.SpringMVC中"></a>6.SpringMVC中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin/authImage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">yanzm</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        <span class="comment">//生成随机字串</span></span><br><span class="line">        String verifyCode = VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//存入会话session</span></span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//删除以前的</span></span><br><span class="line">        session.removeAttribute(<span class="string">"verCode"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"verCode"</span>, verifyCode.toLowerCase());</span><br><span class="line">        <span class="comment">//生成图片</span></span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">130</span>, h = <span class="number">38</span>;</span><br><span class="line">        VerifyCodeUtils.outputImage(w, h, response.getOutputStream(), verifyCode);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-layui中的模板里要把img标签的默认id和class去掉"><a href="#7-layui中的模板里要把img标签的默认id和class去掉" class="headerlink" title="7.layui中的模板里要把img标签的默认id和class去掉"></a>7.layui中的模板里要把img标签的默认id和class去掉</h2><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/admin/authImage"</span>  <span class="attr">onclick</span>=<span class="string">"javascript:changeImg()"</span> <span class="attr">id</span>=<span class="string">"img"</span> &gt;</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事务的四种隔离级别</title>
      <link href="/2020/08/09/%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2020/08/09/%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 事务在并发情况下会出现以下情况<code>脏读</code>,<code>不可重复读</code>,<code>幻读</code>,事务的四种隔离级别分别为了逐级解决这三个问题</p></blockquote><a id="more"></a><p><strong>脏读</strong>:表table, A开启事务先给table修改了一条数据,提交事务之前,B读到了修改后的内容,之后A并没有提交事务,而回滚,出现了前后数据的不一致,这就是脏读(<strong>侧重修改进行中读到数据的不同</strong>),</p><p><strong>不可重复读</strong>:表table, B读到一条内容,此时A开启事务<strong>修改</strong>了一条数据并提交事务,B再次读数据,数据前后不一致(<strong>侧重修改前和修改后读到数据的不同</strong>)</p><p><strong>幻读</strong>:表table, B读到一条内容,此时A开启事务<strong>添加</strong>了一条数据并提交事务,B再次读数据,数据前后不一致(<strong>侧重添加前和添加后读到数据的不同</strong>)</p><h2 id="读未提交-Read-uncommitted"><a href="#读未提交-Read-uncommitted" class="headerlink" title="读未提交(Read uncommitted)"></a>读未提交(Read uncommitted)</h2><p>这个级别什么问题都没解决,所以不采用这个级别</p><h2 id="读已提交-Read-committed"><a href="#读已提交-Read-committed" class="headerlink" title="读已提交(Read committed)"></a>读已提交(Read committed)</h2><p>解决了<code>脏读</code></p><h2 id="重复读-Repeatable-read"><a href="#重复读-Repeatable-read" class="headerlink" title="重复读(Repeatable read)"></a>重复读(Repeatable read)</h2><p>解决了<code>脏读</code>和<code>不可重复读</code></p><h2 id="序列化-Serializable"><a href="#序列化-Serializable" class="headerlink" title="序列化(Serializable)"></a>序列化(Serializable)</h2><p>解决了<code>脏读</code>,<code>不可重复读</code>和<code>幻读</code></p><h2 id="数据库ACID四大特性"><a href="#数据库ACID四大特性" class="headerlink" title="数据库ACID四大特性"></a>数据库ACID四大特性</h2><p>这个千万不要和上述的4种隔离界<strong>别搞混</strong></p><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h3><blockquote><p>原子性是指事务是一个<strong>不可再分割的工作单元</strong>，事务中的操作要么都发生，要么都不发生。</p><p>可采用“<strong>A向B转账</strong>”这个例子来说明解释</p></blockquote><h3 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2. 一致性"></a>2. 一致性</h3><blockquote><p>类似于非黑即白,不存在黑白分界有灰的状态,意思就是读到的数据要么是黑要么是白,执行提交事务代码的过程可以理解为灰就是临界过程,这个过程可以理解为不存在</p></blockquote><h3 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3. 隔离性"></a>3. 隔离性</h3><blockquote><p><strong>多个事务并发访问时，事务之间是隔离的</strong>，一个事务不应该影响其它事务运行效果。</p><p>在并发环境中，当<strong>不同的事务同时操纵相同的数据</strong>时，每个事务都有<strong>各自的完整数据空间</strong>。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，<strong>事务不会查看到中间状态的数据</strong>。</p></blockquote><h3 id="4-持久性"><a href="#4-持久性" class="headerlink" title="4. 持久性"></a>4. 持久性</h3><blockquote><p>这是最好理解的一个特性：持久性，意味着在事务完成以后，<strong>该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</strong>（完成的事务是<strong>系统永久的部分</strong>，对系统的影响是永久性的，该修改即使出现致命的系统故障也将一直保持）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度</title>
      <link href="/2020/08/09/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2020/08/09/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><strong>O(1)&lt;O(log<sub>2</sub>n)&lt;O(n)&lt;O(nlog<sub>2</sub>n)&lt;O(n<sup>2</sup>)&lt;O(n<sup>k</sup>)&lt;O(2<sup>n</sup>)</strong></p><a id="more"></a><h4 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">++i;</span><br><span class="line">--i;</span><br><span class="line">i=i+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h4 id="O-log2n"><a href="#O-log2n" class="headerlink" title="O(log2n)"></a>O(log<sub>2</sub>n)</h4><p> 如果 i=i*3 那就是3为底数O(log<sub>3</sub>n) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    </span><br><span class="line">    i=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h4><p>循环几次n就是几次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line">。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-nlog2N"><a href="#O-nlog2N" class="headerlink" title="O(nlog2N)"></a>O(nlog<sub>2</sub>N)</h4><p>上边两个代码嵌套就是这个复杂度了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;N)&#123;</span><br><span class="line">        j=j*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-n2"><a href="#O-n2" class="headerlink" title="O(n2)"></a>O(n<sup>2</sup>)</h4><p>两个for循环,典型的冒泡排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;n; j++) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="各种排序算法的时间复杂度"><a href="#各种排序算法的时间复杂度" class="headerlink" title="各种排序算法的时间复杂度"></a>各种排序算法的时间复杂度</h2><p><img src="/2020/08/09/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%5C0-1109833343.png" alt="975503-20170214211234550-1109833343"></p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>比如一个数组[1,2 ,3,3] 其中有两个3,排完序后两个三交换了位置,虽然交换了看上去没有变.</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是装箱与拆箱</title>
      <link href="/2020/08/09/%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/"/>
      <url>/2020/08/09/%E4%BB%80%E4%B9%88%E6%98%AF%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h2><p>把基本的数据类型转化为对应的包装类</p><p>比如int转化为Integer</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a=Integer.valueOf(<span class="keyword">int</span>);<span class="comment">//装箱</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer a=<span class="number">1</span>;<span class="comment">//自动装箱</span></span><br></pre></td></tr></table></figure><h2 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=a;<span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> c=a.intValue()<span class="comment">//手动拆箱</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是多线程</title>
      <link href="/2020/08/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/08/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是多线程"><a href="#什么是多线程" class="headerlink" title="什么是多线程"></a>什么是多线程</h1><p>一个软件相当于一个进程,其中包含了多个线程,</p><h2 id="1-多线程的目的"><a href="#1-多线程的目的" class="headerlink" title="1.多线程的目的"></a>1.多线程的目的</h2><p>为了提高软件的执行效率.</p><ul><li><p>比如单线程下的添加功能:前台传输数据到后台再添加到数据库,其中连接数据库,写入,是耗时操作,使用磁盘资源,但是cpu是空闲的,意思就是同时只能做一件事,利用多线程,使用cpu做其他操作,这就相当于两个线程同时工作!</p></li><li><p>AOP处理日志:AOP写日志花费2s,剩下操作花费2s,那么可以让写日志单独开启线程操作,这样总的时间还是2s,这就是多线程的好处!</p></li></ul><h2 id="2-多线程问题"><a href="#2-多线程问题" class="headerlink" title="2.多线程问题"></a>2.多线程问题</h2><h3 id="2-1-线程安全问题"><a href="#2-1-线程安全问题" class="headerlink" title="2.1.线程安全问题"></a>2.1.线程安全问题</h3><p>多个线程同时共享一个全局变量,可能被其他线程干扰.(锁解决)(乐观cas)(悲观lock,syn)</p><h3 id="2-2-获取异步结果"><a href="#2-2-获取异步结果" class="headerlink" title="2.2.获取异步结果"></a>2.2.获取异步结果</h3><p>主动根据业务id查询(<strong>这个暂时不理解</strong>)</p><h3 id="2-3-死锁问题"><a href="#2-3-死锁问题" class="headerlink" title="2.3.死锁问题"></a>2.3.死锁问题</h3><p>其他文章有介绍</p><h2 id="3-多线程生命周期"><a href="#3-多线程生命周期" class="headerlink" title="3.多线程生命周期"></a>3.多线程生命周期</h2><p>首先新建线程,调用start()后进入就绪状态,得到cpu执行权才会运行,sleep(),join()锁,wait(),就会进入阻塞状态,sleep()时间到或者获取锁,又会进入就绪状态,循环,最后死亡</p><h2 id="线程池的引入"><a href="#线程池的引入" class="headerlink" title="线程池的引入"></a>线程池的引入</h2><p>由于start()和stop()对cpu消耗大,因此要复用线程,不能让线程停止(死循环while)</p><h3 id="线程池优点"><a href="#线程池优点" class="headerlink" title="线程池优点"></a>线程池优点</h3><ul><li><p>正是由于减少了start的步骤,因此减少了cpu的调度,</p></li><li><p>复用线程</p></li><li><p>统一维护管理线程</p></li></ul><h2 id="线程池创建方式"><a href="#线程池创建方式" class="headerlink" title="线程池创建方式"></a>线程池创建方式</h2><p>核心EXecutors类封装了4种构造函数ThreadPoolExecutor</p><ul><li><p>可缓存   缓存最大数Integer的最大值</p></li><li><p>自定义长度(固定数)</p></li><li><p>可定时</p></li><li><p>单例</p><p>常用方式是自定义长度根据cpu核心数而定</p></li></ul><h2 id="线程池核心原理"><a href="#线程池核心原理" class="headerlink" title="线程池核心原理"></a>线程池核心原理</h2><ul><li>提前创建线程,并保持运行状态,使用ThreadPoolExecutor创建</li><li>使用execure把任务加入队列中</li><li>线程不断获取任务,前提是有的话,获取到就运行</li></ul><h2 id="模拟线程池"><a href="#模拟线程池" class="headerlink" title="模拟线程池"></a>模拟线程池</h2><p><img src="/2020/08/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20200306202624983.png" alt="image-20200306202624983"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 多线程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Thread&gt; workThreads;<span class="comment">// 一直运行的线程集合</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; blockingQueue;<span class="comment">// 队列容器,用于存储任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isWorking=<span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExecutorService</span><span class="params">(<span class="keyword">int</span> workThreadsSize, <span class="keyword">int</span> blockingQueueSize)</span> </span>&#123;<span class="comment">//线程个数,队列容器大小</span></span><br><span class="line"><span class="keyword">this</span>.workThreads =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">this</span>.blockingQueue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(blockingQueueSize);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workThreadsSize; i++) &#123;<span class="comment">//创建一直运行的线程数</span></span><br><span class="line">WorkThread workThread=<span class="keyword">new</span> WorkThread();</span><br><span class="line">workThread.start();<span class="comment">//运行起来后添加到集合</span></span><br><span class="line"><span class="keyword">this</span>.workThreads.add(workThread);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者(线程)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(isWorking||blockingQueue.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">Runnable runnable=blockingQueue.poll();<span class="comment">//从队列中拿任务</span></span><br><span class="line"><span class="keyword">if</span> (runnable!=<span class="keyword">null</span>) &#123;</span><br><span class="line">runnable.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execure</span><span class="params">(Runnable runnable)</span></span>&#123;<span class="comment">//执行就往队列中放入任务</span></span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">this</span>.blockingQueue.offer(runnable);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;<span class="comment">//执行就往队列中放入线程</span></span><br><span class="line">  <span class="keyword">this</span>.isWorking=<span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//预先创建一直运行的线程池其中有10个线程</span></span><br><span class="line"> <span class="comment">//并创建可以存储110个任务的队列容器</span></span><br><span class="line"> ExecutorService executorService=<span class="keyword">new</span> ExecutorService(<span class="number">10</span>,<span class="number">1110</span>);<span class="comment">//10个线程,1110个任务,</span></span><br><span class="line"> <span class="comment">//创建2210个任务,放入队列容器中,当然不是一次性放下,因为只有1110那么大</span></span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2210</span>; i++) &#123;</span><br><span class="line"> <span class="keyword">final</span>  <span class="keyword">int</span>  i1=i;</span><br><span class="line"> executorService.execure(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行任务:"</span>+i1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//执行完关闭线程</span></span><br><span class="line"> executorService. shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他线程问题"><a href="#其他线程问题" class="headerlink" title="其他线程问题"></a>其他线程问题</h3><p>一个程序  两个数相乘(1) +两个数相加(2) =?  两个步骤耗时各一秒</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三柜台售100张票多线程问题</title>
      <link href="/2020/08/09/%E4%B8%89%E6%9F%9C%E5%8F%B0%E5%94%AE100%E5%BC%A0%E7%A5%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/%E4%B8%89%E6%9F%9C%E5%8F%B0%E5%94%AE100%E5%BC%A0%E7%A5%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么在只有一张票时不出现线程安全问题"><a href="#怎么在只有一张票时不出现线程安全问题" class="headerlink" title="怎么在只有一张票时不出现线程安全问题?"></a>怎么在只有一张票时不出现线程安全问题?</h2><a id="more"></a><h2 id="普通状态代码"><a href="#普通状态代码" class="headerlink" title="普通状态代码"></a>普通状态代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ti=<span class="number">100</span>;<span class="comment">//100张票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">tickets();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">tickets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ti&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"出售第"</span>+ti--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Tickets t=<span class="keyword">new</span> Tickets();</span><br><span class="line"><span class="comment">//3个柜台同时卖票</span></span><br><span class="line">Thread t0=<span class="keyword">new</span> Thread(t,<span class="string">"窗口一"</span>);</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(t,<span class="string">"窗口二"</span>);</span><br><span class="line">Thread t2=<span class="keyword">new</span> Thread(t,<span class="string">"窗口三"</span>);</span><br><span class="line">t0.start();</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    存在隐患也许会出现0,-1,-2的错误的极端线程安全问题,<strong>但CPU运行速度很快出现几率很低,单不允许出现</strong>!  </p><h2 id="模拟不安全状态"><a href="#模拟不安全状态" class="headerlink" title="模拟不安全状态"></a>模拟不安全状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tickets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ti&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"出售第"</span>+ti--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">窗口三出售第3</span><br><span class="line">窗口二出售第2</span><br><span class="line">窗口一出售第1</span><br><span class="line">窗口二出售第0</span><br><span class="line">窗口三出售第-1</span><br></pre></td></tr></table></figure><p><strong>原因:在最后只有一张票的情况下,线程1进入ti&gt;0判断,但没输出之前,线程2进来抢夺了资源,巧的是此时线程3又抢了线程2的资源,12就在之间休眠等着了,等线程3输出打印让出了资源,此时ti=0,线程12,原地苏醒,一打印,变成-2,</strong></p><p>这有一个输出乱序的小问题,本身控制台也是一个临界资源,需要同步访问,谁抢到谁先输出</p><h2 id="添加同步方法"><a href="#添加同步方法" class="headerlink" title="添加同步方法"></a>添加同步方法</h2><p>在让线程休眠10毫秒 模拟不安全情况 ,此时会<strong>高几率</strong>出现不安全情况 ,</p><p>加上同步后,类似于<strong>上厕所把门关上</strong>,把<strong>同时共享的资源变成互斥共享也叫做临界资源</strong>,由于开关门耗费了很多时间,因此线程安全<strong>效率低</strong>,不安全的效率高 </p><p>比如ArrayList,LinkList都是线程不安全所以运行速度很快</p><p>StringBuffer安全,StringBuilder不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">tickets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ti&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"出售第"</span>+ti--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> Lock lock= <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tickets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock();<span class="comment">//加锁</span></span><br><span class="line"><span class="keyword">if</span> (ti&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"出售第"</span>+ti--);</span><br><span class="line">&#125;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果相同!</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何提交代码到Github上 ?</title>
      <link href="/2020/08/09/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0Github%E4%B8%8A/"/>
      <url>/2020/08/09/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0Github%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="如何提交代码到Github上"><a href="#如何提交代码到Github上" class="headerlink" title="如何提交代码到Github上"></a>如何提交代码到Github上</h1><a id="more"></a><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><ul><li><p>本地新建文件夹,右键git bash here,前提你新建了GitHub仓库</p></li><li><p>git init</p></li><li><p>git status,查看状态此时是红色的</p></li><li><p>git add –all不行的话就git add -A  (添加该文件夹所有东西到GitHub)</p></li><li><p>git commit -m “第一次提交,图书crud,图书类别crud”  ,上传说明</p></li><li><p>git remote add origin <a href="https://github.com/wszhxo/SSM-books-management-system.git(关联到GitHub仓库)" target="_blank" rel="noopener">https://github.com/wszhxo/SSM-books-management-system.git(关联到GitHub仓库)</a></p></li><li><p>git push -u origin master</p></li><li><p>上传到GitHub 完成</p></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ul><li><p>git status   </p></li><li><p>git add -A   </p></li><li><p>git commit -a -m “first commit”  </p></li></ul><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><ul><li><p>git status</p></li><li><p>git pull origin master + 仓库地址</p></li><li><p>删除本地文件</p></li><li><p>git commmit -m “更新说明”</p></li><li><p>git push origin master</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何让博客指向个人域名 ?</title>
      <link href="/2020/08/09/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%90%91%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
      <url>/2020/08/09/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%90%91%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="个人域名怎么样绑定到自己的GitHub-Pages站点呢"><a href="#个人域名怎么样绑定到自己的GitHub-Pages站点呢" class="headerlink" title="个人域名怎么样绑定到自己的GitHub Pages站点呢?"></a>个人域名怎么样绑定到自己的GitHub Pages站点呢?</h2><a id="more"></a><h2 id="阿里云购买域名"><a href="#阿里云购买域名" class="headerlink" title="阿里云购买域名"></a><a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云购买域名</a></h2><p>购买域名后需要<strong>备案</strong>,备案前需要<strong>实名认证</strong>,花了几分钟就可以完成了</p><p>点击自己用户名 -进入管理控制台 -域名-</p><p><img src="/2020/08/09/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%90%91%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/1555755079631.png" alt="1555755079631"></p><p><img src="/2020/08/09/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%90%91%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/1555756431294.png" alt="1555756431294"></p><p>完成 启用</p><h2 id="在github上配置CNAME记录类型"><a href="#在github上配置CNAME记录类型" class="headerlink" title="在github上配置CNAME记录类型"></a>在github上配置CNAME记录类型</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法 :"></a>第一种方法 :</h3><p>回到github项目create new file   CNAME   写入买的域名即可不过,每次hexo d都需要重新写入</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法:"></a>第二种方法:</h3><p><strong>在blog文件下,安装插件</strong>  输入命令</p><p><code>npm install hexo-generator-cname --save</code></p><h4 id="修改-config-yml下的url"><a href="#修改-config-yml下的url" class="headerlink" title="修改_config.yml下的url"></a>修改_config.yml下的url</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2020/08/09/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%90%91%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/1555756767129.png" alt="1555756767129"></h4><p>重新 <code>hexo clean</code>  <code>hexo  g -d</code> 刷新网页</p><p>就可以用域名访问个人博客啦 !</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>清除表单下拉框记录</title>
      <link href="/2020/08/09/%E6%B8%85%E9%99%A4%E8%A1%A8%E5%8D%95%E4%B8%8B%E6%8B%89%E6%A1%86%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/09/%E6%B8%85%E9%99%A4%E8%A1%A8%E5%8D%95%E4%B8%8B%E6%8B%89%E6%A1%86%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="input标签里加入autocomplete-”off”"><a href="#input标签里加入autocomplete-”off”" class="headerlink" title="input标签里加入autocomplete=”off”"></a>input标签里加入autocomplete=”off”</h2>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七牛云js上传图片</title>
      <link href="/2020/08/09/%E4%B8%83%E7%89%9B%E4%BA%91js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/08/09/%E4%B8%83%E7%89%9B%E4%BA%91js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="七牛云js上传图片"><a href="#七牛云js上传图片" class="headerlink" title="七牛云js上传图片"></a>七牛云js上传图片</h1><p>项目中我把所有图片都存到了七牛云里边，所以我构思了一个功能：</p><h2 id="表单上传的同时，把图片上传到七牛云并返回外链，以及预览图片"><a href="#表单上传的同时，把图片上传到七牛云并返回外链，以及预览图片" class="headerlink" title="表单上传的同时，把图片上传到七牛云并返回外链，以及预览图片"></a>表单上传的同时，把<strong>图片上传</strong>到七牛云并<strong>返回外链</strong>，以及<strong>预览图片</strong></h2><h2 id="1-不可行的思路"><a href="#1-不可行的思路" class="headerlink" title="1.不可行的思路"></a>1.不可行的思路</h2><p>前台表单上传图片，后台获取图片本地绝对路径，再上传，然而这种想法完全行不通！因为为了安全起见绝对路径已经获取不到了，既然获取不到绝对路径，那就是白搭，不信的可以试试，你会发现你是在浪费时间</p><a id="more"></a><h2 id="2-半可行的思路"><a href="#2-半可行的思路" class="headerlink" title="2.半可行的思路"></a>2.半可行的思路</h2><p>利用七牛云的文档<a href="https://developer.qiniu.com/kodo/manual/1272/form-upload，我就给你现成的，还有一些表单参数" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/manual/1272/form-upload，我就给你现成的，还有一些表单参数</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"http://upload.qiniup.com/"</span> <span class="attr">id</span>=<span class="string">"subform"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--图片名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">type</span>=<span class="string">"test"</span> &gt;</span></span><br><span class="line">       <span class="comment">&lt;!--token后台获取--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"token"</span> &gt;</span></span><br><span class="line">       <span class="comment">&lt;!--图文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//预先获取token，请求后台直接返回token字符串</span></span></span><br><span class="line"><span class="javascript"> $($.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">  type: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">  dataType: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">  url: <span class="string">"/admin/uploadqiniu"</span> ,</span></span><br><span class="line"><span class="actionscript">  success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">   $(<span class="string">"#token"</span>).val(data)</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;));</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SpringBoot集成七牛云看最底下</strong></p><p>这个方法也可以但是他会跳转到一个json字符串的页面，体验极差（<em>不在乎的可以试一下</em>，于是我使用了ajax请求<a href="http://upload.qiniup.com，但是这属于**跨域请求**，json不支持，得用jsonp，但是用jsonp七牛云又不支持，矛盾，这个方法放弃" target="_blank" rel="noopener">http://upload.qiniup.com，但是这属于**跨域请求**，json不支持，得用jsonp，但是用jsonp七牛云又不支持，矛盾，这个方法放弃</a>!</p><h2 id="3-可行思路"><a href="#3-可行思路" class="headerlink" title="3.可行思路"></a>3.可行思路</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>参考了一位网友的文章<a href="https://blog.csdn.net/ChinaLiu_Kang/article/details/86613453" target="_blank" rel="noopener">https://blog.csdn.net/ChinaLiu_Kang/article/details/86613453</a></p><p>把图片信息保存为base64，后把token一起上传到<a href="http://upload.qiniu.com/putb64/-1七牛云就可以了！你可以把下面的代码全部复制，自己去测试一定是对的" target="_blank" rel="noopener">http://upload.qiniu.com/putb64/-1七牛云就可以了！你可以把下面的代码全部复制，自己去测试一定是对的</a></p><p>注意把后台获取的token赋值给qiniutoken，<strong>token的获取一定要预加载</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sub"</span>&gt;</span>确定上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"mypic"</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">height</span>=<span class="string">"200px"</span> <span class="attr">src</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left: auto;margin-top:100px;"</span>&gt;</span>图片地址:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"imgUrl"</span> <span class="attr">style</span>=<span class="string">"width:300px;height: 40px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">//七牛token 七牛云平台安全标识</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> qiniutoken = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">//七牛云图片base64格式上传地址</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> uploadUrl = <span class="string">"http://upload.qiniu.com/putb64/-1"</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">//需要上传的图片内容 base64格式</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> imgStr = <span class="string">''</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> <span class="comment">//七牛云平台 配置的域名</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> urlHeader = <span class="string">"http://puu1qclkk.bkt.clouddn.com/"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> <span class="comment">//获取七牛云token</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// function qnToken() &#123;</span></span></span><br><span class="line"><span class="javascript">  $($.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">   type: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">   dataType: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">   url: <span class="string">"/admin/uploadqiniu"</span> ,</span></span><br><span class="line"><span class="actionscript">   success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">    qiniutoken=data;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"认知为:"</span>+qiniutoken)</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;));</span><br><span class="line"><span class="actionscript"> <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> <span class="comment">//上传图片</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">  xhr.open(<span class="string">"POST"</span>, uploadUrl, <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//文本类型</span></span></span><br><span class="line"><span class="actionscript">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//七牛认证信息 注意空格</span></span></span><br><span class="line"><span class="actionscript">  xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"UpToken "</span> + qiniutoken);</span></span><br><span class="line">  xhr.send(imgStr);</span><br><span class="line"><span class="actionscript">  <span class="comment">//监听状态</span></span></span><br><span class="line"><span class="actionscript">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">   if(xhr.readyState == 4) &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> result = xhr.responseText;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'上传请求结果数据:'</span> + result);</span></span><br><span class="line"><span class="javascript">    result = <span class="built_in">JSON</span>.parse(result);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#mypic"</span>).attr(<span class="string">"src"</span>, urlHeader + result.hash);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#imgUrl"</span>).val(urlHeader + result.hash);</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"> <span class="comment">//将图片转为base64格式的字符串</span></span></span><br><span class="line"><span class="javascript"> $(<span class="string">'input[type=file]'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//filses就是input[type=file]文件列表，files[0]就是第一个文件，这里就是将选择的第一个图片文件转化为base64的码</span></span></span><br><span class="line"><span class="actionscript">  reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">  reader.onload = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//或者 e.target.result都是一样的，都是base64码</span></span></span><br><span class="line"><span class="actionscript">   imgStr = reader.result.split(<span class="string">','</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(<span class="string">'需要上传的base64格式图片:'</span> + imgStr);</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"> <span class="comment">//开始上传</span></span></span><br><span class="line"><span class="javascript"> $(<span class="string">"#sub"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//获取最新token</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// qnToken();</span></span></span><br><span class="line">  uploadImg();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预览：</p><p><img src="/2020/08/09/%E4%B8%83%E7%89%9B%E4%BA%91js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/1564824560146.png" alt="1564824560146"></p><p><img src="/2020/08/09/%E4%B8%83%E7%89%9B%E4%BA%91js%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/1564824648217.png" alt="1564824648217"></p><p>报错的话F12看一下情况，可以发我邮箱问我，或者加我qq</p><h2 id="集成七牛云"><a href="#集成七牛云" class="headerlink" title="集成七牛云"></a>集成七牛云</h2><h3 id="pom-xml依赖"><a href="#pom-xml依赖" class="headerlink" title="pom.xml依赖"></a>pom.xml依赖</h3><p>我也不知道是不是全部有用，反正我全部导入进来了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛云--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>happy-dns-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求头参数分析包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>eu.bitwalker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserAgentUtils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--七牛云上传图片服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="两个java类"><a href="#两个java类" class="headerlink" title="两个java类"></a>两个java类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    七牛AK</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKey = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//    七牛SK</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String secretKey = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//    七牛存储空间名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String bucket = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//    七牛默认域名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String domain = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuUpload</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置好账号的ACCESS_KEY和SECRET_KEY</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String ACCESS_KEY = VariableName.accessKey; <span class="comment">//这两个登录七牛 账号里面可以找到</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String SECRET_KEY = VariableName.secretKey;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要上传的空间</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String bucketname = VariableName.bucket; <span class="comment">//对应要上传到七牛上 你的那个路径（自己建文件夹 注意设置公开）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密钥配置，这个Zone.zone0()不同的空间不一样，华东，华南啥的</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Auth auth = Auth.create(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Configuration cfg = <span class="keyword">new</span> Configuration(Zone.zone0());</span><br><span class="line">        <span class="comment">//创建上传对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单上传，使用默认策略，只需要设置上传的空间名就可以了</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUpToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> auth.uploadToken(bucketname);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//我认为这个方法也没用，因为绝对路径的问题，前台获取不到</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">UploadPic</span><span class="params">(String FilePath,String FileName)</span></span>&#123;</span><br><span class="line">            UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">            String accessKey = VariableName.accessKey;      <span class="comment">//AccessKey的值</span></span><br><span class="line">            String secretKey = VariableName.secretKey;      <span class="comment">//SecretKey的值</span></span><br><span class="line">            String bucket = VariableName.bucket;                                          <span class="comment">//存储空间名</span></span><br><span class="line">            Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">            String upToken = auth.uploadToken(bucket);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Response response = uploadManager.put(FilePath, FileName, upToken);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//System.out.println(putRet.key);</span></span><br><span class="line">                <span class="comment">//System.out.println(putRet.hash);</span></span><br><span class="line">                System.out.println(VariableName.domain+<span class="string">"/"</span>+FileName);</span><br><span class="line">                <span class="keyword">return</span> VariableName.domain+<span class="string">"/"</span>+FileName;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (QiniuException ex)&#123;</span><br><span class="line">                Response r = ex.response;</span><br><span class="line">                System.err.println(r.toString());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.err.println(r.bodyString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试本地上传</span></span><br><span class="line">        UploadPic(<span class="string">"f://test"</span>,<span class="string">"222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象模拟约瑟夫问题</title>
      <link href="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是约瑟夫问题"><a href="#什么是约瑟夫问题" class="headerlink" title="什么是约瑟夫问题"></a>什么是约瑟夫问题</h2><p>最普遍的就是39个犹太人自杀,先定义一个要数的数,和开始数数的位置,开始数,数到了就自杀,最后一个人幸免,怎么做呢?</p><a id="more"></a><h2 id="1-面向对象模拟环形链表"><a href="#1-面向对象模拟环形链表" class="headerlink" title="1.面向对象模拟环形链表"></a>1.面向对象模拟环形链表</h2><p>用面向对象设计犹太人类 ,类中包含编号和下一个犹太人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> Child next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">( <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no=no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Child <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Child next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Child [no="</span> + no + <span class="string">"],"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="先设计39个结点的环形链表"><a href="#先设计39个结点的环形链表" class="headerlink" title="先设计39个结点的环形链表"></a>先设计39个结点的环形链表</h3><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/1568016092331.png" alt="1568016092331"></p><h3 id="定义链表添加-展示原链表方法"><a href="#定义链表添加-展示原链表方法" class="headerlink" title="定义链表添加,展示原链表方法"></a>定义链表添加,展示原链表方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleLinked</span></span>&#123;</span><br><span class="line">Child first=<span class="keyword">new</span> Child(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num&lt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"数字不符合"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Child cur=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">Child child=<span class="keyword">new</span> Child(i);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>) &#123;</span><br><span class="line">first=child;</span><br><span class="line">child.setNext(child);</span><br><span class="line">cur=child;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">cur.setNext(child);</span><br><span class="line">cur.getNext().setNext(first);</span><br><span class="line">cur=child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Child cur=first;</span><br><span class="line"><span class="keyword">if</span> (cur==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (first==cur.getNext()) &#123;</span><br><span class="line">System.out.println(cur.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(cur.toString());</span><br><span class="line">cur=cur.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除结点思路"><a href="#删除结点思路" class="headerlink" title="删除结点思路"></a>删除结点思路</h2><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/1568014346304.png" alt="1568014346304"></p><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/1568014526652.png" alt="1568014526652"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//startNo开始位置,count常数标志,size 总共小孩个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">outChild</span> <span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> count,<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startNo&gt;size||count&gt;size) &#123;</span><br><span class="line">System.out.println(<span class="string">"数字不符合"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//header永远在first 的前一个位置</span></span><br><span class="line"><span class="comment">//也就是说header.next=header</span></span><br><span class="line">Child header=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//现让first指向startNo编号的位置,再让header指向first前边的那个</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (startNo==first.getNext().getNo()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">first=first.getNext();</span><br><span class="line">&#125;</span><br><span class="line">header=first;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (header.getNext()==header) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//count数几次,目的让first和header指向对应的正确位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count-<span class="number">1</span>; i++) &#123;</span><br><span class="line">first=first.getNext();</span><br><span class="line">header=header.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把first指向的Child拿出来</span></span><br><span class="line"><span class="comment">//把header.next指向first的下一个</span></span><br><span class="line">System.out.printf(<span class="string">"%d-&gt;"</span> ,first.getNo());</span><br><span class="line">header.setNext(first.getNext());</span><br><span class="line">first=first.getNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CircleLinked circleLinked=<span class="keyword">new</span> CircleLinked();</span><br><span class="line">circleLinked.add(<span class="number">39</span>);</span><br><span class="line">circleLinked.outChild(<span class="number">3</span>,<span class="number">4</span>,<span class="number">39</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5-&gt;9-&gt;13-&gt;17-&gt;21-&gt;25-&gt;29-&gt;33-&gt;37-&gt;2-&gt;6-&gt;11-&gt;16-&gt;22-&gt;27-&gt;32-&gt;38-&gt;4-&gt;10-&gt;18-&gt;24-&gt;31-&gt;39-&gt;7-&gt;15-&gt;26-&gt;35-&gt;5-&gt;19-&gt;30-&gt;3-&gt;20-&gt;36-&gt;14-&gt;1-&gt;28-&gt;23-&gt;34-&gt;12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>那么最后一个12位置的人就幸免于难了</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 约瑟夫 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象模拟单链表数据结构</title>
      <link href="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>单链表是一种链式存取的数据结构，用一组地址任意的<a href="https://baike.baidu.com/item/存储单元/8727749" target="_blank" rel="noopener">存储单元</a>存放线性表中的<a href="https://baike.baidu.com/item/数据元素/715313" target="_blank" rel="noopener">数据元素</a>。链表中的数据是以结点来表示的，每个结点的构成：元素(<a href="https://baike.baidu.com/item/数据元素/715313" target="_blank" rel="noopener">数据元素</a>的映象) + <a href="https://baike.baidu.com/item/指针/2878304" target="_blank" rel="noopener">指针</a>(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。</p><a id="more"></a><h2 id="底层物理结构"><a href="#底层物理结构" class="headerlink" title="底层物理结构"></a>底层物理结构</h2><p>头结点不存放数据,仅仅存放下一个结点的地址</p><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567585466629.png" alt="1567585466629"></p><h2 id="转化为逻辑结构"><a href="#转化为逻辑结构" class="headerlink" title="转化为逻辑结构"></a>转化为逻辑结构</h2><p>因为便于理解,一般会把单链表物理结构,转化为以下的逻辑结构表示,这样就浅显易懂了</p><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567659344636.png" alt="1567659344636"></p><h2 id="创建结点实体类"><a href="#创建结点实体类" class="headerlink" title="创建结点实体类"></a>创建结点实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerNode</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> no;<span class="comment">//序号</span></span><br><span class="line"><span class="keyword">public</span> String username;</span><br><span class="line"><span class="keyword">public</span> PerNode next;<span class="comment">//下一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PerNode</span><span class="params">(<span class="keyword">int</span> no, String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"PerNode [no="</span> + no + <span class="string">", </span></span><br><span class="line"><span class="string">            username="</span> +  username + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建结点操作类方法"><a href="#创建结点操作类方法" class="headerlink" title="创建结点操作类方法"></a>创建结点操作类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinked</span></span>&#123;</span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line"><span class="keyword">private</span> PerNode perNode=<span class="keyword">new</span> PerNode(<span class="number">0</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">//单链表添加到next为空的结点,方法就是一直循环查找,找到为止</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(PerNode newNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//临时操作变量</span></span><br><span class="line">PerNode temp=perNode;</span><br><span class="line"><span class="comment">//从头开始遍历,找到最后一个</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.next==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入节点</span></span><br><span class="line">temp.next=newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//头结点没有下一个说明为空</span></span><br><span class="line"><span class="keyword">if</span> (perNode.next==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表满了"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//临时操作变量</span></span><br><span class="line">PerNode temp=perNode.next;</span><br><span class="line"><span class="comment">//循环输出,直到么有下一个了</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(temp);</span><br><span class="line">            <span class="comment">//结点下移</span></span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SingleLinked singleLinked=<span class="keyword">new</span> SingleLinked();</span><br><span class="line">singleLinked.add(<span class="keyword">new</span> PerNode(<span class="number">1</span>, <span class="string">"张三"</span>));</span><br><span class="line">singleLinked.add(<span class="keyword">new</span> PerNode(<span class="number">3</span>, <span class="string">"李四"</span>));</span><br><span class="line">singleLinked.add(<span class="keyword">new</span> PerNode(<span class="number">2</span>, <span class="string">"王五"</span>));</span><br><span class="line">singleLinked.add(<span class="keyword">new</span> PerNode(<span class="number">4</span>, <span class="string">"赵六"</span>));</span><br><span class="line">singleLinked.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制台结果"><a href="#控制台结果" class="headerlink" title="控制台结果"></a>控制台结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PerNode [no=<span class="number">1</span>, username=张三]</span><br><span class="line">PerNode [no=<span class="number">3</span>, username=李四]</span><br><span class="line">PerNode [no=<span class="number">2</span>, username=王五]</span><br><span class="line">PerNode [no=<span class="number">4</span>, username=赵六]</span><br></pre></td></tr></table></figure><p>此时的插入是没有根据编号排序的</p><p>因此需要改进添加方法</p><h2 id="顺序添加方法"><a href="#顺序添加方法" class="headerlink" title="顺序添加方法"></a>顺序添加方法</h2><p>把上述的add方法修改为addByOrder方法</p><ul><li><p>每次添加需要遍历,</p></li><li><p>只要找到一个结点的编号大于当前添加的结点编号,那么就添加到这个结点的前边</p></li><li><p>否则就在后边</p></li><li><p>如果编号相同那么就不添加</p></li></ul><p><img src="/2020/08/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1567663491882.png" alt="1567663491882"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(PerNode newNode)</span> </span>&#123;</span><br><span class="line"><span class="comment">//临时操作变量</span></span><br><span class="line">PerNode temp=perNode;</span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//从头开始遍历,找到最后一个</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//已经循环到底了,结束循环</span></span><br><span class="line"><span class="keyword">if</span> (temp.next==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//temp.next的编号比新加的编号大,那么找到了</span></span><br><span class="line"><span class="keyword">if</span> (newNode.no&lt;temp.next.no) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//temp.next的编号与新加的编号相同,那么不能添加</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (newNode.no==temp.next.no)&#123;</span><br><span class="line"> flag=<span class="keyword">true</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">System.out.printf(<span class="string">"编号%d已存在!\n"</span>,temp.next.no);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//加入节点</span></span><br><span class="line">newNode.next=temp.next;</span><br><span class="line">temp.next=newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SingleLinked singleLinked=<span class="keyword">new</span> SingleLinked();</span><br><span class="line">singleLinked.addByOrder(<span class="keyword">new</span> PerNode(<span class="number">1</span>, <span class="string">"张三"</span>));</span><br><span class="line">singleLinked.addByOrder(<span class="keyword">new</span> PerNode(<span class="number">3</span>, <span class="string">"李四"</span>));</span><br><span class="line">singleLinked.addByOrder(<span class="keyword">new</span> PerNode(<span class="number">2</span>, <span class="string">"王五"</span>));</span><br><span class="line">singleLinked.addByOrder(<span class="keyword">new</span> PerNode(<span class="number">4</span>, <span class="string">"赵六"</span>));</span><br><span class="line">singleLinked.addByOrder(<span class="keyword">new</span> PerNode(<span class="number">4</span>, <span class="string">"赵六"</span>));</span><br><span class="line">singleLinked.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出控制台"><a href="#输出控制台" class="headerlink" title="输出控制台"></a>输出控制台</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编号<span class="number">4</span>已存在!</span><br><span class="line">PerNode [no=<span class="number">1</span>, username=张三]</span><br><span class="line">PerNode [no=<span class="number">2</span>, username=王五]</span><br><span class="line">PerNode [no=<span class="number">3</span>, username=李四]</span><br><span class="line">PerNode [no=<span class="number">4</span>, username=赵六]</span><br></pre></td></tr></table></figure><p>可以看到已经按照顺序排列了,这个功能我觉的还是很实用的,但我不知道具体应用到哪.</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题链表反转</title>
      <link href="/2020/08/09/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/"/>
      <url>/2020/08/09/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>接<a href="http://coderzhx.cn/blog/49" target="_blank" rel="noopener" title="标题">面向对象模拟单链表数据结构</a>的文章代码</p><p>腾讯的面试题,单链表元素的反转</p><h2 id="链表反转思路"><a href="#链表反转思路" class="headerlink" title="链表反转思路"></a>链表反转思路</h2><ul><li>定义一个新的头结点head</li><li>遍历原来链表,把结点插到头结点和第一个结点之间<a id="more"></a></li></ul><p><img src="/2020/08/09/%E9%9D%A2%E8%AF%95%E9%A2%98%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/1567842349774.png" alt="1567842349774"></p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">PerNode temp=perNode.next;</span><br><span class="line"><span class="comment">//新链表的头结点不变</span></span><br><span class="line">PerNode newtemp=<span class="keyword">new</span> PerNode(<span class="number">0</span>,<span class="string">""</span>);</span><br><span class="line">PerNode newtemp2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (temp==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//暂时保存链表头结点的下一个的下一个,</span></span><br><span class="line"><span class="comment">//仅仅因为temp=temp.next的下移操作要用到,</span></span><br><span class="line">            <span class="comment">//temp.next要后续操作会改变,所以要保存</span></span><br><span class="line">newtemp2=temp.next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每加一个进来放到前边.核心操作</span></span><br><span class="line">            <span class="comment">//如图所示的1和2操作</span></span><br><span class="line">temp.next=newtemp.next;<span class="comment">//1</span></span><br><span class="line">newtemp.next=temp;<span class="comment">//2</span></span><br><span class="line"><span class="comment">//下移</span></span><br><span class="line">temp=newtemp2;</span><br><span class="line">&#125;</span><br><span class="line">perNode.next=newtemp.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2020/08/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>冒泡排序是较为简单的排序算法</p><p>比如对int[] arr={-5，-2，9，7，4}从小到大排序，n个元素就变换n-1轮 ，每一轮从最大的n-1次逐渐降低，两个for循环时间复杂度是O(n<sup>2</sup>)</p><a id="more"></a><p><strong>通俗一点就是每一轮变换都将最大的放到最后</strong></p><p>绿色表示不用交换，黄色表示要交换</p><p><img src="/2020/08/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/1568288903351.png" alt="1568288903351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubble(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line"><span class="comment">//左边&gt;右边,右边放大的</span></span><br><span class="line"><span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化冒泡排序"><a href="#优化冒泡排序" class="headerlink" title="优化冒泡排序"></a>优化冒泡排序</h2><p><strong>每一轮变换中都没有交换过，那就说明这个数组已经是有序的了，比如上图的第三轮和第四轮都没有交换，那么就不会进行第四轮变换</strong></p><p>每一轮变换中的每一步都没进行变换，那么flag就一直是false，说明已经有序</p><p><img src="/2020/08/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/1568289998036.png" alt="1568289998036"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubble2(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line"><span class="comment">//左边&gt;右边,右边放大的</span></span><br><span class="line"><span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> temp=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骑士周游(马踏棋盘)问题</title>
      <link href="/2020/08/09/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>众所周知，🐎走法是按日字形状，马踏棋盘问题就是要求🐎能走遍所有的棋盘点</p><p>利用了回溯和穷举的思想，性能不是最好的！</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>类似于一传十，十传百，百传千的意思，直到找出覆盖了6x6=36的一种走法才算结束用一个boolean类型标志位记录</li><li>二维数组表示棋盘，ArrayList保存一个点能跳的其他点的数量，boolean[] 一维数组表示36个点是否已访问</li></ul><p><img src="/2020/08/09/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/1570001215658.png" alt="1570001215658"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 棋盘</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChessBoard</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">// 棋盘宽高,按理说是正方形</span></span><br><span class="line"><span class="keyword">int</span>[][] arr;<span class="comment">// 棋盘</span></span><br><span class="line"><span class="keyword">boolean</span>[] isVisited;<span class="comment">// 记录棋盘某地是否被访问大小size平方</span></span><br><span class="line"><span class="keyword">boolean</span> finished;<span class="comment">// 记录棋盘是否全部被访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChessBoard</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.size=size;</span><br><span class="line">isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[size * size];</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[size][size];</span><br><span class="line">finished = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr:棋盘 x:行 y:列 size:宽高 step:访问顺序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">horse</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">arr[x][y] = step;<span class="comment">// 保存步数</span></span><br><span class="line">isVisited[x * size + y] = <span class="keyword">true</span>;<span class="comment">// 表示已经访问过</span></span><br><span class="line"><span class="comment">// 表示该棋子能走的点的个数</span></span><br><span class="line">ArrayList&lt;Point&gt; list = next(<span class="keyword">new</span> Point(x, y));</span><br><span class="line"><span class="comment">// 只要可以走就遍历</span></span><br><span class="line"><span class="keyword">while</span> (!list.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 拿出可以走的位置,拿光为止</span></span><br><span class="line">Point point = list.remove(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 没访问过</span></span><br><span class="line"><span class="keyword">if</span> (!isVisited[point.x * size + point.y]) &#123;</span><br><span class="line">horse(arr, point.x, point.y, step + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环结束意味着,所有路径访问完毕</span></span><br><span class="line"><span class="keyword">if</span> (step &lt; isVisited.length &amp;&amp; !finished) &#123;</span><br><span class="line"><span class="comment">// 表示走不通,恢复初始,即回溯</span></span><br><span class="line">finished = <span class="keyword">false</span>;</span><br><span class="line">arr[x][y] = <span class="number">0</span>;</span><br><span class="line">isVisited[x * size + y] = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">finished = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个点的下一个位置最多有8中情况</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  ArrayList&lt;Point&gt; <span class="title">next</span><span class="params">(Point point)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Point&gt; ps = <span class="keyword">new</span> ArrayList&lt;Point&gt;();</span><br><span class="line">Point p1 = <span class="keyword">new</span> Point();</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = point.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = point.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x + <span class="number">1</span>) &lt; size &amp;&amp; (p1.y = point.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x + <span class="number">2</span>) &lt; size &amp;&amp; (p1.y = point.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x + <span class="number">2</span>) &lt; size &amp;&amp; (p1.y = point.y + <span class="number">1</span>) &lt; size) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x + <span class="number">1</span>) &lt; size &amp;&amp; (p1.y = point.y + <span class="number">2</span>) &lt; size) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = point.y + <span class="number">2</span>) &lt; size) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((p1.x = point.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = point.y + <span class="number">1</span>) &lt; size) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> Point(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ps;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ChessBoard chessBoard = <span class="keyword">new</span> ChessBoard(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">chessBoard.horse(chessBoard.arr, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"共耗时: "</span> + (end - start) + <span class="string">" 毫秒"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] rows : chessBoard.arr) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> step: rows) &#123;</span><br><span class="line">System.out.print(step + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">共耗时: <span class="number">15</span> 毫秒</span><br><span class="line"><span class="number">8</span><span class="number">23</span><span class="number">2</span><span class="number">21</span><span class="number">32</span><span class="number">25</span></span><br><span class="line"><span class="number">3</span><span class="number">14</span><span class="number">9</span><span class="number">24</span><span class="number">1</span><span class="number">20</span></span><br><span class="line"><span class="number">10</span><span class="number">7</span><span class="number">22</span><span class="number">31</span><span class="number">26</span><span class="number">33</span></span><br><span class="line"><span class="number">15</span><span class="number">4</span><span class="number">13</span><span class="number">28</span><span class="number">19</span><span class="number">30</span></span><br><span class="line"><span class="number">36</span><span class="number">11</span><span class="number">6</span><span class="number">17</span><span class="number">34</span><span class="number">27</span></span><br><span class="line"><span class="number">5</span><span class="number">16</span><span class="number">35</span><span class="number">12</span><span class="number">29</span><span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>其实这里只走了35步,因为1到2的位置算走一步,那么到36就是35步,还差一步,最后数字1 的位置是空出来的那么,就是错误的,是因为策略的问题,就是一个棋子走下一步的可能性的选择顺序问题</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><img src="/2020/08/09/%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/1570007316424.png" alt="1570007316424"></p><h3 id="非递减排序"><a href="#非递减排序" class="headerlink" title="非递减排序"></a>非递减排序</h3><p>7 7 3 3 1 0 ,意思就是有重复元素,而且是递减的</p><p>对每一次的集合都进行所以此时集合图中标记的顺序,因为他们的下一步可能性个数是 7 7 3 3 ,从1开始找,循环往复,速度大大提升</p><h2 id="添加比较方法"><a href="#添加比较方法" class="headerlink" title="添加比较方法"></a>添加比较方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList&lt;Point&gt; ps)</span> </span>&#123;</span><br><span class="line">ps.sort(<span class="keyword">new</span> Comparator&lt;Point&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point o1, Point o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取到o1的下一步的所有位置个数</span></span><br><span class="line"><span class="keyword">int</span> count1 = next(o1).size();</span><br><span class="line"><span class="comment">//获取到o2的下一步的所有位置个数</span></span><br><span class="line"><span class="keyword">int</span> count2 = next(o2).size();</span><br><span class="line"><span class="keyword">if</span>(count1 &lt; count2) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (count1 == count2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改horse方法"><a href="#修改horse方法" class="headerlink" title="修改horse方法"></a>修改horse方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList&lt;Point&gt; ps)</span> </span>&#123;</span><br><span class="line">ps.sort(<span class="keyword">new</span> Comparator&lt;Point&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Point o1, Point o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取到o1的下一步的所有位置个数</span></span><br><span class="line"><span class="keyword">int</span> count1 = next(o1).size();</span><br><span class="line"><span class="comment">//获取到o2的下一步的所有位置个数</span></span><br><span class="line"><span class="keyword">int</span> count2 = next(o2).size();</span><br><span class="line"><span class="keyword">if</span>(count1 &lt; count2) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (count1 == count2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 穷举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种java项目导入的乱码解决</title>
      <link href="/2020/08/09/%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/08/09/%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>最基本的属性改编码不说了</p><a id="more"></a><p><img src="/2020/08/09/%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/1561182896978.png" alt="1561182896978"></p><h2 id="tomcat启动依旧是404"><a href="#tomcat启动依旧是404" class="headerlink" title="tomcat启动依旧是404"></a>tomcat启动依旧是404</h2><p><img src="/2020/08/09/%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/1561190631852.png" alt="1561190631852"></p><p><img src="/2020/08/09/%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/1561196695545.png" alt="1561196695545"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两个值交换</title>
      <link href="/2020/08/09/%E4%B8%A4%E4%B8%AA%E5%80%BC%E4%BA%A4%E6%8D%A2/"/>
      <url>/2020/08/09/%E4%B8%A4%E4%B8%AA%E5%80%BC%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>你或许会写 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=x;</span><br><span class="line">x=y;</span><br><span class="line">y=a;</span><br></pre></td></tr></table></figure><p> 我最近发现<strong>异或</strong>可以更加的简便</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">3</span>;</span><br><span class="line">System.out.println(x+<span class="string">"===="</span>+y);</span><br><span class="line">x=x^y;<span class="comment">//1</span></span><br><span class="line">y=x^y;<span class="comment">//2</span></span><br><span class="line">x=x^y;<span class="comment">//3</span></span><br><span class="line">System.out.println(x+<span class="string">"===="</span>+y);</span><br></pre></td></tr></table></figure><p>可以看出这完全就像是在乱写</p><table><thead><tr><th>x</th><th>y</th><th>x⊕y</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>异或两个相同则为0,不同则 n⊕0=n</p><h2 id="过程如下"><a href="#过程如下" class="headerlink" title="过程如下"></a>过程如下</h2><ul><li>x=x^y</li><li>y=x^y=x^y^y=x^0=x</li><li>此时y=x,x=x^y,换掉右边等式</li><li>x=x^y变成x=x^y^x=x^x^y=y;</li></ul><p>其实中间变量算是x^y吧!</p><p>那么很多排序就可以简化,不需要声明一个中间变量了</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo和github搭建个人博客</title>
      <link href="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍如何利用Hexo博客框架创建GitHub-Pages站点-搭建个人博客"><a href="#介绍如何利用Hexo博客框架创建GitHub-Pages站点-搭建个人博客" class="headerlink" title="介绍如何利用Hexo博客框架创建GitHub Pages站点,搭建个人博客!"></a>介绍如何利用Hexo博客框架创建GitHub Pages站点,搭建个人博客!</h2><a id="more"></a><h3 id="第一步-环境配置"><a href="#第一步-环境配置" class="headerlink" title="第一步:环境配置"></a>第一步:环境配置</h3><p>你得有 <a href="https://nodejs.org/en/" target="_blank" rel="noopener"><strong>node.js</strong></a>和  <strong><a href="https://pc.qq.com/detail/13/detail_22693.html" target="_blank" rel="noopener">git</a></strong>  我这里提供了最快的下载途径</p><p>cmd 中输入 检查是否安装成功     <code>git --version</code>        <code>npm -v</code>      <code>node -v</code></p><h3 id="开始安装Hexo框架-分别执行两条命令-用管理员身份运行cmd"><a href="#开始安装Hexo框架-分别执行两条命令-用管理员身份运行cmd" class="headerlink" title="开始安装Hexo框架,分别执行两条命令,用管理员身份运行cmd"></a>开始安装Hexo框架,分别执行两条命令,<strong>用管理员身份运行cmd</strong></h3><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><code>cnpm install -g hexo-cli</code></p><p><code>hexo -v</code>         验证是否安装成功</p><h2 id="第二步-本地创建项目"><a href="#第二步-本地创建项目" class="headerlink" title="第二步:本地创建项目"></a>第二步:本地创建项目</h2><p>自建一个文件夹 然后进入文件下 比如 <strong>D:/blog</strong>  ,把Hexo安装进该文件夹里</p><p><img src="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1555749740644.png" alt="1555749740644"></p><p><code>hexo s</code>   启动Hexo   <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>就可以访问了! 现在只是在本地而已!</p><p><img src="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1555749928472.png" alt="1555749928472"></p><p>新建文章    ,编辑的话可以用  <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>   这个软件</p><p><code>hexo n &quot;新建文章&quot;</code></p><p>刷新页面就可以看到了</p><p>需要先清理一下sources文件夹<code>hexo clean</code><br>再生成  <code>hexo g</code><br>重启 <code>hexo s</code> </p><h2 id="第三步-部署到github"><a href="#第三步-部署到github" class="headerlink" title="第三步:部署到github"></a>第三步:部署到github</h2><p>新建仓库  (注册账号什么的自己解决,登录后右上角➕移上去,new  repository )</p><p><img src="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1555750764706.png" alt="1555750764706"></p><p>用户名.github.io 必须是这个格式  ,就会自动创建站点 ,完成即可</p><p><img src="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1555750828571.png" alt="1555750828571"></p><p>安装一个插件  <code>npm install hexo-deployer-git</code></p><p>修改 -config.yml   文件 </p><p>最后的deploy下</p><p><code>type: git</code><br><code>repo: 你的仓库项目路径</code><br><code>branch: master</code></p><p><img src="/2020/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1555751180032.png" alt="1555751180032"></p><p><code>hexo d</code>   推送到github 完成</p><h3 id="访问-用户名-github-io-即可"><a href="#访问-用户名-github-io-即可" class="headerlink" title="访问 用户名.github.io   即可!"></a>访问 用户名.github.io   即可!</h3>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序是对冒泡排序的优化版</p><p><strong>首尾下标相加/2得到基值下标，确定参照值，小的放左边大的放右边</strong>，</p><ul><li><p>1.首部下标往右，找到&gt;=参照值时停下，尾部下标往左，找到&lt;=参照值时停下</p></li><li><p>2.此时交换值，以此类推，结束后，左边全部小于参照值，右边全部大于参照值</p></li><li><p>左右两部分递归，开始循环12操作</p></li></ul><a id="more"></a><p><img src="/2020/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1568555291132.png" alt="1568555291132"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quick(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line"><span class="keyword">int</span> l = left;</span><br><span class="line"><span class="keyword">int</span> r = right;</span><br><span class="line"><span class="keyword">int</span> center = arr[(right + left) / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="comment">// 左边找比参考值大的,找不到继续++</span></span><br><span class="line"><span class="keyword">while</span> (arr[l] &lt; center) &#123;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右边找比参考值小的,找不到继续--</span></span><br><span class="line"><span class="keyword">while</span> (arr[r] &gt; center) &#123;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交换值</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[r];</span><br><span class="line">arr[r] = arr[l];</span><br><span class="line">arr[l] = temp;</span><br><span class="line"><span class="comment">//遇到两个值相等岂不是一直在交换,那就是死循环</span></span><br><span class="line"><span class="keyword">if</span> (arr[l]==center) &#123;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[r]==center) &#123;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//防止栈溢出</span></span><br><span class="line"><span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">l++;</span><br><span class="line">r--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左半部分递归</span></span><br><span class="line"><span class="keyword">if</span> (left&lt;r) &#123;</span><br><span class="line">quick(arr,left,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有半部分递归</span></span><br><span class="line"><span class="keyword">if</span> (right&gt;l) &#123;</span><br><span class="line">quick(arr,l,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态方法需要加载配置文件</title>
      <link href="/2020/08/09/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/09/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>我这里需要再properties中方便配置lucene路径</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">lucene.path</span>=<span class="string">C://Users//hasee//Desktop//lucene</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>注意点，需要改成静态的属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"lucene"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LucenePath</span> </span>&#123;</span><br><span class="line">        <span class="comment">// lucene的索引路径 写到配置文件里面</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String path;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">            LucenePath.path = path;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要用的话直接声明变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LucenePath path ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Mybatis中文乱码的一百种方法</title>
      <link href="/2020/08/09/%E8%A7%A3%E5%86%B3Mybatis%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%99%BE%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/09/%E8%A7%A3%E5%86%B3Mybatis%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%99%BE%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索功能中文关键字形成mysql语句时变成-的情况"><a href="#搜索功能中文关键字形成mysql语句时变成-的情况" class="headerlink" title="搜索功能中文关键字形成mysql语句时变成??的情况"></a>搜索功能中文关键字形成mysql语句时变成??的情况</h2><a id="more"></a><h2 id="当我在做搜索查询的语句时出现了-中文搜索关键字中文变成-的形式"><a href="#当我在做搜索查询的语句时出现了-中文搜索关键字中文变成-的形式" class="headerlink" title="当我在做搜索查询的语句时出现了,中文搜索关键字中文变成??的形式"></a>当我在做搜索查询的语句时出现了,中文搜索关键字中文变成??的形式</h2><h2 id="于是我在controller层-输出-发现-还是中文-变成查询语句时则变成了❓-于是上网百度"><a href="#于是我在controller层-输出-发现-还是中文-变成查询语句时则变成了❓-于是上网百度" class="headerlink" title="于是我在controller层,输出,发现,还是中文,变成查询语句时则变成了❓,于是上网百度,"></a>于是我在controller层,输出,发现,还是中文,变成查询语句时则变成了❓,于是上网百度,</h2><h3 id="1-开发环境编码格式-右键-属性-UTF-8没问题"><a href="#1-开发环境编码格式-右键-属性-UTF-8没问题" class="headerlink" title="1.开发环境编码格式,右键 属性 ,UTF-8没问题 ,"></a>1.开发环境编码格式,右键 属性 ,UTF-8没问题 ,</h3><h3 id="2-查看xml配置文件url中-也没问题"><a href="#2-查看xml配置文件url中-也没问题" class="headerlink" title="2.查看xml配置文件url中,也没问题"></a>2.查看xml配置文件url中,也没问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mylibrary?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br></pre></td></tr></table></figure><h3 id="3-数据库属性-也没问题"><a href="#3-数据库属性-也没问题" class="headerlink" title="3.数据库属性,也没问题"></a>3.数据库属性,也没问题</h3><p><img src="/2020/08/09/%E8%A7%A3%E5%86%B3Mybatis%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%99%BE%E7%A7%8D%E6%96%B9%E6%B3%95/1557910895221.png" alt="1557910895221"></p><h3 id="4-tomcat的server-xml文件-是不是忘加URIEncoding-”UTF-8”-发现也不是"><a href="#4-tomcat的server-xml文件-是不是忘加URIEncoding-”UTF-8”-发现也不是" class="headerlink" title="4,tomcat的server.xml文件,是不是忘加URIEncoding=”UTF-8”,发现也不是"></a>4,tomcat的server.xml文件,是不是忘加URIEncoding=”UTF-8”,发现也不是</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector URIEncoding=<span class="string">"UTF-8"</span> connectionTimeout=<span class="string">"20000"</span> port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span> redirectPort=<span class="string">"8443"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="5-修改了mysql的配置文件my-ini-全改为了utf8可还是乱码"><a href="#5-修改了mysql的配置文件my-ini-全改为了utf8可还是乱码" class="headerlink" title="5.修改了mysql的配置文件my.ini,全改为了utf8可还是乱码??"></a>5.修改了mysql的配置文件my.ini,全改为了utf8可还是乱码??</h3><p><img src="/2020/08/09/%E8%A7%A3%E5%86%B3Mybatis%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%99%BE%E7%A7%8D%E6%96%B9%E6%B3%95/1557911336681.png" alt="1557911336681"></p><h3 id="6-最后竟然是坑爹的多了一个分号-在mybatis查询语句中"><a href="#6-最后竟然是坑爹的多了一个分号-在mybatis查询语句中" class="headerlink" title="6.最后竟然是坑爹的多了一个分号,在mybatis查询语句中"></a>6.最后竟然是坑爹的多了一个分号,在mybatis查询语句中</h3><p><img src="/2020/08/09/%E8%A7%A3%E5%86%B3Mybatis%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E4%B8%80%E7%99%BE%E7%A7%8D%E6%96%B9%E6%B3%95/1557911242418.png" alt="1557911242418"></p><h3 id="由于查询语句还没结束我就打了分号-导致乱码-删掉就解决了"><a href="#由于查询语句还没结束我就打了分号-导致乱码-删掉就解决了" class="headerlink" title="由于查询语句还没结束我就打了分号,导致乱码,删掉就解决了!"></a>由于查询语句还没结束我就打了分号,导致乱码,删掉就解决了!</h3>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2020/08/09/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>基数排序的发明可以追溯到1887年赫尔曼·何乐礼在打孔卡片制表机(Tabulation Machine)上的贡献。它是这样实现的：将所有待比较数值（<strong>正整数</strong>）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位(个位)开始，依次进行一次排序(百位,千位以此类推)。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。基数排序法是属于稳定性的排序</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>类似于10个桶,每个桶要排序的有几个元素就有几层因为考虑到极端情况所有数字全在一个桶里</strong>用一个二维数组表示  int[][] bucket =new int[10] [arr.length]       </p><p>每一次放入10个桶中,再取出来,循环,就可以得到最后有序序列                         </p><p><img src="/2020/08/09/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/1568770090390.png" alt="1568770090390"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="comment">// 存放数字</span></span><br><span class="line"><span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="comment">// 存放每列的个数</span></span><br><span class="line"><span class="keyword">int</span>[] bucketsize = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大是几位,把最大的给max</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxbit = (max + <span class="string">""</span>).length();</span><br><span class="line"><span class="comment">// 个十百千 变化,i仅仅是让n*10而已</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, n = <span class="number">1</span>; x &lt; maxbit; x++, n *= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="comment">// 放的过程,遍历数组,插入到对应的二维数组中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> bit = arr[j] / n % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//bucketsize[bit]刚开始默认0,插入完后+1</span></span><br><span class="line">bucket[bit][bucketsize[bit]++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拿出的过程</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">//每个桶遍历,覆盖原数组</span></span><br><span class="line"><span class="keyword">if</span> (bucketsize[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketsize[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次拿出以后,该桶中元素个数要重置,</span></span><br><span class="line">bucketsize[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霍夫曼树</title>
      <link href="/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>霍夫曼树是二叉树的一种特殊形式，又称为最优二叉树，其主要作用在于数据压缩和编码长度的优化。叫做最优二叉树的原因是:霍夫曼树的带权路径长度是最小的</p><a id="more"></a><h2 id="数组转化为霍夫曼树"><a href="#数组转化为霍夫曼树" class="headerlink" title="数组转化为霍夫曼树"></a>数组转化为霍夫曼树</h2><p>霍夫曼树的带权路径是最小:叶子结点的权值:所有叶子结点*高度相加</p><p>WPL=2×6+2×7+2×8+2×10+2×7+3×5+3×5+4×2+4×3=不算了</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/1569225015002.png" alt="1569225015002"></p><h3 id="创建带权结点"><a href="#创建带权结点" class="headerlink" title="创建带权结点"></a>创建带权结点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义树节点</span></span><br><span class="line"><span class="comment">//继承Comparable为了比较</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;<span class="comment">//权值</span></span><br><span class="line"><span class="keyword">public</span> Node left;<span class="comment">//左节点</span></span><br><span class="line"><span class="keyword">public</span> Node right;<span class="comment">//右节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value -o.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Node [value="</span> + value + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成霍夫曼数"><a href="#生成霍夫曼数" class="headerlink" title="生成霍夫曼数"></a>生成霍夫曼数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createTree</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"> ArrayList&lt;Node&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"> arrayList.add(<span class="keyword">new</span> Node(arr[j]));</span><br><span class="line"> &#125;</span><br><span class="line"> Collections.sort(arrayList);</span><br><span class="line"> <span class="keyword">while</span>(arrayList.size()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"> <span class="comment">//拿出最小的两个</span></span><br><span class="line"> Node node = arrayList.get(<span class="number">0</span>);</span><br><span class="line"> Node node2 = arrayList.get(<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//组成一个二叉树</span></span><br><span class="line"> Node pNode=<span class="keyword">new</span> Node(node.value+node2.value);</span><br><span class="line">            <span class="comment">//设置左右结点</span></span><br><span class="line"> pNode.left=node;</span><br><span class="line"> pNode.right=node2;</span><br><span class="line"> arrayList.remove(node);</span><br><span class="line"> arrayList.remove(node2);</span><br><span class="line"> arrayList.add(pNode);</span><br><span class="line"> <span class="comment">//重新排序,直到只有一个节点</span></span><br><span class="line"> Collections.sort(arrayList);</span><br><span class="line"> System.out.println(arrayList);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span> &#125;;</span><br><span class="line"> createTree (arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[Node [value=5], Node [value=5], Node [value=6], Node [value=7], Node [value=8]]<br>[Node [value=6], Node [value=7], Node [value=8], Node [value=10]]<br>[Node [value=8], Node [value=10], Node [value=13]]<br>[Node [value=13], Node [value=18]]<br>[Node [value=31]]</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霍夫曼编码(压缩解压功能)</title>
      <link href="/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
      <url>/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>霍夫曼编码是基于霍夫曼树的常用于压缩和编码长度的优化,上一篇文章中介绍了霍夫曼树,本文就是来通过实现字符串的压缩来解释霍夫曼编码</p><a id="more"></a><p>一段字符串  i really really love java 转化为字节数组  </p><p>i出现1次  空格出现4次  r出现2次  以此类推 可以得到</p><p> <strong>i=1 ,o=1, j=1 ,r=2 , y=2 ,v=2 , e=3 ,空格=4  ,a=4 , l=5</strong>通过HashMap保存<strong>拿出对应字母出现的次数作为权值排序后再组成霍夫曼树</strong>上篇已经介绍如何生成霍夫曼树,</p><p><img src="/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1569302739387.png" alt="1569302739387"></p><h2 id="1-定义霍夫曼结点"><a href="#1-定义霍夫曼结点" class="headerlink" title="1.定义霍夫曼结点"></a>1.定义霍夫曼结点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuffmanNode</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">HuffmanNode</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">public</span> Byte b;<span class="comment">//字节对应的ASCII码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;<span class="comment">//出现的次数,权值</span></span><br><span class="line"><span class="keyword">public</span> Node left;<span class="comment">//左节点</span></span><br><span class="line"><span class="keyword">public</span> Node right;<span class="comment">//右节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HuffmanNode</span><span class="params">(Byte b,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(HuffmanNode o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value -o.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"[b="</span> + b + <span class="string">", value="</span> + value + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-生成霍夫曼树"><a href="#2-生成霍夫曼树" class="headerlink" title="2.生成霍夫曼树"></a>2.生成霍夫曼树</h2><p>具体代码详解看上一篇霍夫曼树的文章</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成霍夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HuffmanNode <span class="title">createTree</span><span class="params">( <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"><span class="comment">//键:字符对应ASCII码,值:出现次数</span></span><br><span class="line"> HashMap&lt;Byte, Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Byte, Integer&gt;();</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line"> Integer i= map.get(b);<span class="comment">//获取出现次数</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="keyword">null</span>) &#123;</span><br><span class="line">map.put(b, <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map.put(b, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//添加到ArrayList,为了创建霍夫曼树</span></span><br><span class="line"> ArrayList&lt;HuffmanNode&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="keyword">for</span> (Entry&lt;Byte, Integer&gt; entry:map.entrySet()) &#123;</span><br><span class="line"> arrayList.add(<span class="keyword">new</span> HuffmanNode(entry.getKey(),entry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line"> Collections.sort(arrayList);</span><br><span class="line"> System.out.println(arrayList);</span><br><span class="line"> <span class="keyword">while</span>(arrayList.size()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"> <span class="comment">//拿出最小的两个</span></span><br><span class="line"> HuffmanNode node = arrayList.get(<span class="number">0</span>);</span><br><span class="line"> HuffmanNode node2 = arrayList.get(<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//组成一个二叉树</span></span><br><span class="line"> HuffmanNode pNode=<span class="keyword">new</span> HuffmanNode(<span class="keyword">null</span>,node.value+node2.value);</span><br><span class="line">            pNode.left=node;</span><br><span class="line">pNode.right=node2;</span><br><span class="line"> arrayList.remove(node);</span><br><span class="line"> arrayList.remove(node2);</span><br><span class="line"> arrayList.add(pNode);</span><br><span class="line"> <span class="comment">//重新排序,直到只有一个节点</span></span><br><span class="line"> Collections.sort(arrayList);</span><br><span class="line"> System.out.println(arrayList);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> arrayList.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-生成霍夫曼编码"><a href="#3-生成霍夫曼编码" class="headerlink" title="3.生成霍夫曼编码"></a>3.生成霍夫曼编码</h2><p><strong>根节点出发左边0 右边1</strong></p><p><strong>l=00  r=010  i=0110  o=01110  j=01111  e=100 v=1010  y=1011  a=110   空格=111</strong></p><p><strong>霍夫曼编码:108=00 , 114=010  ,105=0110 , 111=01110 , 106=01111  , 101=100  ,118=1010 , 121=1011 , 97=110 ,  32=111</strong> </p><p>i really really love java因此就转化为<strong>二进制的字符串</strong>了,压缩率在20%-90%,而且是<strong>无二义性</strong>的!</p><p>0100101100101111000001111101100101111000001111101001000111001110101011101110110</p><p>树的形状可能有多种,因此霍夫曼编码也可能不同,但是最顶节点是25不会变而且生成的二进制长度也是不变的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产生二进制字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">binaryCode</span><span class="params">(<span class="keyword">byte</span>[] bytes  )</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="comment">//huffmanCode就是哈夫曼编码</span></span><br><span class="line">stringBuilder.append(huffmanCode.get(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(stringBuilder.toString());</span></span><br><span class="line"><span class="keyword">return</span> stringBuilder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-压缩-字节数组保存"><a href="#4-压缩-字节数组保存" class="headerlink" title="4.压缩(字节数组保存)"></a>4.压缩(字节数组保存)</h2><p>0100101100101111000001111101100101111000001111101001000111001110101011101110110按照每8位生成对应的字节数组 ,设计到计算机组成原理的补码,反码,原码,这里有79个 转化为字节数组应该有10个元素</p><p>75 47 7 -39 120 62 -111 -50 -82 118 此时就压缩成功了</p><p>由于计算机存储数据时，都是以补码的形式进行存储。我们通常看到的数却是计算机存储的补码先转换成反码，后转换成原码，再转换成十进制呈现的。</p><ul><li>第一个8位01001011(补码)首位是0那么直接计算二进制得到75 </li><li>第四个8位11011001首位是1 是符号位就是负数 那么去掉首位 取反+1 得到10100111  是-39   </li><li>最后只有7位 1110110 前面补0   那么就是01110110 得到118</li></ul><p>原先字符串长度为25,现在是10  压缩率   15除以25等于60%的压缩率,字符串越长压缩效率越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压缩</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[]   zip(StringBuilder stringBuilder  ) &#123;</span><br><span class="line"><span class="comment">//8位就是1长度，9位就算2长度了</span></span><br><span class="line"><span class="keyword">int</span> len=(stringBuilder.length()+<span class="number">7</span>)/<span class="number">8</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes  =<span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuilder.length(); i+=<span class="number">8</span>) &#123;</span><br><span class="line"><span class="comment">//最后少于8个的值全部取出</span></span><br><span class="line">String string;</span><br><span class="line"><span class="keyword">if</span> ( i+<span class="number">8</span>&gt;stringBuilder.length()) &#123;</span><br><span class="line">string=stringBuilder.substring(i);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">string=stringBuilder.substring(i, i+<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">bytes[index++]=(<span class="keyword">byte</span>)Integer.parseInt(string,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解压-逆向过程"><a href="#解压-逆向过程" class="headerlink" title="解压(逆向过程)"></a>解压(逆向过程)</h2><p>把字节数组-&gt;二进制字符串-&gt;根据霍夫曼编码得到原字符串</p><h3 id="字节转为二进制"><a href="#字节转为二进制" class="headerlink" title="字节转为二进制"></a>字节转为二进制</h3><ul><li>因为没有byte转二进制的方法,但是存在int转二进制的方法,所有把byte转成int,这就是temp  </li><li>temp如果是负数 那么string其实有4个字节也就是32位,取末尾8位，temp如果是正数,那么string比如27转为二进制就是11011是5位则需要补全到8位,这就要由flag判断true则是正数，false则是负数</li><li>字节数组的最后一个，不需要补全，如果不全那么和原来的二进制字符串就不是同一个了，所以直接返回二进制即可</li><li>由此产生如下的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这有点难理解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String  <span class="title">byteToBitString</span><span class="params">(<span class="keyword">boolean</span> flag,<span class="keyword">byte</span> b  )</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line"><span class="keyword">int</span> temp=b;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">temp|=<span class="number">256</span>;<span class="comment">//与运算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的是temp对应的二进制补码</span></span><br><span class="line">String string=Integer.toBinaryString(temp);</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">return</span> string.substring(strin.length()-<span class="number">8</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转后的霍夫曼编码"><a href="#反转后的霍夫曼编码" class="headerlink" title="反转后的霍夫曼编码"></a>反转后的霍夫曼编码</h4><p>32=101 97=110 114=1001 101=011 118=1110 105=0100 121=1111 106=0101 108=00 111=1000</p><h4 id="二进制字符串"><a href="#二进制字符串" class="headerlink" title="二进制字符串"></a>二进制字符串</h4><p>0100101100101111000001111101100101111000001111101001000111001110101011101110110</p><p><img src="/2020/08/09/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1569397704252.png" alt="1569397704252"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(解压)二进制字符串转化为原字符串</span></span><br><span class="line"><span class="comment">//传入霍夫曼编码，传入字节数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] bitToStr(HashMap&lt;Byte, String&gt; huffmanCode ,<span class="keyword">byte</span>[] b ) &#123;</span><br><span class="line"><span class="comment">//用于存储二进制字符串</span></span><br><span class="line">StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line"><span class="keyword">byte</span> c = b[i];</span><br><span class="line"><span class="comment">//最后一个元素，不补全</span></span><br><span class="line"><span class="keyword">boolean</span> flag=(i==b.length-<span class="number">1</span>);</span><br><span class="line">stringBuilder.append(byteToBitString( !flag, c  ) );</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(stringBuilder);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转霍夫曼编码表,因为不存在根据值找键的方法,只能根据键找值</span></span><br><span class="line">HashMap&lt; String,Byte&gt; map =<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;Byte, String&gt; entry : huffmanCode.entrySet()) &#123;</span><br><span class="line">map.put(entry.getValue(),entry.getKey());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存储字节</span></span><br><span class="line">ArrayList&lt;Byte&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//int count=0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用的到的二进制字符串还原</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringBuilder.length(); ) &#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">String string;</span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">Byte c = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"><span class="keyword">if</span> (i+count&gt;stringBuilder.length()) &#123;</span><br><span class="line">string=stringBuilder.substring(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//count一直递增,直到在编码表中找到对应的key</span></span><br><span class="line">string=stringBuilder.substring(i,i+count);</span><br><span class="line">c =map.get(string);</span><br><span class="line"><span class="keyword">if</span> (c!= <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//表示根据霍夫曼编码找了对应字节了,退出循环</span></span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(c);</span><br><span class="line">i+=count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[list.size()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">bytes[i]=list.get(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//二进制字符串</span></span><br><span class="line"><span class="keyword">static</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//霍夫曼编码表</span></span><br><span class="line"><span class="keyword">static</span> HashMap&lt;Byte, String&gt; huffmanCode = <span class="keyword">new</span> HashMap&lt;Byte, String&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String string = <span class="string">"i really really love java"</span>;</span><br><span class="line">System.out.println(string.length());</span><br><span class="line"><span class="comment">// 转为字节数组保存对应的ASCII码</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = string.getBytes();</span><br><span class="line"><span class="comment">// 根据出现次数来创建树</span></span><br><span class="line">HuffmanNode createTree = createTree(bytes);</span><br><span class="line"><span class="comment">//创建霍夫曼编码表</span></span><br><span class="line">createHuffman( createTree.left, <span class="string">"0"</span>, stringBuilder);</span><br><span class="line">createHuffman( createTree.right, <span class="string">"1"</span>, stringBuilder);</span><br><span class="line">    System.out.println(huffmanCode);</span><br><span class="line">    StringBuilder binaryCode = binaryCode(bytes);</span><br><span class="line">    <span class="comment">//二进制按8位转为字符数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] zip = zip(binaryCode);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : zip) &#123;</span><br><span class="line">    System.out.print(b+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//解压</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes2=bitToStr(huffmanCode ,zip);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//压缩图片</span></span><br><span class="line"><span class="comment">//src要压缩文件的路径，outSrc压缩包路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipPic</span><span class="params">(String src,String outSrc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">FileInputStream fStream;</span><br><span class="line">FileOutputStream oStream;</span><br><span class="line">ObjectOutputStream oos;</span><br><span class="line"></span><br><span class="line">fStream=<span class="keyword">new</span> FileInputStream(src);</span><br><span class="line"><span class="comment">//创建和源文件大小一样的</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fStream.available()];</span><br><span class="line">fStream.read(bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始压缩</span></span><br><span class="line">HuffmanNode createTree = createTree(bytes);</span><br><span class="line">createHuffman( createTree.left, <span class="string">"0"</span>, stringBuilder);</span><br><span class="line">createHuffman( createTree.right, <span class="string">"1"</span>, stringBuilder);</span><br><span class="line"></span><br><span class="line">StringBuilder binaryCode = binaryCode(bytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] zip = zip(binaryCode);</span><br><span class="line"><span class="comment">//输出到outSrc文件夹下</span></span><br><span class="line">oStream=<span class="keyword">new</span> FileOutputStream(outSrc); </span><br><span class="line">        <span class="comment">//转化为对象流</span></span><br><span class="line">oos=<span class="keyword">new</span> ObjectOutputStream(oStream);</span><br><span class="line"><span class="comment">//写入压缩字节数组</span></span><br><span class="line">oos.writeObject(zip);</span><br><span class="line"><span class="comment">//写入霍夫曼编码</span></span><br><span class="line">oos.writeObject(huffmanCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">oos.close();</span><br><span class="line">oStream.close();</span><br><span class="line">fStream.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zipPic(<span class="string">"C:\\Users\\hasee\\AppData\\Roaming\\Typora\\typora-user-images\/1569397704252.png"</span>,<span class="string">"C:\\Users\\hasee\\Desktop\\22.zip"</span>);</span><br></pre></td></tr></table></figure><p>此时就会在对应的路径产生文件了</p><h2 id="解压图片"><a href="#解压图片" class="headerlink" title="解压图片"></a>解压图片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unzipPic</span><span class="params">(String src,String outSrc)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">   </span><br><span class="line">InputStream fStream;</span><br><span class="line">OutputStream oStream;</span><br><span class="line">ObjectInputStream ois;</span><br><span class="line"></span><br><span class="line">fStream=<span class="keyword">new</span> FileInputStream(src);</span><br><span class="line"><span class="comment">//转化为对象流</span></span><br><span class="line">ois=<span class="keyword">new</span> ObjectInputStream(fStream);</span><br><span class="line"><span class="comment">//得到压缩后的字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] byte1 =(<span class="keyword">byte</span>[]) ois.readObject();</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">HashMap&lt;Byte, String&gt; huffmanCode1=(HashMap&lt;Byte, String &gt;) ois.readObject();</span><br><span class="line"><span class="comment">//创建和源文件大小一样的</span></span><br><span class="line"><span class="comment">//开始解压</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes2=bitToStr(huffmanCode1 ,byte1);</span><br><span class="line">oStream=<span class="keyword">new</span> FileOutputStream(outSrc);</span><br><span class="line">oStream.write(bytes2);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">ois.close();</span><br><span class="line">oStream.close();</span><br><span class="line">fStream.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 霍夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表(数组+链表实现)</title>
      <link href="/2020/08/09/%E5%93%88%E5%B8%8C%E8%A1%A8(%E6%95%B0%E7%BB%84+%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0)/"/>
      <url>/2020/08/09/%E5%93%88%E5%B8%8C%E8%A1%A8(%E6%95%B0%E7%BB%84+%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0)/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是哈希表"><a href="#什么是哈希表" class="headerlink" title="什么是哈希表"></a>什么是哈希表</h2><p><a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/数据结构/1450" target="_blank" rel="noopener">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。</p><a id="more"></a><h2 id="哈希表的应用"><a href="#哈希表的应用" class="headerlink" title="哈希表的应用"></a>哈希表的应用</h2><p>根据哈希表查询速度快的特点可以应用在缓存中,比如redis.众所周知,一个项目的短板一般都在数据库的读写中,就像电脑短板就在硬盘读写速度,有了固态硬盘后,电脑的整体速度就有了质的飞跃.</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数组+链表的形式,链表中的每个结点都包含Person类和下一个结点</p><p><img src="/2020/08/09/%E5%93%88%E5%B8%8C%E8%A1%A8(%E6%95%B0%E7%BB%84+%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0)/1568896984902.png" alt="1568896984902"></p><h2 id="定义链表结点"><a href="#定义链表结点" class="headerlink" title="定义链表结点"></a>定义链表结点</h2><p>id就相当于键,name相当于值,next仅仅是用于记录下一个结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义人实体类结点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">int</span>  id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Person next;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义链表类"><a href="#定义链表类" class="headerlink" title="定义链表类"></a>定义链表类</h2><p>包含添加,查看,查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> Person head;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line"><span class="comment">//为空就直接赋值头结点</span></span><br><span class="line"><span class="keyword">if</span> (head==<span class="keyword">null</span>) &#123;</span><br><span class="line">head=person;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//临时变量因为不能让head发生改变</span></span><br><span class="line">Person temp=head;</span><br><span class="line"><span class="comment">//在尾部加入新结点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line">temp.next=person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//临时变量因为不能让head发生改变</span></span><br><span class="line">Person temp=head;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.print(temp.toString()+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span>(temp.next==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Person temp=head;</span><br><span class="line"><span class="keyword">if</span> (temp==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">"没有id=%d的元素"</span>,id);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//线性查找,找到返回</span></span><br><span class="line"><span class="keyword">if</span> (id==temp.id) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历完了都没有,那就是找不到了,因为要返回temp所以让temp=null;</span></span><br><span class="line"><span class="keyword">if</span> (temp.next==<span class="keyword">null</span>) &#123;</span><br><span class="line">temp=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><p>数组中的每个元素都是一个链表,链表的添加,查看,查询方法都要由数组体现</p><p>每个链表person类中的id都是数组大小取模后对应的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> LinkedList[] arr;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashTable</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.size=size;</span><br><span class="line">arr=<span class="keyword">new</span> LinkedList[size];</span><br><span class="line"><span class="comment">//对象数组是需要实例化的,不像int数组会自动赋值0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i]=<span class="keyword">new</span> LinkedList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">arr[i].list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr[<span class="keyword">this</span>.hash(id)].findById(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line"><span class="comment">//把person.id hash之后的下标中加入</span></span><br><span class="line">arr[<span class="keyword">this</span>.hash(person.id)].add(person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比如size=7,那么0-6加完后,7%7还是从0开始加入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id % size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HashTable arr=<span class="keyword">new</span> HashTable(<span class="number">6</span>);</span><br><span class="line">arr.add(<span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">"张三"</span>));</span><br><span class="line">arr.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"找一"</span>));</span><br><span class="line">arr.add(<span class="keyword">new</span> Person(<span class="number">7</span>, <span class="string">"张气"</span>));</span><br><span class="line">arr.add(<span class="keyword">new</span> Person(<span class="number">10</span>, <span class="string">"赵氏"</span>));</span><br><span class="line">arr.list();</span><br><span class="line">System.out.println(<span class="string">"================="</span>);</span><br><span class="line">Person findById = arr.findById(<span class="number">3</span>);</span><br><span class="line">System.out.println(findById.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">空</span><br><span class="line">Person [id=<span class="number">1</span>, name=找一] Person [id=<span class="number">7</span>, name=张气] </span><br><span class="line">空</span><br><span class="line">Person [id=<span class="number">3</span>, name=张三] </span><br><span class="line">Person [id=<span class="number">10</span>, name=赵氏] </span><br><span class="line">空</span><br><span class="line">=================</span><br><span class="line">Person [id=<span class="number">3</span>, name=张三]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2020/08/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序是典型的空间换时间的算法,其中采用递归非常合适</p><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路<a href="https://baike.baidu.com/item/归并/253741" target="_blank" rel="noopener">归并</a>。</p><a id="more"></a><p><img src="/2020/08/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1568646068785.png" alt="1568646068785"></p><h2 id="举例底下两层的具体实现过程"><a href="#举例底下两层的具体实现过程" class="headerlink" title="举例底下两层的具体实现过程"></a>举例底下两层的具体实现过程</h2><p>思路比较就是找到小的放入新数组,再用新数组替换原数组,</p><p>当<strong>某一个</strong>下标到达最右边时(<strong>绿标到9数字的位置,蓝标到7数字的位置</strong>),把另一个下标右边的剩下值放入新数组,</p><p><img src="/2020/08/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1568612397026.png" alt="1568612397026"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序原数组,新数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left,<span class="keyword">int</span> mid ,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=left;<span class="comment">//左半部分的起始位置</span></span><br><span class="line"><span class="keyword">int</span> r=mid+<span class="number">1</span>;<span class="comment">//右半部分的起始位置</span></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//循环结束代表l,r下标某一个已经遍历完了</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;=mid&amp;&amp;r&lt;=right) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[l]&lt;=arr[r]) &#123;</span><br><span class="line">temp[index++]=arr[l++];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">temp[index++]=arr[r++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左边下标没到mid，把剩下的加到数组temp</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;=mid) &#123;</span><br><span class="line">temp[index++]=arr[l++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右边下标没到right，把剩下的加到数组temp</span></span><br><span class="line"><span class="keyword">while</span>(r&lt;=right)&#123;</span><br><span class="line">temp[index++]=arr[r++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//慢慢的把每次小段的排好序的数字替代arr的数字</span></span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">arr[left++]=temp[index++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分为小段过程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left ,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left&lt;right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//左部分</span></span><br><span class="line">merge(arr,  left ,mid, temp);</span><br><span class="line">            <span class="comment">//右部分</span></span><br><span class="line">merge(arr, mid+<span class="number">1</span>, right,temp);</span><br><span class="line"><span class="comment">//治的过程</span></span><br><span class="line">mergeSort(arr,  left ,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于项目为什么不使用外键</title>
      <link href="/2020/08/09/%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%A4%96%E9%94%AE/"/>
      <url>/2020/08/09/%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%A4%96%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="关于项目为什么不使用外键"><a href="#关于项目为什么不使用外键" class="headerlink" title="关于项目为什么不使用外键"></a>关于项目为什么不使用外键</h1><h2 id="阿里JAVA规范：【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"><a href="#阿里JAVA规范：【强制】不得使用外键与级联，一切外键概念必须在应用层解决。" class="headerlink" title="阿里JAVA规范：【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"></a>阿里JAVA规范：【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</h2><a id="more"></a><p>后边还没写呢!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Mysql数据库报错</title>
      <link href="/2020/08/09/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/"/>
      <url>/2020/08/09/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="关于数据库报错"><a href="#关于数据库报错" class="headerlink" title="关于数据库报错"></a>关于数据库报错</h1><h2 id="Access-denied-for-user-‘root’-’localhost’-using-password-YES"><a href="#Access-denied-for-user-‘root’-’localhost’-using-password-YES" class="headerlink" title="Access denied for user ‘root’@’localhost’ (using password: YES)"></a>Access denied for user ‘root’@’localhost’ (using password: YES)</h2><a id="more"></a><h2 id="明明之前是对的"><a href="#明明之前是对的" class="headerlink" title="明明之前是对的?"></a>明明之前是对的?</h2><h3 id="看看mysql服务器是否关闭-右键此电脑-gt-管理-gt-服务-gt-找到mysql服务右键开启"><a href="#看看mysql服务器是否关闭-右键此电脑-gt-管理-gt-服务-gt-找到mysql服务右键开启" class="headerlink" title="看看mysql服务器是否关闭,右键此电脑-&gt;管理-&gt;服务-&gt;找到mysql服务右键开启"></a>看看mysql服务器是否关闭,右键此电脑-&gt;管理-&gt;服务-&gt;找到mysql服务右键开启</h3><h3 id="记事本打开mysql下的my-ini在-mysqld-下加入"><a href="#记事本打开mysql下的my-ini在-mysqld-下加入" class="headerlink" title="记事本打开mysql下的my.ini在[mysqld]下加入"></a>记事本打开mysql下的my.ini在[mysqld]下加入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><h3 id="重启mysql服务器-重新进入bin-输入mysql-u-root-p-此时就变成无密码输入-此时可以修改密码"><a href="#重启mysql服务器-重新进入bin-输入mysql-u-root-p-此时就变成无密码输入-此时可以修改密码" class="headerlink" title="重启mysql服务器,重新进入bin  输入mysql -u root -p,此时就变成无密码输入,此时可以修改密码"></a>重启mysql服务器,重新进入bin  输入mysql -u root -p,此时就变成无密码输入,此时可以修改密码</h3><h3 id="set-password-for-‘root’-‘localhost’-password-‘123456’"><a href="#set-password-for-‘root’-‘localhost’-password-‘123456’" class="headerlink" title="set password for ‘root’@‘localhost’=password(‘123456’);"></a>set password for ‘root’@‘localhost’=password(‘123456’);</h3>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于魔方的究极思考</title>
      <link href="/2020/08/09/%E5%85%B3%E4%BA%8E%E9%AD%94%E6%96%B9%E7%9A%84%E7%A9%B6%E6%9E%81%E6%80%9D%E8%80%83/"/>
      <url>/2020/08/09/%E5%85%B3%E4%BA%8E%E9%AD%94%E6%96%B9%E7%9A%84%E7%A9%B6%E6%9E%81%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="魔方涉及到的数学"><a href="#魔方涉及到的数学" class="headerlink" title="魔方涉及到的数学?"></a>魔方涉及到的数学?</h2><h2 id="魔方公式怎么产生的"><a href="#魔方公式怎么产生的" class="headerlink" title="魔方公式怎么产生的?"></a>魔方公式怎么产生的?</h2><a id="more"></a><h3 id="我学会了还原魔方"><a href="#我学会了还原魔方" class="headerlink" title="我学会了还原魔方"></a>我学会了还原魔方</h3><p>小学时,在两元店里我心血来潮开始复原一个魔方,以前只是见过别人转好,知道这个立方体很神奇,会转的都是智商超强,或许是我天赋异禀,我也能转完整的一层,但第二层我不会了,我听别人说过魔方是一层层转的,听说之后,才知道魔方这玩意是有<strong>公式</strong>的,于是到新华书店里找魔方大全,大概记了5个公式我就能在5分钟内转好了,我会给小伙伴得瑟,也会有稍微懂一点的,但又不会拼魔方的人<strong>戏谑地说</strong>:”有口诀的背背不就好了!” 类似的话,我也无法反驳.</p><h3 id="我精通魔方的过程"><a href="#我精通魔方的过程" class="headerlink" title="我精通魔方的过程"></a>我精通魔方的过程</h3><p>直到高中,我发现了<strong>魔方速拧方法cfop</strong>(发明者:杰西卡·弗雷德里奇),四步个骤,通俗来讲.就是</p><p>第一步底层➕ 并与第二层中心块对齐–</p><p>第二步:四组组合块完成前两层–</p><p>第三步:第三次顶面同色–</p><p>第四步:一步到位还原完成</p><p>经过几个月的练习,我能在30秒内还原,整个班除了一些女生,可以说都会还原魔方!我带动的节奏,因为在高中除了学习总得找点乐子吧!那就是魔方咯!</p><p>直到现在,我平均成绩16秒,收藏魔方对魔方也有非常深刻的理解,仅仅是前两层,正因为魔方的提速完全在于对前两层的理解,所以我才有这速度,第三层的0ll和pll即cfop的o和p,我仅仅是因为肌肉记忆,而<strong>不知其所以然</strong></p><h3 id="深度理解魔方原理"><a href="#深度理解魔方原理" class="headerlink" title="深度理解魔方原理"></a>深度理解魔方原理</h3><p>我产生了一个疑问,<strong>魔方公式是怎么来的原理是什么</strong>于是我深入探究的精神就来了。人类能理解的程度的两种方法<a href="https://v.youku.com/v_show/id_XMzE2Mjc3MDQ0.html" target="_blank" rel="noopener">交换子</a>和<a href="http://bbs.mf8-china.com/forum.php?mod=viewthread&tid=511" target="_blank" rel="noopener">空穴法</a>后者是由<strong>大雁魔方创始人:大烟头 发明</strong>  我的理解是两个数字的交换,得有三个对象吧,借助的概念! 不过对于不了解魔方的人还是很难理解的.现在的公式大多是计算机通过穷举试验出来的,然后大神找出最顺手的作为标准。</p><h3 id="非人类研究范围"><a href="#非人类研究范围" class="headerlink" title="非人类研究范围"></a>非人类研究范围</h3><p><a href="https://baike.baidu.com/item/%E4%B8%8A%E5%B8%9D%E4%B9%8B%E6%95%B0/10098625?fr=aladdin" target="_blank" rel="noopener"><strong>上帝之数</strong></a>就是魔方最乱的打乱状态下计算机能复原的最小步数就是20,计算机破解魔方永远在20步及以内.世界纪录最少21步人类所能达到的.这仅仅是在魔方不是最复杂情况下的最少还原步骤,或许那种情况计算机只要10步.所谓的 <a href="https://baike.baidu.com/item/%E7%BE%A4%E8%AE%BA/10980672?fr=aladdin" target="_blank" rel="noopener"><strong>群论</strong></a>,这涉及到高深数学稍作了解还是放弃了 反正我是不懂!</p>]]></content>
      
      
      <categories>
          
          <category> 高大上 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Cookie和Session</title>
      <link href="/2020/08/09/%E5%85%B3%E4%BA%8ECookie%E5%92%8CSession/"/>
      <url>/2020/08/09/%E5%85%B3%E4%BA%8ECookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<h2 id="利用Cookie实现记住密码-自动登录"><a href="#利用Cookie实现记住密码-自动登录" class="headerlink" title="利用Cookie实现记住密码  自动登录"></a>利用Cookie实现记住密码  自动登录</h2><a id="more"></a><p>用户首次与Web服务器建立连接的时候，服务器会给用户分发一个 SessionID作为标识。SessionID是一个由24个字符组成的随机字符串。用户每次提交页面，浏览器都会把这个SessionID包含在 HTTP头中提交给Web服务器，这样Web服务器就能区分当前请求页面的是哪一个客户端(一般指浏览器)。这个SessionID就是保存在客户端的，属于客户端Session。其实客户端Session默认是以cookie的形式来存储的。</p><p>Cookie是保存在浏览器,而浏览器会把他下载到本地,保存为txt文件</p><p>Session是保存在服务器,关闭浏览器,到期或者服务器关闭就消失了,</p><h1 id="1-自动登录"><a href="#1-自动登录" class="headerlink" title="1.自动登录"></a>1.自动登录</h1><h2 id="1-1创建表单"><a href="#1-1创建表单" class="headerlink" title="1.1创建表单"></a>1.1创建表单</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form  method=<span class="string">"post"</span> id=<span class="string">"loginForm"</span> action=<span class="string">"/LoginServlet"</span>  &gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span> name =<span class="string">"username"</span> &gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"password"</span> name =<span class="string">"password"</span> &gt;</span><br><span class="line">&lt;label&gt; &lt;input type="checkbox" name="autoLogin" id="autoLogin"&gt; 自动登录&lt;/label&gt;</span><br><span class="line">&lt;label&gt; &lt;input type="checkbox" name="remberpsw" id="remberpsw"&gt; 记住密码&lt;/label&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> width=<span class="string">"100"</span> value=<span class="string">"登录"</span> name=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2生成Cookie"><a href="#1-2生成Cookie" class="headerlink" title="1.2生成Cookie"></a>1.2生成Cookie</h2><p>​    判断前台是否点击了自动登录,是则创建Cookie,后跳转到主页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String autoLogin = request.getParameter(<span class="string">"autoLogin"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"on"</span>.equals(autoLogin))&#123;</span><br><span class="line"><span class="comment">//要自动登录</span></span><br><span class="line"><span class="comment">//创建存储用户名的cookie</span></span><br><span class="line">Cookie cookie_username = <span class="keyword">new</span> Cookie(<span class="string">"cookie_username"</span>,user.getUsername());</span><br><span class="line">cookie_username.setMaxAge(<span class="number">10</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">//创建存储密码的cookie</span></span><br><span class="line">Cookie cookie_password = <span class="keyword">new</span> Cookie(<span class="string">"cookie_password"</span>,user.getPassword());</span><br><span class="line">cookie_password.setMaxAge(<span class="number">10</span>*<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">response.addCookie(cookie_username);</span><br><span class="line">response.addCookie(cookie_password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将user对象存到session中</span></span><br><span class="line">session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line"><span class="comment">//重定向到首页</span></span><br><span class="line">response.sendRedirect(request.getContextPath()+<span class="string">"/index.jsp"</span>);</span><br></pre></td></tr></table></figure><h2 id="1-3获取Cookie"><a href="#1-3获取Cookie" class="headerlink" title="1.3获取Cookie"></a>1.3获取Cookie</h2><p>下次再访问登录界面时,<strong>在Cookie没有失效的前提下获取Cookie中的用户名与密码进行自动登录</strong>,一般写在LoginFilter登录过滤器中</p><p>Cookie里边包含了很多键值对,cookie_username和cookie_password只是里边的一部分</p><p>所以要遍历整个cookie数组</p><p>遍历到键为cookie_username就把他赋值给字符串cookie_username</p><p>遍历到键为cookie_password就把值赋值给字符串cookie_password</p><p>而后可以用该字符串进行后续操作</p><p>比如与数据库表比对,实现自动登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String cookie_username = <span class="keyword">null</span>;</span><br><span class="line">String cookie_password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取携带用户名和密码cookie</span></span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">   <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">       <span class="comment">//获得想要的cookie</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"cookie_username"</span>.equals(cookie.getName()))&#123;</span><br><span class="line">cookie_username = cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="string">"cookie_password"</span>.equals(cookie.getName()))&#123;</span><br><span class="line">cookie_password = cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-记住密码"><a href="#2-记住密码" class="headerlink" title="2.记住密码"></a>2.记住密码</h1><p>把上述字符串,放入域中,jsp登录界面使用${}获取即可!</p>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分治法</title>
      <link href="/2020/08/09/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
      <url>/2020/08/09/%E5%88%86%E6%B2%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>分治法就是把一个复杂的问题,分成n个小问题解决,使用递归方法,比如快速排序</p><a id="more"></a><h2 id="分治法与递归的区别"><a href="#分治法与递归的区别" class="headerlink" title="分治法与递归的区别"></a>分治法与递归的区别</h2><p>递归是不停调用自己,比如计算100的阶乘就用递归,是纵向的,</p><p>分治法里边使用了递归,横向+纵向,有一传十,十传百的感觉</p><p><img src="/2020/08/09/%E5%88%86%E6%B2%BB%E6%B3%95/1569737274755.png" alt="1569737274755"></p><h2 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h2><p>汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p><ul><li>任何时候大的不能在小的上面</li><li>每次移动一个</li><li>把所有A的盘移到C</li></ul><p><img src="/2020/08/09/%E5%88%86%E6%B2%BB%E6%B3%95/1569738833619.png" alt="1569738833619"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分治法的思想就体现在这里</p><ul><li>把64个盘分成上边63个和下面最大的,两个整体,63移动到B,把最大的移动到C</li><li>把63个盘,同理分成62个和下面最大的,62移动到A,把最大的移动到C</li><li>把62个盘,同理分成61个和下面最大的,61移动到B,把最大的移动到C</li><li>同理,总体的思路就是把上面的大整体移到B,分两份后把上面的大整体后移到C</li></ul><p><img src="/2020/08/09/%E5%88%86%E6%B2%BB%E6%B3%95/1569740312332.png" alt="1569740312332"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanNota</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//汉诺塔,n个圆柱,3个柱子ABC,起始全在A,要依靠B,全部移到C,小的在大的上边</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanNota</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> from,<span class="keyword">char</span> dependOn,<span class="keyword">char</span> to)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//只有一个那么直接输出</span></span><br><span class="line">System.out.println(<span class="string">"第"</span>+i+++<span class="string">"步从"</span>+from+<span class="string">"--&gt;"</span>+to);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//第一步，先将n-1个盘子从A利用C挪到B</span></span><br><span class="line">hanNota(n-<span class="number">1</span>,from,to,dependOn);</span><br><span class="line"><span class="comment">//讲n这个盘子（底盘）从A挪到C</span></span><br><span class="line">System.out.println(<span class="string">"第"</span>+i+++<span class="string">"步从"</span>+from+<span class="string">"--&gt;"</span>+to);</span><br><span class="line"><span class="comment">//讲n-1个盘子从B利用A挪到C</span></span><br><span class="line">hanNota(n-<span class="number">1</span>,dependOn,from,to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">HanNota hanNota = <span class="keyword">new</span> HanNota();</span><br><span class="line">hanNota.hanNota(<span class="number">4</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 分治法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问网站的IP和网站总浏览量</title>
      <link href="/2020/08/09/%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E7%9A%84IP%E5%92%8C%E7%BD%91%E7%AB%99%E6%80%BB%E6%B5%8F%E8%A7%88%E9%87%8F/"/>
      <url>/2020/08/09/%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E7%9A%84IP%E5%92%8C%E7%BD%91%E7%AB%99%E6%80%BB%E6%B5%8F%E8%A7%88%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>我的网站项目要实现访问网站人数统计:同一个ip浏览多次,只会加浏览量</p><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路:"></a>实现思路:</h2><ul><li>创建数据库表,主键自增,记录ip,访问时间,ip访问次数,访问浏览器</li><li>取出数据库数据放到List集合中,再转化为Map,键:ip,值:该行数据</li><li>用户访问网站记录ip地址,map.containsKey(ip)方法判断是否在map中</li><li>若有则该ip的访问次数+1,若无,则创建entity对象,把对象插入数据库</li></ul><h3 id="获取ip’地址方法"><a href="#获取ip’地址方法" class="headerlink" title="获取ip’地址方法"></a>获取ip’地址方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip!= <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(ip) &amp;&amp; !<span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ip;</span><br><span class="line">        &#125;</span><br><span class="line">        ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip!= <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(ip)  &amp;&amp; !<span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">// 多次反向代理后会有多个IP值，第一个为真实IP。</span></span><br><span class="line">            <span class="keyword">int</span> index = ip.indexOf(<span class="string">','</span>);</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ip.substring(<span class="number">0</span>, index);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ip;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>每次访问网站主页,考虑到性能,不能总是select * from 数据表,然后每次都要转化为Map,</p><p>因此使用init方法创建一个变量,服务器加载select * from 数据表,存到这个List变量</p><p>顺便转化为Map,访问主页时获取变量判断ip是否在其中</p>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2020/08/09/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/08/09/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p><p>在有序序列的条件下才可以进行二分查找,找中间的值,再分别往两边找,一直找中间</p><a id="more"></a><h2 id="有序且不重复时使用-不完整"><a href="#有序且不重复时使用-不完整" class="headerlink" title="有序且不重复时使用(不完整)"></a>有序且不重复时使用(不完整)</h2><p>以中间值作为分界点,进行左右递归找到为止</p><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//用于不存在数字的情况</span></span><br><span class="line"><span class="keyword">if</span> (left&gt;right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid]&lt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,mid+<span class="number">1</span>,right,value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid]&gt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,left,mid-<span class="number">1</span>,value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch3</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="comment">//用于不存在数字的情况</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid]&lt;value) &#123;</span><br><span class="line"> left=mid+<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid]&gt;value) &#123;</span><br><span class="line"> right=mid-<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有序且不重复时使用-优化版本-也加插值查找"><a href="#有序且不重复时使用-优化版本-也加插值查找" class="headerlink" title="有序且不重复时使用(优化版本)也加插值查找"></a>有序且不重复时使用(优化版本)也加插值查找</h2><p>中值采用了算法公式中间值,数据量大的情况下,可以自适应,速度更快</p><p>int mid=left+(right-left)*(value-arr[left])/(arr[right]-arr[left]);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//差值查找,主要是中值采用了合适的算法,不适用重复</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertValueSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于不存在数字的情况</span></span><br><span class="line"><span class="keyword">if</span> (left&gt;right||arr[<span class="number">0</span>]&gt;value||arr[arr.length-<span class="number">1</span>]&lt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=left+(right-left)*(value-arr[left])/(arr[right]-arr[left]);</span><br><span class="line"><span class="keyword">if</span> (arr[mid]&lt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,mid+<span class="number">1</span>,right,value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid]&gt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr,left,mid-<span class="number">1</span>,value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有序-有重复元素时使用-优化版"><a href="#有序-有重复元素时使用-优化版" class="headerlink" title="有序,有重复元素时使用(优化版)"></a>有序,有重复元素时使用(优化版)</h2><p>找到值后加入到一个集合中比如int[] arr = { 1,2,34,45,64,64,64,78 };</p><p>可以看到相同的都是放在一起的,如果已经确定了中值就是要找的值,</p><p>那么往左边右边看看是否还有,没了那说明真的没了</p><p><img src="/2020/08/09/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1568802315860.png" alt="1568802315860"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仅限于有序列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Integer&gt; <span class="title">binarySearch2</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//比中值小,那在左边</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid]&lt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch2(arr,mid+<span class="number">1</span>,right,value);</span><br><span class="line"><span class="comment">//比中值大,那在右边</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid]&gt;value) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch2(arr,left,mid-<span class="number">1</span>,value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//就是中间值</span></span><br><span class="line">LinkedList&lt;Integer&gt; linkedList=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//左边找</span></span><br><span class="line"><span class="keyword">int</span> temp=mid-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//temp已经在下标为0处,那一定是找不到了</span></span><br><span class="line"><span class="comment">//既然是有序的相同的一定是放在一起的,这个值的左边如果也是相同那就找到了</span></span><br><span class="line"><span class="keyword">if</span> (temp&lt;<span class="number">0</span>||arr[temp]!=value) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">linkedList.add(temp);</span><br><span class="line">temp--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间的值</span></span><br><span class="line">linkedList.add(mid);</span><br><span class="line"><span class="comment">//右边找</span></span><br><span class="line">temp=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//temp已经在下标为0处,那一定是找不到了</span></span><br><span class="line"><span class="comment">//既然是有序的相同的一定是放在一起的,这个值的边如果也是相同那就找到了</span></span><br><span class="line"><span class="keyword">if</span> (temp&gt;arr.length-<span class="number">1</span>||arr[temp]!=value) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">linkedList.add(temp);</span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> linkedList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 插值查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2020/08/09/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/08/09/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>一棵深度为k，且有2^k-1个结点的二叉树，称为满二叉树。这种树的特点是每一层上的结点数都是最大结点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且或者最后一层是满的，或者是在右边缺少连续若干结点，则此二叉树为完全二叉树。深度为k的完全二叉树，至少有2k-1个叶子结点，至多有2k-1个结点。</p><a id="more"></a><h2 id="为什么会有二叉树"><a href="#为什么会有二叉树" class="headerlink" title="为什么会有二叉树"></a>为什么会有二叉树</h2><p>ArrayList(数组集合)的底层是数组实现的,数组结构查询会比较快,但是数组是固定长度,添加时是创建的新数组,原数据拷贝再把新数据加到对饮的位置,默认扩容是原来的1.5倍</p><p>LinkedList(链表集合)的底层是链表,插入元素,只需要操作next就可以,可是查询非常慢,因为要从头遍历查询,</p><p>因为两者的缺点存在,才有了二叉树的出现二叉树就结合了两种集合的优点,插入和查询都比较快.</p><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p><strong>满二叉树是完全二叉树的特殊情况</strong></p><p><img src="/2020/08/09/%E4%BA%8C%E5%8F%89%E6%A0%91/1568968787205.png" alt="1568968787205"></p><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p><img src="/2020/08/09/%E4%BA%8C%E5%8F%89%E6%A0%91/1568969172908.png" alt="1568969172908"></p><h2 id="面向对象设计二叉树"><a href="#面向对象设计二叉树" class="headerlink" title="面向对象设计二叉树"></a>面向对象设计二叉树</h2><h3 id="结点实体类-Man"><a href="#结点实体类-Man" class="headerlink" title="结点实体类(Man)"></a>结点实体类(Man)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">int</span>  id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Man left;<span class="comment">//左结点</span></span><br><span class="line"><span class="keyword">public</span> Man right;<span class="comment">//右结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Man [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.pre();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.pre();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.mid();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//中</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.mid();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.left.behind();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.right.behind();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//中</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span></span>&#123;</span><br><span class="line">    <span class="comment">//根结点</span></span><br><span class="line"><span class="keyword">public</span>  Man root;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"binaryTree [root="</span> + root + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.pre();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"前序遍历结点为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.mid();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"中序遍历结点为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.root!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.root.behind();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"后序遍历结点为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-手动插入结点"><a href="#测试类-手动插入结点" class="headerlink" title="测试类(手动插入结点)"></a>测试类(手动插入结点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Man man=<span class="keyword">new</span> Man(<span class="number">1</span>, <span class="string">"张三"</span>);</span><br><span class="line">BinaryTree binaryTree =<span class="keyword">new</span> BinaryTree();</span><br><span class="line">binaryTree.root=man;<span class="comment">//根结点</span></span><br><span class="line">Man man2=<span class="keyword">new</span> Man(<span class="number">2</span>, <span class="string">"李四"</span>);</span><br><span class="line">Man man3=<span class="keyword">new</span> Man(<span class="number">3</span>, <span class="string">"王五"</span>);</span><br><span class="line">man.left=man2;</span><br><span class="line">man.right=man3;</span><br><span class="line">Man man4=<span class="keyword">new</span> Man(<span class="number">4</span>, <span class="string">"李si"</span>);</span><br><span class="line">man2.left=man4;</span><br><span class="line">binaryTree.pre();<span class="comment">//先序遍历  1 2 4 3</span></span><br><span class="line">      binaryTree.mid();<span class="comment">//中序遍历 4 2 1 3</span></span><br><span class="line">binaryTree.behind();<span class="comment">//后序遍历 4 2 3 1</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/09/%E4%BA%8C%E5%8F%89%E6%A0%91/1568987177141.png" alt="1568987177141"></p><h3 id="这就是单纯的二叉树-平衡二叉树才是插入-查询高效的关键没后续会讲"><a href="#这就是单纯的二叉树-平衡二叉树才是插入-查询高效的关键没后续会讲" class="headerlink" title="这就是单纯的二叉树,平衡二叉树才是插入,查询高效的关键没后续会讲!"></a>这就是单纯的二叉树,平衡二叉树才是插入,查询高效的关键没后续会讲!</h3>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的内存和引用分析</title>
      <link href="/2020/08/09/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%92%8C%E5%BC%95%E7%94%A8%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/09/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%92%8C%E5%BC%95%E7%94%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>大家都知道想要一个对象直接new就可以了</p><p>比如<strong>Person  p1=new Person();</strong><br>这里内存发生了什么?</p><a id="more"></a><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p>栈内存: 里边存了对象的地址,比如你在纸上记下了我的地址浙江金华某地</p><p>堆内存:栈内存所指向的具体实例,比如,浙江金华某地的具体的房子</p><p><img src="/2020/08/09/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%92%8C%E5%BC%95%E7%94%A8%E5%88%86%E6%9E%90/1566478556797.png" alt="1566478556797"></p><p>对象实例化时就给里边的属性自动赋默认值空或0</p><h3 id="这时给他赋值"><a href="#这时给他赋值" class="headerlink" title="这时给他赋值"></a>这时给他赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">per1.name=<span class="string">"张洪祥"</span>;</span><br><span class="line">per1.age=<span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>堆内存的值也就变了</p><h3 id="如果没有实例化就赋值"><a href="#如果没有实例化就赋值" class="headerlink" title="如果没有实例化就赋值"></a>如果没有实例化就赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person per1=<span class="keyword">null</span>;</span><br><span class="line">per1.name=<span class="string">"张洪祥"</span>;</span><br><span class="line">per1.age=<span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>这样的话就报错<strong>NullPointerException</strong></p><p>一切的原因都是你没有实例化对象,比如我还没出生,我爸被我起名字张洪祥,人都没有,你叫我,我会应你吗?,直接报空!</p><h2 id="引用分析"><a href="#引用分析" class="headerlink" title="引用分析"></a>引用分析</h2><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person  张洪祥&#x3D;new Person();</span><br><span class="line">Person  张三&#x3D;张洪祥;</span><br></pre></td></tr></table></figure><p>别人给我取个外号叫张三,你叫我张三,我也会应你;</p><p>栈内存里存了两个地址,都指向堆内存空间</p><p>我叫张洪祥,也叫张三,都指向我这个人</p><p><img src="/2020/08/09/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%92%8C%E5%BC%95%E7%94%A8%E5%88%86%E6%9E%90/1566480160961.png" alt="1566480160961"></p><p>执行<code>张三.age=20</code> 那么堆内存的age值也会变成20</p><p>如果我写了一个方法执行,而不是直接<code>张三.age=20</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">change</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">张三.age=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数是Person类,那么这个方法执行完毕后,栈内存的地址就消失了,没了</p><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><p>值传递只存在于基本数据类型中,创建<code>int a=1;</code>就会在栈中直接创建为1 的变量,没有所谓的堆内存了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=a;</span><br></pre></td></tr></table></figure><p>此时修改b=2,那么a还是为1,因为栈内存里分别有a,b两个区域,只是刚开始值都是1</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2020/08/09/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序(Heapsort)是利用堆这种数据结构设计的一种排序算法,他是选择排序的一种,其实就是完全二叉树.堆分为大顶堆小顶堆.大顶堆其所有的子结点&lt;=父节点,小顶堆其所有的子结点&gt;=父节点,二叉树是一种逻辑机构,其表现形式还是数组.</p><a id="more"></a><p>根据上篇文章(顺序存储二叉树),可以知道其含义</p><ul><li>大顶堆:一个数组arr[i]&gt;=arr[ix2+1]左节点和arr[i]&lt;=arr[ix2+2]右节点</li><li>小顶堆:一个数组arr[i]&lt;=arr[ix2+1]左节点和arr[i]&lt;=arr[ix2+2]右节点</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><img src="/2020/08/09/%E5%A0%86%E6%8E%92%E5%BA%8F/1569160307707.png" alt="1569160307707"></p><p><strong>研究了很久,还是只了解第一个步骤就是大顶堆时,总是把大的慢慢交换上去</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i是叶子结点的父节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Heapsort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>*i+<span class="number">1</span>; j &lt; length; j=<span class="number">2</span>*j+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//左节点小于右节点</span></span><br><span class="line"><span class="keyword">if</span> (j+<span class="number">1</span>&lt;length&amp;&amp;arr[j]&lt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">//j指向最大的那个值</span></span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子节点大于父节点,那么交换</span></span><br><span class="line"><span class="keyword">if</span> (arr[i]&lt;arr[j]) &#123;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="keyword">int</span> temp =arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line"></span><br><span class="line">i=j;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>这一步我始终搞不清楚,太乱了,也许我现在的水平还不允许我理解,我只是把我当前的理解写在注释上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="comment">//arr.length/2-1是公式,代表叶子结点的父节点</span></span><br><span class="line">        <span class="comment">//这一步是在很难懂</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length/<span class="number">2</span>-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">Heapsort(arr,i,arr.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">//大的总是放到数组最后</span></span><br><span class="line"><span class="keyword">int</span> temp =arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>]=arr[i];</span><br><span class="line">arr[i]=temp; </span><br><span class="line">            <span class="comment">//重组二叉树</span></span><br><span class="line">Heapsort(arr,<span class="number">0</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span>[] arr = &#123; <span class="number">10</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span> &#125;;</span><br><span class="line">heapsort(arr);</span><br><span class="line"><span class="comment">//输出[2, 3, 4, 5, 6, 7, 8, 10]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
          <category> 数据结构 </category>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>定时任务Quartz</title>
      <link href="/2020/08/09/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1Quartz%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%87%8F%E5%92%8C%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
      <url>/2020/08/09/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1Quartz%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%87%8F%E5%92%8C%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于网站访问量统计的次数+1的操作非常频繁还有文章访问量统计,不可能说每次访问数据库去+1,这样数据库压力是非常大的.这就需要用到定时任务,比如每隔一天把上一天统计的数添加到数据库,中间要用到一个静态变量存储计数,再把这个数加入数据库!</p></blockquote><a id="more"></a><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写要定时的业务类"><a href="#编写要定时的业务类" class="headerlink" title="编写要定时的业务类"></a>编写要定时的业务类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewsQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">//这里随意写</span></span><br><span class="line">        System.out.println(<span class="string">"测试定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务配置类"><a href="#定时任务配置类" class="headerlink" title="定时任务配置类"></a>定时任务配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.coderzhx.blog2.handler.ViewsQuartz;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-11-02-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里随便写</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIEWS_IDENTITY = <span class="string">"viewsQuartz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">quartzDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(ViewsQuartz<span class="class">.<span class="keyword">class</span>).<span class="title">withIdentity</span>(<span class="title">VIEWS_IDENTITY</span>).<span class="title">storeDurably</span>().<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">quartzTrigger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(<span class="number">1</span>)  <span class="comment">//设置时间周期单位秒</span></span><br><span class="line"><span class="comment">//                .withIntervalInHours(2)  //两个小时执行一次</span></span><br><span class="line">                .repeatForever();</span><br><span class="line">        <span class="keyword">return</span>  TriggerBuilder.newTrigger().forJob(quartzDetail())</span><br><span class="line">                .withIdentity(VIEWS_IDENTITY)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样启动Appliaction就会一秒执行一次ViewsQuartz的executeInternal方法</strong></p>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点赞和评论留言功能思路</title>
      <link href="/2020/08/09/%E7%82%B9%E8%B5%9E%E5%92%8C%E8%AF%84%E8%AE%BA%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E6%80%9D%E8%B7%AF/"/>
      <url>/2020/08/09/%E7%82%B9%E8%B5%9E%E5%92%8C%E8%AF%84%E8%AE%BA%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>两者都用ajax请求实现,这是核心代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">               type:<span class="string">"post"</span>,</span><br><span class="line">               url:<span class="string">"/comment/"</span>+zcommonid,</span><br><span class="line">               success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>这是我的前端样式,我花了几小时嵌入我的项目中,根据一个jquery插件改的</p><p>这里提供3个</p><p>演示地址:<a href="https://eight1302.github.io/comments/view/index.html" target="_blank" rel="noopener">https://eight1302.github.io/comments/view/index.html</a></p><p>源码1:<a href="https://github.com/eight1302/comments" target="_blank" rel="noopener">https://github.com/eight1302/comments</a></p><p>源码2:<a href="https://www.lanrenzhijia.com/js/4780.html" target="_blank" rel="noopener">https://www.lanrenzhijia.com/js/4780.html</a></p><p>下面那个是我采用的</p><p>演示地址:<a href="http://www.jq22.com/yanshi14103" target="_blank" rel="noopener">http://www.jq22.com/yanshi14103</a></p><p>源码下载:<a href="http://www.jq22.com/jquery-info14103" target="_blank" rel="noopener">http://www.jq22.com/jquery-info14103</a></p><p><img src="/2020/08/09/%E7%82%B9%E8%B5%9E%E5%92%8C%E8%AF%84%E8%AE%BA%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD%E6%80%9D%E8%B7%AF/1564050622504.png" alt="1564050622504"></p><h2 id="点赞功能思路"><a href="#点赞功能思路" class="headerlink" title="点赞功能思路"></a>点赞功能思路</h2><ul><li>点赞按钮 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"1"</span>&gt;</span>赞<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此时的class是1,js判断$(this).is('.1')点击的是不是class为1</span></span><br><span class="line"><span class="comment">是,就获取点赞数量+1,先生成静态效果,再ajax请求,因为这个请求一定不会报错除非后台代码写错了,后移除class="1" 添加class="2",取消点赞时</span></span><br><span class="line"><span class="comment">此时就不是class="1"了数量-1--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Restful风格请求,获取当前评论的id传到后台进行+1修改--&gt;</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">                type:"post",</span><br><span class="line">                url:"/comment/"+zcommonid,</span><br><span class="line">                success:function(data)&#123;return false;&#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><ul><li>留言</li></ul><p>表单提交添加成功后,异步添加新加的评论,具体代码太长</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"cmtform"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span>   </span><br><span class="line">QQ<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">name</span>=<span class="string">"qq"</span>&gt;</span></span><br><span class="line"> 昵称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"common"</span> <span class="attr">name</span>=<span class="string">"common"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">id</span>=<span class="string">"comment"</span> <span class="attr">class</span>=<span class="string">"content comment-input"</span> <span class="attr">placeholder</span>=<span class="string">"各位小哥哥,小姐姐,大哥,大姐 来说点什么吧!"</span> <span class="attr">onkeyup</span>=<span class="string">"keyUP(this)"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">"plBtn"</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">                type: "post",</span><br><span class="line">                dataType: "text",</span><br><span class="line">                url: "/comment/add" ,</span><br><span class="line">                data: $('#cmtform').serialize(),</span><br><span class="line">                success: function (data) &#123;return false;&#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>因为这个插件本身的原因,外包form后js效果就失效了,导致我要先获取textera的值赋值给name=common的input后提交</p>]]></content>
      
      
      <categories>
          
          <category> 功能 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归迷宫最短路径</title>
      <link href="/2020/08/09/%E9%80%92%E5%BD%92%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/08/09/%E9%80%92%E5%BD%92%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>递归实际就是一种暴力查找,不停得调用自己,性能不佳,但代码简单</p><a id="more"></a><p><img src="/2020/08/09/%E9%80%92%E5%BD%92%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/1568095162049.png" alt="1568095162049"></p><h2 id="生成8x8数组迷宫"><a href="#生成8x8数组迷宫" class="headerlink" title="生成8x8数组迷宫"></a>生成8x8数组迷宫</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span>[] [] map()&#123;</span><br><span class="line"><span class="keyword">int</span>[] [] m=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">    <span class="comment">//边框</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line">m[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">m[i][<span class="number">7</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line">m[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">7</span>][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//障碍</span></span><br><span class="line">m[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">4</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">4</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">m[<span class="number">5</span>][<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>下右上左的方法查找,1是路障,2走过也不能在走了,3回溯也不能走了</p><p>不能走用false表示,,走过的路用2表示,直到找到终点map[4][1]结束递归</p><p><img src="/2020/08/09/%E9%80%92%E5%BD%92%E8%BF%B7%E5%AE%AB%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/1568102403387.png" alt="1568102403387"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span>[][] map ,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//终点坐标</span></span><br><span class="line"><span class="keyword">if</span> (map[<span class="number">4</span>][<span class="number">1</span>]==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j]==<span class="number">0</span>) &#123;</span><br><span class="line">map[i][j]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (go(map, i+<span class="number">1</span>, j)) &#123;<span class="comment">//下</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (go(map, i, j+<span class="number">1</span>)) &#123;<span class="comment">//右</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (go(map, i, j-<span class="number">1</span>)) &#123;<span class="comment">//上</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (go(map, i-<span class="number">1</span>, j)) &#123;<span class="comment">//左</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map[i][j]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上下左右顺序可以有24种组合</p><p>问题就在上下左右的if else 顺序问题,但我不知道怎么调整的思路</p><p>每一种组合的路线都是不同的,之中一定有最少的路线</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归 和 迭代 的区别</title>
      <link href="/2020/08/09/%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/09/%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题:"></a>经典面试题:</h2><h2 id="n个台阶-可以一步或者两步走-总共有几种走法"><a href="#n个台阶-可以一步或者两步走-总共有几种走法" class="headerlink" title="n个台阶,可以一步或者两步走,总共有几种走法 ?"></a>n个台阶,可以一步或者两步走,总共有几种走法 ?</h2><a id="more"></a><h4 id="用递归方法-不停地调用自己-代码简单-次数过多容易栈溢出"><a href="#用递归方法-不停地调用自己-代码简单-次数过多容易栈溢出" class="headerlink" title="用递归方法 :  不停地调用自己. 代码简单,次数过多容易栈溢出"></a>用递归方法 :  <strong>不停地调用自己.</strong> 代码简单,次数过多容易栈溢出</h4><ul><li><h3 id="f-1-一步-1种"><a href="#f-1-一步-1种" class="headerlink" title="f(1)           一步              1种"></a>f(1)           <strong>一步</strong>              <strong>1种</strong></h3></li><li><h3 id="f-2-1-走一步-f-1-2-走二步-2种"><a href="#f-2-1-走一步-f-1-2-走二步-2种" class="headerlink" title="f(2)           1.走一步+f(1)    2. 走二步     2种"></a>f(2)           1.<strong>走一步+f(1)</strong>    2. <strong>走二步</strong>     <strong>2种</strong></h3></li><li><h3 id="f-3-1-走一步-f-2-2-走二步-f-1-2-1-3种"><a href="#f-3-1-走一步-f-2-2-走二步-f-1-2-1-3种" class="headerlink" title="f(3)           1.走一步+f(2)  2.走二步+f(1)    2+1=  3种"></a>f(3)           1.<strong>走一步+f(2)</strong>  2.<strong>走二步+f(1)</strong>    <strong>2+1=  3种</strong></h3></li><li><h3 id="f-4-1-走一步-f-3-2-走二步-f-2-3-2-5种"><a href="#f-4-1-走一步-f-3-2-走二步-f-2-3-2-5种" class="headerlink" title="f(4)           1.走一步+f(3)  2.走二步+f(2)    3+2=  5种"></a>f(4)           1.<strong>走一步+f(3)</strong>  2.<strong>走二步+f(2)</strong>    <strong>3+2=  5种</strong></h3></li><li><h3 id="f-n-1-走一步-f-n-1-2-走二步-f-n-2"><a href="#f-n-1-走一步-f-n-1-2-走二步-f-n-2" class="headerlink" title="f(n)            1.走一步+f(n-1)  2.走二步+f(n-2)"></a>f(n)            1.<strong>走一步+f(n-1)</strong>  2.<strong>走二步+f(n-2)</strong></h3></li><li><h3 id="f-n-f-n-1-f-n-2"><a href="#f-n-f-n-1-f-n-2" class="headerlink" title="f(n)   = f(n-1)+ f(n-2)"></a><strong>f(n)   = f(n-1)+ f(n-2)</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int f(int n) &#123;</span><br><span class="line">if (n&#x3D;&#x3D;1||n&#x3D;&#x3D;2) &#123;</span><br><span class="line">return n;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return f(n-1)+f(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用迭代方法-变量的不停赋值-迭代效率高，运行时间只因循环次数增加而增加；"><a href="#用迭代方法-变量的不停赋值-迭代效率高，运行时间只因循环次数增加而增加；" class="headerlink" title="用迭代方法:变量的不停赋值   ,迭代效率高，运行时间只因循环次数增加而增加；"></a>用迭代方法:<strong>变量的不停赋值</strong>   ,迭代效率高，运行时间只因循环次数增加而增加；</h4><ul><li><h4 id="f-n-f-n-1-f-n-2-初始化变量one-1-two-2-sum-0"><a href="#f-n-f-n-1-f-n-2-初始化变量one-1-two-2-sum-0" class="headerlink" title="f(n)   = f(n-1)+ f(n-2)   初始化变量one=1 ,  two=2   ,sum=0"></a><strong>f(n)   = f(n-1)+ f(n-2)</strong>   初始化变量one=1 ,  two=2   ,sum=0</h4></li><li><h4 id="two保存最后走两步前边的步数-one保存最后走一步前边的步数"><a href="#two保存最后走两步前边的步数-one保存最后走一步前边的步数" class="headerlink" title="(two保存最后走两步前边的步数)+(one保存最后走一步前边的步数)"></a>(two保存最后走两步前边的步数)+(one保存最后走一步前边的步数)</h4></li><li><h4 id="总结公式-sum-two-one-one-two-two-sum"><a href="#总结公式-sum-two-one-one-two-two-sum" class="headerlink" title="总结公式    sum= two +one  ;   one=two;    two=sum;"></a>总结公式    sum= two +one  ;   one=two;    two=sum;</h4></li></ul><pre><code>public int f2(int n) {    if (n==1||n==2) {        return n;    }    int one=1;//初始化为走到第1阶台阶的走法    int two=2;//初始化为走到第2阶台阶的走法    int sum=0;    for (int i = 3; i &lt;= n; i++) {        sum=two+one;//sum=sum+sum+sum。。。。。。。。。。直到结束        one=two;        two=sum;    }    return sum;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2020/08/09/%E5%8D%95%E4%BE%8B%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/09/%E5%8D%95%E4%BE%8B%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例设计模式简单来讲就是只有一个实例的设计方法</p><p>它分为懒汉式和饿汉式;那么为什么要有这种模式呢?</p><a id="more"></a><p>一台电脑只有一个回收站吧,打开回收站,再次打开回收站其实都是同一个</p><p>一个班级只有一个班主任,我找班主任有点事,你也找他,我们要找的都是同一个;</p><h2 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h2><ul><li><p>类只能有一个实例</p></li><li><p>构造方法私有化</p></li><li><p>向外提供这一个实例</p></li></ul><h2 id="单例之懒汉模式"><a href="#单例之懒汉模式" class="headerlink" title="单例之懒汉模式"></a>单例之懒汉模式</h2><p>懒汉意思就是不需要的时候,啥都不干,我叫你干活才干活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> lazySingle lsLazySingle;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">lazySingle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> lazySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lsLazySingle==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(1)多线程出现问题的位置</span></span><br><span class="line">lsLazySingle=<span class="keyword">new</span> lazySingle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lsLazySingle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><p>减少内存开销,设计简单</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><p>线程不安全,为什么呢,因为如果有A 和 B 线程同时进来,A到(1)的位置,这时B抢占了A的cpu时间,那么也进来了,执行之后A和B就创建了两个不同实例那么就违反了单例</p><h2 id="单例之饿汉模式"><a href="#单例之饿汉模式" class="headerlink" title="单例之饿汉模式"></a>单例之饿汉模式</h2><p>饿汉意思就是,我都不需要你干活,你还是时刻准备;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> hungrySingle hsHungrySingle=<span class="keyword">new</span> hungrySingle();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">hungrySingle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> hungrySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsHungrySingle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点:"></a>优点:</h3><p>在编译期间就实例化了,需要就拿,线程安全,设计简单</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a>缺点:</h3><p>浪费内存,因为,我不需要,你还是实例化了,那不是浪费嘛</p><h2 id="改进懒汉式"><a href="#改进懒汉式" class="headerlink" title="改进懒汉式"></a>改进懒汉式</h2><p>添加同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsLazySingle</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> lazySingle lsLazySingle;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">lazySingle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> lazySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lsLazySingle==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(1)多线程出现问题的位置</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LsLazySingle) &#123;</span><br><span class="line">                lsLazySingle=<span class="keyword">new</span> lazySingle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lsLazySingle;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>但是这样似乎并没有解决多线程问题</p><p>因为就像上述所说的 A 和 B两个线程都进入(1),如果A拿到锁,B,在(1)等待,A进入后实例化对象,完成后释放锁,B进程还不是照样拿到之后可以进去嘛.</p><h2 id="懒汉式双检锁"><a href="#懒汉式双检锁" class="headerlink" title="懒汉式双检锁"></a>懒汉式双检锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsLazySingle</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> lazySingle lsLazySingle;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">lazySingle</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> lazySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lsLazySingle==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//(1)多线程出现问题的位置</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LsLazySingle) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lsLazySingle==<span class="keyword">null</span>) &#123;</span><br><span class="line">                lsLazySingle=<span class="keyword">new</span> lazySingle();</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lsLazySingle;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在同步块里边再加上是否为空判断,</p><p>这样接着上边讲到的,A拿到锁,B在(1)处等待,实例化对象后,释放锁,这时候B进同步代码块,发现已经实例化,那么退出非空判断</p><p><strong>这就相对完善的单例模式了!</strong></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从0搭建腾讯云服务器</title>
      <link href="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="买服务器-买域名就不说了CenOS7-Linux-系统的"><a href="#买服务器-买域名就不说了CenOS7-Linux-系统的" class="headerlink" title="买服务器,买域名就不说了CenOS7(Linux)系统的"></a>买服务器,买域名就不说了CenOS7(Linux)系统的</h2><a id="more"></a><h2 id="1-重装系统选择默认的Java环境"><a href="#1-重装系统选择默认的Java环境" class="headerlink" title="1.重装系统选择默认的Java环境"></a>1.重装系统选择默认的Java环境</h2><h2 id="2-登陆"><a href="#2-登陆" class="headerlink" title="2.登陆"></a>2.登陆</h2><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562054340437.png" alt="1562054340437"></p><h2 id="3-安装jdk"><a href="#3-安装jdk" class="headerlink" title="3.安装jdk"></a>3.安装jdk</h2><p>输入  <strong>yum search jdk</strong></p><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562054408093.png" alt="1562054408093"></p><p>这里安装一个1.8 输入<strong>yum -y install  java-1.8.0-openjdk*</strong></p><p>直到Complete！为止就算成功了</p><h2 id="安装tomcat并把文件传到服务器"><a href="#安装tomcat并把文件传到服务器" class="headerlink" title="安装tomcat并把文件传到服务器"></a>安装tomcat并把文件传到服务器</h2><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562150793411.png" alt="1562150793411"></p><h3 id="进入目录解压-apache-tomcat-8-5-42-tar-gz"><a href="#进入目录解压-apache-tomcat-8-5-42-tar-gz" class="headerlink" title="进入目录解压** apache-tomcat-8.5.42.tar.gz**"></a>进入目录解压** apache-tomcat-8.5.42.tar.gz**</h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562150008133.png" alt="1562150008133"></p><p>运行 <strong>tar zxvf apache-tomcat-8.5.42.tar.gz</strong> 解压</p><h3 id="如果提示没有权限此时要进入tomcat的bin下给予权限chmod-u-x-sh"><a href="#如果提示没有权限此时要进入tomcat的bin下给予权限chmod-u-x-sh" class="headerlink" title="如果提示没有权限此时要进入tomcat的bin下给予权限chmod u+x *.sh"></a>如果提示没有权限此时要进入tomcat的bin下给予权限<strong>chmod u+x *.sh</strong></h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562069164824.png" alt="1562069164824"></p><h2 id="4-安装mysql"><a href="#4-安装mysql" class="headerlink" title="4.安装mysql"></a>4.安装mysql</h2><h3 id="yum-install-mysql"><a href="#yum-install-mysql" class="headerlink" title="yum install mysql"></a><strong>yum install mysql</strong></h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562069295541.png" alt="1562069295541"></p><p>输入Y</p><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562072894170.png" alt="1562072894170"></p><p>此时如果报错Error Summary，说明有冲突包删除即可</p><p><strong>yum -y remove mysql-community-common-5.6.26-2.el6.x86_64</strong></p><p>之后再次安装</p><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562073009688.png" alt="1562073009688"></p><h3 id="yum-install-mysql-server"><a href="#yum-install-mysql-server" class="headerlink" title="yum install mysql-server"></a><strong>yum install mysql-server</strong></h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562073175977.png" alt="1562073175977"></p><h3 id="yum-install-mysql-devel"><a href="#yum-install-mysql-devel" class="headerlink" title="yum install mysql-devel"></a><strong>yum install mysql-devel</strong></h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562073251014.png" alt="1562073251014"></p><h3 id="service-mysqld-start"><a href="#service-mysqld-start" class="headerlink" title="service mysqld start"></a><strong>service mysqld start</strong></h3><p>此时可能会出错</p><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562074080291.png" alt="1562074080291"></p><p>这时要运行，就是删除呗，刚开始建服务器的话也无所谓啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> setenforce 0 </span><br><span class="line">rm -fr &#x2F;var&#x2F;lib&#x2F;mysql*</span><br><span class="line">rm &#x2F;var&#x2F;lock&#x2F;subsys&#x2F;mysqld </span><br><span class="line">killall mysqld*</span><br></pre></td></tr></table></figure><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562073985516.png" alt="1562073985516"></p><p>成功启动了</p><h3 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562076792375.png" alt="1562076792375"></p><h3 id="左侧菜单栏-–安全组"><a href="#左侧菜单栏-–安全组" class="headerlink" title="左侧菜单栏 –安全组"></a>左侧菜单栏 –安全组</h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562076861003.png" alt="1562076861003"></p><h3 id="新增关联-加入主机"><a href="#新增关联-加入主机" class="headerlink" title="新增关联 加入主机"></a>新增关联 加入主机</h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562076902444.png" alt="1562076902444"></p><h3 id="上传java-web-项目war包"><a href="#上传java-web-项目war包" class="headerlink" title="上传java web 项目war包"></a>上传java web 项目war包</h3><p><img src="/2020/08/09/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1562121993892.png" alt="1562121993892"></p><p>放到tomcat下的webapps下</p><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><p>进入bin下startup.sh</p><p>启动完成ip+8080如果有tom猫就成功了</p><p>如果没有,</p><ul><li><p>检查8080端口是否放行</p></li><li><p>如果你已经启动过tomcat关掉上一个shutdown</p></li><li><p>ps -aux | grep tomcat查看tomcat占用情况</p></li><li><p>kill 进程号</p></li><li><p>再次重启tomcat</p></li></ul><p>如果不行的话就看我另一篇搭建文章基于宝塔面板的</p><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><ul><li>vi 文件 (编辑文件)</li><li>输入i进入编辑状态此时最底下出现–insert–</li><li>Esc退出编辑状态</li><li>:wq保存</li><li>:q!不保存</li><li>cat 文件(查看文件)</li><li>cd 路径(进入某一路径)</li><li>ls 列出当前文件夹下的所有文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>层级评论的实现Mybatis+Thymeleaf</title>
      <link href="/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/"/>
      <url>/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>评论作为博客系统不可或缺的一部分,可以增加互动,各大网站评论功能是必须有的,这篇文章利用Mybatis 的+Thymeleaf实现评论+回复评论功能</p></blockquote><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.数据库表的设计核心 评论id ,文章id,内容content,父级评论id.其他就不阐述了</p><p>2.页面原型,参考各大网站,最多只能有两个层级的评论</p><p>3.实体类设计Comment中有父级Comment,还有子评论的Comment集合</p><p>4.后台逻辑的处理:怎么把层层级联关系分为最多只有两层的设计</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><table><thead><tr><th>-名字</th><th>-类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>评论id</td></tr><tr><td>content</td><td>varchar</td><td>评论内容</td></tr><tr><td>blog_id</td><td>bigint</td><td>文章id</td></tr><tr><td>parent_comment_id</td><td>bigint</td><td>父级评论id</td></tr></tbody></table><p>这里只写了核心的字段</p><p><img src="/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/1573910152163.png" alt="1573910152163"></p><h2 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h2><p><img src="/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/1573909964193.png" alt="1573909964193"></p><p>可以看出最多只有两层评论,<strong>问题就是怎么把类似于一棵树的数据,转化为同一级</strong></p><p><img src="/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/1573910476751.png" alt="1573910476751"></p><h2 id="实体类设计"><a href="#实体类设计" class="headerlink" title="实体类设计"></a>实体类设计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;<span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> Long blogId;<span class="comment">//评论的文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;<span class="comment">//父级评论id;</span></span><br><span class="line">    <span class="keyword">private</span> String pnickname;<span class="comment">//父级昵称</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; replyComments = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存储有关该id 的所有子评论</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis-设计"><a href="#Mybatis-设计" class="headerlink" title="Mybatis 设计"></a>Mybatis 设计</h2><p>利用Mybatis 的resultMap形成<strong>递归查询</strong></p><p><img src="/2020/08/09/%E5%B1%82%E7%BA%A7%E8%AF%84%E8%AE%BA%E7%9A%84%E5%AE%9E%E7%8E%B0Mybatis+Thymeleaf/1573959939496.png" alt="1573959939496"></p><p>查询出的结果可想而知id=1下有包含了id=2的,而2的包含了3和5的,层层往下,类似于病毒扩散,一传十,十传百!</p><h2 id="后台逻辑处理"><a href="#后台逻辑处理" class="headerlink" title="后台逻辑处理"></a>后台逻辑处理</h2><p>最终要把n深度的层级关系转化为同一级</p><p>首选声明一个成员变量<code>List&lt;Comment&gt; tempReplys ;</code>用于存储最终的第二级别评论,顶级评论有几条,他就会创建几个.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.列出一级评论</span></span><br><span class="line">       List&lt;Comment&gt; commentList = commentMapper.listCommentParentIsNull(blogId);</span><br><span class="line">       <span class="comment">//2.除一级以外的级联评论类似于一棵树,有多层</span></span><br><span class="line">       <span class="keyword">for</span> (Comment comment : commentList) &#123;</span><br><span class="line">           List&lt;Comment&gt; comments = commentMapper.listCommentById(comment.getId());</span><br><span class="line">           <span class="comment">//3.把上述的一级除外的评论,转化为二级评论放到一级评论commentList下的每个Comment的集合List&lt;Comment&gt;中</span></span><br><span class="line">           <span class="comment">//回复顶级评论的可能有多个所以要循环</span></span><br><span class="line">           <span class="keyword">for</span> (Comment c : comments) &#123;</span><br><span class="line">               System.out.println(c.toString());</span><br><span class="line">                tempReplys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">               chageToChildList(c);</span><br><span class="line"></span><br><span class="line">               comment.setReplyComments(tempReplys);<span class="comment">//添加到一级评论的List下形成只有两级的评论</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>如果学过数据结构与算法的的话,应该对这种代码很熟悉,就是递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于转化为二级集合,递归</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">chageToChildList</span><span class="params">(Comment comment)</span></span>&#123;</span><br><span class="line">       tempReplys.add(comment);</span><br><span class="line">       <span class="keyword">if</span>(comment.getReplyComments().size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (Comment c : comment.getReplyComments()) &#123;</span><br><span class="line">               chageToChildList(c);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>这些代码我都会在我的博客2.0版本中开源出来,在我的github上,大家可以参考!</strong></p><h2 id="回复功能"><a href="#回复功能" class="headerlink" title="回复功能"></a>回复功能</h2><p>这个功能就是添加,表单隐藏域有文章id和父评论id,显示域有内容,邮箱,昵称,总共5个关键属性提交到后台.</p><p>具体的功能可以去我的github找到博客2.0找具体的代码,注释写的很明了.</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 递归 </tag>
            
            <tag> Thymeleaf </tag>
            
            <tag> 评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟缓存的解决方法</title>
      <link href="/2020/08/09/%E4%B8%8D%E7%BB%8F%E5%B8%B8%E5%8F%98%E6%9B%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/08/09/%E4%B8%8D%E7%BB%8F%E5%B8%B8%E5%8F%98%E6%9B%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="不经常变更的数据-类似缓存-的解决方案"><a href="#不经常变更的数据-类似缓存-的解决方案" class="headerlink" title="不经常变更的数据(类似缓存)的解决方案"></a>不经常变更的数据(类似缓存)的解决方案</h1><p>由于SpringBoot项目中菜单,网站配置相关信息不经常变动,为了减轻数据库的负担,我考虑用了Redis,但是,我还得安装,想一想,决定用类似servlet中init方法的</p><p>用到注解@PostConstruct</p><a id="more"></a><h2 id="只执行一次init并放到一个静态变量中"><a href="#只执行一次init并放到一个静态变量中" class="headerlink" title="只执行一次init并放到一个静态变量中"></a>只执行一次init并放到一个静态变量中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IndexMapper IndexMapper;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> List&lt;Menu&gt; menuList;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"111111111111111"</span>);</span><br><span class="line">        menuList = IndexMapper.listMenu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了证明只执行一次我输出字符串111</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="keyword">final</span> List&lt;Menu&gt; menuList = IndexUtils.menuList;</span><br><span class="line">       model.addAttribute(<span class="string">"listMenu"</span>,menuList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//关于我</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/aboutme"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">aboutme</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="keyword">final</span> List&lt;Menu&gt; menuList = IndexUtils.menuList;</span><br><span class="line">       model.addAttribute(<span class="string">"listMenu"</span>,menuList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"aboutme"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//时间轴</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/time"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">time</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="keyword">final</span> List&lt;Menu&gt; menuList = IndexUtils.menuList;</span><br><span class="line">       model.addAttribute(<span class="string">"listMenu"</span>,menuList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"time"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>每次执行调用工具类中的变量就可以了</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上一篇下一篇功能的实现</title>
      <link href="/2020/08/09/%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%B8%80%E7%AF%87%E4%B8%8B%E4%B8%80%E7%AF%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/08/09/%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%B8%80%E7%AF%87%E4%B8%8B%E4%B8%80%E7%AF%87%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本来我想的是blog表中顺便记录上一篇下一篇文章的id，可嫌麻烦，或者id+1，-1？等会删除一篇文章时就不管用了</p><p>我找到了很简单的方法</p><a id="more"></a><h2 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下一篇： <span class="keyword">select</span> <span class="keyword">id</span>,title  <span class="keyword">from</span> blog <span class="keyword">where</span>  <span class="keyword">id</span>&gt; <span class="number">1</span>  <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line">上一篇： <span class="keyword">select</span> 所需字段  <span class="keyword">from</span> 表 <span class="keyword">where</span>  <span class="keyword">id</span>&lt; 当前<span class="keyword">id</span>  <span class="keyword">order</span> <span class="keyword">by</span>  <span class="keyword">id</span> <span class="keyword">desc</span>  <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="mybatis代码"><a href="#mybatis代码" class="headerlink" title="mybatis代码"></a>mybatis代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询上一篇文章--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBeforeBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">      select id,title  from blog where  id&gt; #&#123;id&#125;  limit 1;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--查询下一篇文章--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAfterBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">       select id,title  from blog where id <span class="symbol">&amp;lt;</span> #&#123;id&#125; order by  id desc  limit 1;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为数据库里id自增,新加进来的一定大一些,新加的文章(新文章)就是上一篇,反之同理</p><p>Mybatis 的&lt;会报错所以用了转义字符<code>&amp;lt;</code></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>没有上一篇下一篇的话就会报空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Blog <span class="title">findBeforeBlog</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        Blog beforeBlog = blogMapper.findBeforeBlog(id);</span><br><span class="line">        <span class="keyword">if</span> (beforeBlog==<span class="keyword">null</span>)&#123;</span><br><span class="line">            beforeBlog=<span class="keyword">new</span> Blog();</span><br><span class="line">            beforeBlog.setTitle(<span class="string">"没有上一篇了！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beforeBlog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下一篇同理</p><h2 id="Thymeleaf前端代码"><a href="#Thymeleaf前端代码" class="headerlink" title="Thymeleaf前端代码"></a>Thymeleaf前端代码</h2><p>为空那么id就是默认的0,就用javascript:void(0);意思是没有点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>上一篇：<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"$&#123;beforeBlog.id==0&#125;?'javascript:void(0);':@&#123;|/blog/$&#123;beforeBlog.id&#125;|&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;beforeBlog.title&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下一篇：<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"$&#123;afterBlog.id==0&#125;?'javascript:void(0);':@&#123;|/blog/$&#123;afterBlog.id&#125;|&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;afterBlog.title&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 功能 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板设置SSL配置HTTPS</title>
      <link href="/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/"/>
      <url>/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/</url>
      
        <content type="html"><![CDATA[<p>众所周知http无论用什么方式都无法避免传输信息的安全问题,SSL证书的产生才让信息传输实现真正安全,就是https,类似于中介,而且双方都是完全信任这个中介</p><a id="more"></a><h2 id="腾讯云中配置安全组开放443端口"><a href="#腾讯云中配置安全组开放443端口" class="headerlink" title="腾讯云中配置安全组开放443端口"></a>腾讯云中配置安全组开放443端口</h2><p><img src="/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/1570422782325.png" alt="1570422782325"></p><h2 id="宝塔配置SSL"><a href="#宝塔配置SSL" class="headerlink" title="宝塔配置SSL"></a>宝塔配置SSL</h2><p><img src="/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/1570422566773.png" alt="1570422566773"></p><p><img src="/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/1570422696978.png" alt="1570422696978"></p><h2 id="宝塔放行443端口"><a href="#宝塔放行443端口" class="headerlink" title="宝塔放行443端口"></a>宝塔放行443端口</h2><p><img src="/2020/08/09/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AESSL%E9%85%8D%E7%BD%AEHTTPS/1570422864954.png" alt="1570422864954"></p><h2 id="配置简直不要太简单"><a href="#配置简直不要太简单" class="headerlink" title="配置简直不要太简单!"></a>配置简直不要太简单!</h2>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题(回溯法)</title>
      <link href="/2020/08/09/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98(%E5%9B%9E%E6%BA%AF%E6%B3%95)/"/>
      <url>/2020/08/09/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98(%E5%9B%9E%E6%BA%AF%E6%B3%95)/</url>
      
        <content type="html"><![CDATA[<h2 id="八皇后游戏规则"><a href="#八皇后游戏规则" class="headerlink" title="八皇后游戏规则"></a>八皇后游戏规则</h2><p><strong>在8x8棋盘里有8个皇后 ,每一个皇后之间都不能在同一行,同一列,同一45度斜线</strong></p><h2 id="什么是回溯法"><a href="#什么是回溯法" class="headerlink" title="什么是回溯法"></a>什么是回溯法</h2><p><strong>我的理解就是暴力探索,每个点都去尝试一下,不行那就回头,直到达到目标</strong></p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>至少能知道每行,每列 都会有一个皇后</strong></p><p>所以由第1行第1列放第一个皇后开始探索,第二个放在第2行的第1列,判断游戏规则是否成立?</p><ul><li>成立则开始第三行的1-8列逐一试探,以此类推,找到8个为止,</li><li>不成立则回到上一步(回溯),换下一个点</li></ul><p>每次加入的皇后都要与前面的所有加入的皇后比较</p><p><img src="/2020/08/09/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98(%E5%9B%9E%E6%BA%AF%E6%B3%95)/1568208227205.png" alt="1568208227205"></p><h2 id="打印成功排列"><a href="#打印成功排列" class="headerlink" title="打印成功排列"></a>打印成功排列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断每次加入皇后是否合法"><a href="#判断每次加入皇后是否合法" class="headerlink" title="判断每次加入皇后是否合法"></a>判断每次加入皇后是否合法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断每个加入的皇后是否符合游戏规则,与之前所有的皇后比较</span></span><br><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//判断是否处于同一列 ,是否处于统一45度斜线</span></span><br><span class="line"><span class="keyword">if</span> (array[n]==array[i]||Math.abs(n-i)==Math.abs(array[n]-array[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归-回溯核心算法"><a href="#递归-回溯核心算法" class="headerlink" title="递归,回溯核心算法"></a>递归,回溯核心算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//此时n=8,8个皇后都摆满了</span></span><br><span class="line"><span class="keyword">if</span> (n==size) &#123;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总左往右,从下往上开始遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="comment">//从第一行第一列开始</span></span><br><span class="line">array[n]=i;</span><br><span class="line"><span class="comment">//从第二行第一列开始1到8格子都试探一边</span></span><br><span class="line"><span class="keyword">if</span> (judge(n)) &#123;</span><br><span class="line"><span class="comment">//成功换到第三行,以此类推</span></span><br><span class="line"> check(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果总共92种解法"><a href="#测试结果总共92种解法" class="headerlink" title="测试结果总共92种解法"></a>测试结果总共92种解法</h2><p>暴力运算了15720次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line">以下还有很多....</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 八皇后 </tag>
            
            <tag> 回溯法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf中img标签引入超链接的问题</title>
      <link href="/2020/08/09/Thymeleaf%E4%B8%ADimg%E6%A0%87%E7%AD%BE%E5%BC%95%E5%85%A5%E8%B6%85%E9%93%BE%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/Thymeleaf%E4%B8%ADimg%E6%A0%87%E7%AD%BE%E5%BC%95%E5%85%A5%E8%B6%85%E9%93%BE%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf中img标签引入超链接的问题"><a href="#Thymeleaf中img标签引入超链接的问题" class="headerlink" title="Thymeleaf中img标签引入超链接的问题"></a>Thymeleaf中img标签引入超链接的问题</h1><p>因为我把图片全部存储在七牛云,仅仅使用一个超链接,但是img标签th:src默认加上localhost:8080</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>   <span class="attr">th:src</span>=<span class="string">"$&#123;config.wechat_icon&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>导致路径变成了,访问就报错了</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/puu1qclkk.bkt.clouddn.com/xxxx"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实解决非常简单,但我查阅了各种资料,花了几个小时,只需要加上 <strong>||</strong> 就可以了!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>   <span class="attr">th:src</span>=<span class="string">"|$&#123;config.wechat_icon&#125;|"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>渲染得到的效果就是正常了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://puu1qclkk.bkt.clouddn.com/xxxx"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个问题可把我憋屈坏了!</p>]]></content>
      
      
      <categories>
          
          <category> Thymeleaf </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String常量池</title>
      <link href="/2020/08/09/String%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
      <url>/2020/08/09/String%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>常量池引起的对象之间的比较</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">"a"</span>;<span class="comment">//(1)</span></span><br><span class="line">String b=<span class="string">"a"</span>;</span><br><span class="line">System.out.println(a==b);<span class="comment">//true</span></span><br><span class="line">String ab=<span class="string">"a"</span>+<span class="string">"b"</span>;<span class="comment">//(2)</span></span><br><span class="line">String ab2=<span class="string">"ab"</span>;</span><br><span class="line">System.out.println(ab==ab2);<span class="comment">//true</span></span><br><span class="line">String aba=<span class="string">"a"</span>+<span class="string">"b"</span>+a;<span class="comment">//(3)</span></span><br><span class="line">String aba2=<span class="string">"aba"</span>;</span><br><span class="line">System.out.println(aba==aba2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Sring类final修饰的,所以java虚拟机会在编译的时候就会把字面量(字面量”a”那就是a)放到常量池中</p><p>常量池只能有一份一样的字面量,比如变量a在常量池中已经有一份了,那么变量b来的时候只是字面量”a”的引用,所以a和b 都是指向同一个空间,所以为true</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>这个和上面是一样的道理</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>因为变量a是变量,所以不确定aba变量,默认new一份,既然是new 的当然不一样了,那就是false了</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String,StringBuilder和StringBuffer</title>
      <link href="/2020/08/09/String,StringBuilder%E5%92%8CStringBuffer/"/>
      <url>/2020/08/09/String,StringBuilder%E5%92%8CStringBuffer/</url>
      
        <content type="html"><![CDATA[<h2 id="String是不可变的"><a href="#String是不可变的" class="headerlink" title="String是不可变的"></a>String是不可变的</h2><p>因为String 方法底层是用 final修饰的char [] ,因此<code>String str=&quot;c&quot;+&quot;b&quot;</code>这个拼接字符串是不会产生垃圾的,</p><a id="more"></a><p>但如果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="string">"c"</span>;</span><br><span class="line">a+=<span class="string">"b"</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>-栈</th><th>-堆</th></tr></thead><tbody><tr><td>str</td><td>“c”</td></tr><tr><td></td><td>“b”</td></tr><tr><td></td><td>“cb”</td></tr><tr><td></td><td></td></tr></tbody></table><p>最终指向”cb” 这就会产生垃圾</p><p>其实有三个堆空间,分别是 “cb”, “c”,”b”,而”c”和”b”变成了垃圾,出现了垃圾空间</p><h2 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h2><p>内容可以改变,底层使用char[]</p><p>他们拼接字符串,只需创建一个对象,是可变的</p><p>比如 StringBuilder a=new StringBuilder();</p><p>a.append(“a”);a.append(“b”);</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>StringBuilder</td><td>StringBuffer</td></tr><tr><td>线程不安全</td><td>线程安全</td></tr><tr><td>效率高</td><td>效率低</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM实现Layui分页</title>
      <link href="/2020/08/09/SSM%E5%AE%9E%E7%8E%B0Layui%E5%88%86%E9%A1%B5/"/>
      <url>/2020/08/09/SSM%E5%AE%9E%E7%8E%B0Layui%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="论那些年layui踩过的坑"><a href="#论那些年layui踩过的坑" class="headerlink" title="论那些年layui踩过的坑"></a>论那些年layui踩过的坑</h2><a id="more"></a><h2 id="layui分页的特点-加载完文档就异步请求后台-返回json数据加载"><a href="#layui分页的特点-加载完文档就异步请求后台-返回json数据加载" class="headerlink" title="layui分页的特点,加载完文档就异步请求后台,返回json数据加载"></a>layui分页的特点,加载完文档就异步请求后台,返回json数据加载</h2><p><a href="https://www.layui.com/doc/modules/table.html" target="_blank" rel="noopener">Layui官方文档</a> </p><h2 id="只要在-table-render中开启分页-page-true异步请求是自动加上两个参数-在后台接受即可"><a href="#只要在-table-render中开启分页-page-true异步请求是自动加上两个参数-在后台接受即可" class="headerlink" title="只要在 table.render中开启分页 page: true异步请求是自动加上两个参数,在后台接受即可"></a><font color="#FF4040">只要在 table.render中开启分页 page: true异步请求是自动加上两个参数,在后台接受即可</font></h2><p><img src="/2020/08/09/SSM%E5%AE%9E%E7%8E%B0Layui%E5%88%86%E9%A1%B5/1558056732588.png" alt="1558056732588"></p><h2 id="Layui的json格式要求"><a href="#Layui的json格式要求" class="headerlink" title="Layui的json格式要求:"></a>Layui的json格式要求:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"total"</span>: <span class="number">180</span>, </span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"item"</span>: [&#123;&#125;, &#123;&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所以SpringMVC中这样写-首先你得有PageBean实体类-在最后面我附上了我的PageBean实体类"><a href="#所以SpringMVC中这样写-首先你得有PageBean实体类-在最后面我附上了我的PageBean实体类" class="headerlink" title="所以SpringMVC中这样写,首先你得有PageBean实体类,在最后面我附上了我的PageBean实体类"></a>所以SpringMVC中这样写,首先你得有PageBean实体类,在最后面我附上了我的PageBean实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/library/listBook"</span>, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">listBook</span><span class="params">(@RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer page,</span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(value = <span class="string">"limit"</span>, defaultValue = <span class="string">"6"</span>)</span> Integer limit,PageBean pageBean,Model model) </span>&#123;</span><br><span class="line">        <span class="comment">//封装进PageBean中</span></span><br><span class="line">pageBean.setCurrentPage(page);</span><br><span class="line">pageBean.setPageSize(limit);</span><br><span class="line"><span class="comment">// 转化为json</span></span><br><span class="line">List&lt;Bookinfo&gt; list = bookService.listAllBook(pageBean);</span><br><span class="line">PageBean pb=bookService.getPb();</span><br><span class="line"><span class="comment">// list转成json</span></span><br><span class="line">JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line"><span class="comment">// Layui table 组件要求返回的格式</span></span><br><span class="line">obj.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">obj.put(<span class="string">"msg"</span>, <span class="string">""</span>);</span><br><span class="line">obj.put(<span class="string">"count"</span>,pb.getTotalCount());</span><br><span class="line">obj.put(<span class="string">"data"</span>, list);</span><br><span class="line"><span class="keyword">return</span> obj.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-json发送到浏览器中文乱码问题-在SpringMVC控制层的方法上加入"><a href="#1-json发送到浏览器中文乱码问题-在SpringMVC控制层的方法上加入" class="headerlink" title="1.json发送到浏览器中文乱码问题,在SpringMVC控制层的方法上加入"></a>1.json发送到浏览器中文乱码问题,在SpringMVC控制层的方法上加入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"省略"</span>, </span><br><span class="line">produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-关于带搜索功能的分页-因此我把搜索关键字段也放入的PageBean分页类中"><a href="#2-关于带搜索功能的分页-因此我把搜索关键字段也放入的PageBean分页类中" class="headerlink" title="2,关于带搜索功能的分页,因此我把搜索关键字段也放入的PageBean分页类中"></a>2,关于带搜索功能的分页,因此我把搜索关键字段也放入的PageBean分页类中</h2><p>我这里设置了,三个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String bname;<span class="comment">// 书名字</span></span><br><span class="line"><span class="keyword">private</span> String author;<span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> String cname;<span class="comment">// 类别</span></span><br></pre></td></tr></table></figure><p>只要开启了<a href="https://www.layui.com/demo/table/reload.html" target="_blank" rel="noopener">Layui的重载</a><br>就可以异步关键词搜索</p><p>html中加入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demoTable layui-form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">name</span>=<span class="string">"bname"</span> <span class="attr">id</span>=<span class="string">"bname"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>  <span class="attr">placeholder</span>=<span class="string">"请输入书名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">id</span>=<span class="string">"author"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">placeholder</span>=<span class="string">"请输入作者"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-inline"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">id</span>=<span class="string">"cname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择书本类别<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"010"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"021"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0571"</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span> <span class="attr">data-type</span>=<span class="string">"reload"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js中加入,先获取输入框的值,<font color="#FF4040"><strong>‘testReload’这个对应,table.render的id: ‘testReload’</strong></font>,没有的话必须加上,where就是异步提交的三个参数,我在后台用PageBean接受,因为它会自动映射进相应的字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = layui.$, active = &#123;</span><br><span class="line">   reload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> bname = $(<span class="string">'#bname'</span>);</span><br><span class="line">      <span class="keyword">var</span> author = $(<span class="string">'#author'</span>);</span><br><span class="line">      <span class="keyword">var</span> cname = $(<span class="string">'#cname'</span>);</span><br><span class="line">      <span class="comment">//执行重载</span></span><br><span class="line">      table.reload(<span class="string">'testReload'</span>, &#123;</span><br><span class="line">      <span class="comment">//一定要加不然乱码</span></span><br><span class="line">    method: <span class="string">'post'</span></span><br><span class="line">        ,<span class="attr">page</span>: &#123;</span><br><span class="line">          curr: <span class="number">1</span> <span class="comment">//重新从第 1 页开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="comment">//bname表示传到后台的参数,bname.val()表示具体数据</span></span><br><span class="line">          bname: bname.val(),</span><br><span class="line">          author: author.val(),</span><br><span class="line">          cname: cname.val(),</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  $(<span class="string">'.demoTable .layui-btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = $(<span class="keyword">this</span>).data(<span class="string">'type'</span>);</span><br><span class="line">    active[type] ? active[type].call(<span class="keyword">this</span>) : <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/08/09/SSM%E5%AE%9E%E7%8E%B0Layui%E5%88%86%E9%A1%B5/1558058966637.png" alt="1558058966637"></p><h2 id="PageBean实体类-可以根据需求把数据List也封装进去"><a href="#PageBean实体类-可以根据需求把数据List也封装进去" class="headerlink" title="PageBean实体类,可以根据需求把数据List也封装进去"></a>PageBean实体类,可以根据需求把数据List也封装进去</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当前页数</span></span><br><span class="line"><span class="keyword">private</span> Integer currentPage;</span><br><span class="line"><span class="comment">// 总记录数</span></span><br><span class="line"><span class="keyword">private</span> Integer totalCount;</span><br><span class="line"><span class="comment">// 每页显示条数</span></span><br><span class="line"><span class="keyword">private</span> Integer pageSize;</span><br><span class="line"><span class="comment">// 总页数</span></span><br><span class="line"><span class="keyword">private</span> Integer totalPage;</span><br><span class="line"><span class="comment">// 起始索引</span></span><br><span class="line"><span class="keyword">private</span> Integer index;</span><br><span class="line"><span class="comment">// 搜索条件</span></span><br><span class="line"><span class="keyword">private</span> String bname;<span class="comment">// 书名字</span></span><br><span class="line"><span class="keyword">private</span> String author;<span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> String cname;<span class="comment">// 类别</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">(Integer currentPage, Integer totalCount, Integer pageSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentPage == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如页面没有指定显示那一页.显示第一页.</span></span><br><span class="line"><span class="keyword">this</span>.currentPage = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.pageSize == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果每页显示条数没有指定,默认每页显示3条</span></span><br><span class="line"><span class="keyword">this</span>.pageSize = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算总页数</span></span><br><span class="line"><span class="keyword">this</span>.totalPage = (<span class="keyword">this</span>.totalCount + <span class="keyword">this</span>.pageSize - <span class="number">1</span>) / <span class="keyword">this</span>.pageSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前页数是否超出范围</span></span><br><span class="line"><span class="comment">// 不能小于1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentPage &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.currentPage = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能大于总页数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentPage &gt; <span class="keyword">this</span>.totalPage) &#123;</span><br><span class="line"><span class="keyword">this</span>.currentPage = <span class="keyword">this</span>.totalPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 计算起始索引</span></span><br><span class="line"><span class="comment">//public int getStart() &#123;</span></span><br><span class="line"><span class="comment">//return (this.currentPage - 1) * this.pageSize;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> currentPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(Integer currentPage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> totalCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(Integer totalCount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(Integer pageSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> totalPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Integer totalPage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.author = author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCname</span><span class="params">(String cname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cname = cname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bname = bname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.currentPage - <span class="number">1</span>) * <span class="keyword">this</span>.pageSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(Integer index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.index = index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"PageBean [currentPage="</span> + currentPage + <span class="string">", totalCount="</span> + totalCount + <span class="string">", pageSize="</span> + pageSize</span><br><span class="line">+ <span class="string">", totalPage="</span> + totalPage + <span class="string">", index="</span> + index + <span class="string">", bname="</span> + bname + <span class="string">", author="</span> + author</span><br><span class="line">+ <span class="string">", cname="</span> + cname + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动注入属性的诡异事件</title>
      <link href="/2020/08/09/SpringBoot%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AF%A1%E5%BC%82%E4%BA%8B%E4%BB%B6/"/>
      <url>/2020/08/09/SpringBoot%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AF%A1%E5%BC%82%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在写项目时遇到的诡异属性注入事件,因为标签的id集合用逗号分割的字符串表示,在开发此功能时发现的一个离奇bug</p><a id="more"></a><p>在写项目时遇到的诡异属性注入事件</p><p>比如下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加或者修改文章</span></span><br><span class="line">   <span class="meta">@PostMapping</span>(<span class="string">"/blogs"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(Blog blog)</span> </span>&#123;</span><br><span class="line">       System.out.println(blog.getTagIds());<span class="comment">//0</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/admin/blogs"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>blog实体类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String tagIds;<span class="comment">//标签的id字符串集合,用于业务</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getTagIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTagIds</span><span class="params">(String tagIds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagIds = tagIds;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>比如前台传来数据是<strong>字符串</strong><code>1,2,3</code>但是blog实体类中的tagIds属性自动注入的值竟然是<code>0,1,2,3</code>,我搞不明白怎么会这么神奇,但是调用<code>getTagIds()</code>输出的却是<code>0</code></p><p>很疑惑,或许得由将来的我来解答了!</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 诡异 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目部署到Linux服务器</title>
      <link href="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>不知道为什么宝塔面板部署SpringBoot项目的时候会报502错误</p><p>但是java web项目就没有问题,所以我直接在Linux上操作了</p><a id="more"></a><h2 id="先把SpringBoot项目打包jar"><a href="#先把SpringBoot项目打包jar" class="headerlink" title="先把SpringBoot项目打包jar"></a>先把SpringBoot项目打包jar</h2><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563099348042.png" alt="1563099348042"></p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563099057907.png" alt="1563099057907"></p><h2 id="把jar包上传到Linux服务器"><a href="#把jar包上传到Linux服务器" class="headerlink" title="把jar包上传到Linux服务器"></a>把jar包上传到Linux服务器</h2><p>用XShell软件上传,或者用服务器的宝塔面板,上传完成</p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563098823015.png" alt="1563098823015"></p><h3 id="先进入所在的目录后运行java-jar-demo-0-0-1-SNAPSHOT-jar"><a href="#先进入所在的目录后运行java-jar-demo-0-0-1-SNAPSHOT-jar" class="headerlink" title="先进入所在的目录后运行java -jar demo-0.0.1-SNAPSHOT.jar"></a>先进入所在的目录后运行java -jar demo-0.0.1-SNAPSHOT.jar</h3><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563098862780.png" alt="1563098862780"></p><p>此时就可以用公网ip:8080/访问了</p><p>因为我已经把域名解析到我的主机了所以我可以用域名访问</p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563099263801.png" alt="1563099263801"></p><p>但是这个关闭了命令控制台就关闭了</p><h2 id="保持项目一直在服务器运行"><a href="#保持项目一直在服务器运行" class="headerlink" title="保持项目一直在服务器运行"></a>保持项目一直在服务器运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar demo-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563101365721.png" alt="1563101365721"></p><p>这就是运行结果,这样就说明成功了</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>当然得进入目录,查看日志了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure><h2 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563102365099.png" alt="1563102365099"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 3346</span><br></pre></td></tr></table></figure><p>完成!</p><h2 id="去掉8080端口"><a href="#去掉8080端口" class="headerlink" title="去掉8080端口"></a>去掉8080端口</h2><p>到宝塔面板</p><p>添加站点</p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563195289461.png" alt="1563195289461"></p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563195342100.png" alt="1563195342100"></p><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1563195438494.png" alt="1563195438494"></p><h2 id="现在就可以把8080去掉了"><a href="#现在就可以把8080去掉了" class="headerlink" title="现在就可以把8080去掉了"></a><strong>现在就可以把8080去掉了</strong></h2><h2 id="关于数据库的问题"><a href="#关于数据库的问题" class="headerlink" title="关于数据库的问题"></a>关于数据库的问题</h2><p><img src="/2020/08/09/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/1565958505577.png" alt="1565958505577"></p><p>如果出现Unknown Database 应该是 数据库版本或者数据库驱动出现问题</p><p><code>com.mysql.cj.jdbc.Driver</code>改成<code>com.mysql.jdbc.Driver</code></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot添加缓存</title>
      <link href="/2020/08/09/SpringBoot%E6%B7%BB%E5%8A%A0%E7%BC%93%E5%AD%98/"/>
      <url>/2020/08/09/SpringBoot%E6%B7%BB%E5%8A%A0%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot添加缓存"><a href="#SpringBoot添加缓存" class="headerlink" title="SpringBoot添加缓存"></a>SpringBoot添加缓存</h1><p>博客项目中因为文章写一次之后基本不变了,这种不经常变更但是经常使用的数据,最适合缓存了,缓存是保存使用者的内存中.</p><a id="more"></a><h2 id="1-pom-xml加入依赖"><a href="#1-pom-xml加入依赖" class="headerlink" title="1.pom.xml加入依赖"></a>1.pom.xml加入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Service层加入缓存注解"><a href="#2-Service层加入缓存注解" class="headerlink" title="2.Service层加入缓存注解"></a>2.Service层加入缓存注解</h2><h3 id="根据id查询文章"><a href="#根据id查询文章" class="headerlink" title="根据id查询文章"></a>根据id查询文章</h3><p>cacheNames是自定义的,第一次命名后,以后都会直接用这个缓存,而不会进入方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span>(cacheNames = <span class="string">"findBlogById"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Blog <span class="title">findBlogById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"缓存测试"</span>);</span><br><span class="line">    <span class="keyword">return</span>  blogMapper.findBlogById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h3><p>根据id更新缓存同时更新数据库,blog是更新的变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CachePut</span>(cacheNames = <span class="string">"findBlogById"</span>, key = <span class="string">"#blog.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editBlog</span><span class="params">(Blog blog)</span> </span>&#123;</span><br><span class="line">    blogMapper.editBlog(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><p>根据id删除文章的同时删除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"findBlogById"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBlog</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    blogMapper.delBlog(id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在application启动类里加上注解-EnableCaching"><a href="#在application启动类里加上注解-EnableCaching" class="headerlink" title="在application启动类里加上注解@EnableCaching"></a>在application启动类里加上注解<code>@EnableCaching</code></h3>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现网站的ip访问数和总浏览量</title>
      <link href="/2020/08/09/SpringBoot%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E7%9A%84ip%E8%AE%BF%E9%97%AE%E6%95%B0%E5%92%8C%E6%80%BB%E6%B5%8F%E8%A7%88%E9%87%8F/"/>
      <url>/2020/08/09/SpringBoot%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E7%9A%84ip%E8%AE%BF%E9%97%AE%E6%95%B0%E5%92%8C%E6%80%BB%E6%B5%8F%E8%A7%88%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="用到了切面技术-AOP"><a href="#用到了切面技术-AOP" class="headerlink" title="用到了切面技术(AOP)"></a>用到了切面技术(AOP)</h2><p><strong>切面是什么?</strong>:举例乘动车</p><a id="more"></a><ul><li><p><strong>@Before</strong>类似于过安检,检查大包小包,金属探测器检查全身</p></li><li><p>乘车过程</p></li><li><p><strong>-@After</strong>到达站点时需要检票出站</p></li><li><p><strong>@AfterReturning</strong>出站成功检票器,记录下了你的相关信息,</p></li><li><p><strong>@AfterThrowing</strong>检票失败,异常</p></li></ul><h2 id="1-编写IP访问类"><a href="#1-编写IP访问类" class="headerlink" title="1.编写IP访问类"></a>1.编写IP访问类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLog</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String url;<span class="comment">//访问地址</span></span><br><span class="line">        <span class="keyword">private</span> String ip;<span class="comment">//访问ip</span></span><br><span class="line">        <span class="keyword">private</span> String classMethod;<span class="comment">//访问方法</span></span><br><span class="line">        <span class="keyword">private</span> Object[] args;<span class="comment">//参数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RequestLog</span><span class="params">(String url, String ip, String classMethod, Object[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">            <span class="keyword">this</span>.classMethod = classMethod;</span><br><span class="line">            <span class="keyword">this</span>.args = args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;"</span> +</span><br><span class="line">                    <span class="string">"url='"</span> + url + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", ip='"</span> + ip + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", classMethod='"</span> + classMethod + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", args="</span> + Arrays.toString(args) +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-切面实现日志功能"><a href="#2-切面实现日志功能" class="headerlink" title="2.切面实现日志功能"></a>2.切面实现日志功能</h2><p>切面主要用来实现日志功能,方法顺序是@Before-&gt; @After-&gt;@AfterReturning</p><p>日志保存的位置在yml或者properties中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"><span class="comment">// 意思是cn.coderzhx.blog2.web包下的所有类,所有方法,参数不限</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.coderzhx.blog2.web.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        String ip = request.getRemoteAddr();</span><br><span class="line">        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        RequestLog requestLog = <span class="keyword">new</span> RequestLog(url, ip, classMethod, args);</span><br><span class="line">        logger.info(<span class="string">"Request : &#123;&#125;"</span>, requestLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        logger.info("--------doAfter--------");</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//记录返回的视图</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"result"</span>,pointcut = <span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterRuturn</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Result : &#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现ip访问次数功能"><a href="#3-实现ip访问次数功能" class="headerlink" title="3.实现ip访问次数功能"></a>3.实现ip访问次数功能</h2><ul><li>1.服务器启动执行init()从数据库获取ip和该ip访问次数,放入HashMap中,ip为键,访问次数为值.</li><li>2.访问网站获取ip,如果HashMap中有该ip则次数+1,没有则put(ip,1)</li><li>因为hashMap键不能重复,则map.size()表示有多少ip访问</li><li>把所有的map.value()相加就是总浏览量了</li></ul><h2 id="4-在上述代码中添加"><a href="#4-在上述代码中添加" class="headerlink" title="4.在上述代码中添加"></a>4.在上述代码中添加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ip地址为键,Integer为访问次数</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> HashMap&lt;String, Long&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>设置为Long的目的是放置访问次数过大超出Integer的范围,为将来着想</strong>在doBefore中添加下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Long i= map.get(ip);<span class="comment">//获取出现次数</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="keyword">null</span>) &#123;<span class="comment">//空表示map没有该ip</span></span><br><span class="line">    map.put(ip, <span class="number">1L</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//有则次数+1</span></span><br><span class="line">    map.put(ip, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    服务器关闭时,把所有的ip和访问次数放入数据库            </p><p>​    再次开启时则获取全部放入HashMap赋值给上面的类LogAspect中的map,</p><p>这个功能会在我的博客2.0版本中开源,1.0版本中计算ip个访问次数有bug           </p>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot设置虚拟访问路径</title>
      <link href="/2020/08/09/SpringBoot%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/08/09/SpringBoot%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网站的图片上传到Linux后,发现访问的时候404,考虑到Linux图片的访问权限,修改chmod  777 赋予所有权限,发现还是不行,经过一个小时终于发现问题所在</p></blockquote><a id="more"></a><p>上传图片就不说了,博客中搜索<code>上传图片</code>关键字第一篇就是了</p><h2 id="通过url直接访问图片"><a href="#通过url直接访问图片" class="headerlink" title="通过url直接访问图片"></a>通过url直接访问图片</h2><p>需要写一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebPathFigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.uploadfolder&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uploadfolder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;  </span><br><span class="line"> registry.addResourceHandler(<span class="string">"/upload/**"</span>).addResourceLocations(<span class="string">"file:"</span>+uploadfolder);</span><br><span class="line"> <span class="comment">//linux下的配置 uploadfolder=/usr/upoad/</span></span><br><span class="line">       <span class="comment">//windows下是"file:///"  uploadfolder=D://upload/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addResourceHandler</code>表示图片的访问路径<code>ip:端口/upload/...</code></p><p>``addResourceLocations`表示图片上传到这个目录</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 图片上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置markdown上传图片返回url</title>
      <link href="/2020/08/09/SpringBoot%E9%85%8D%E7%BD%AEmarkdown%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%BF%94%E5%9B%9Eurl/"/>
      <url>/2020/08/09/SpringBoot%E9%85%8D%E7%BD%AEmarkdown%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%BF%94%E5%9B%9Eurl/</url>
      
        <content type="html"><![CDATA[<p>1.SpringBoot写方法上传文件到本地某路径文件夹下 2.SpringBoot配置映射这个路径</p><a id="more"></a><h2 id="markdown的图片上传表单如下"><a href="#markdown的图片上传表单如下" class="headerlink" title="markdown的图片上传表单如下"></a>markdown的图片上传表单如下</h2><p><img src="/2020/08/09/SpringBoot%E9%85%8D%E7%BD%AEmarkdown%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%BF%94%E5%9B%9Eurl/1572148923003.png" alt="1572148923003"></p><h2 id="SpringBoot上传图片方法"><a href="#SpringBoot上传图片方法" class="headerlink" title="SpringBoot上传图片方法"></a>SpringBoot上传图片方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.uploadfolder&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uploadfolder;<span class="comment">//读取配置文件的存放文件路径</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">"/admin/uploadImg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">uploadImg</span><span class="params">(HttpServletRequest request, @RequestParam(value = <span class="string">"editormd-image-file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//需要上传的路径</span></span><br><span class="line">        String rootPath = uploadfolder;</span><br><span class="line">        <span class="comment">//Calendar.getInstance()是获取一个Calendar对象并可以进行时间的计算，时区的指定</span></span><br><span class="line">        Calendar date = Calendar.getInstance();</span><br><span class="line">        <span class="comment">//获得日期路径,MONTH个值的初始值是0，因此我们要用它来表示正确的月份时就需要加1。</span></span><br><span class="line">        File dateFile = <span class="keyword">new</span> File(date.get(Calendar.YEAR)+<span class="string">"/"</span>+(date.get(Calendar.MONTH)+<span class="number">1</span>)+<span class="string">"/"</span>+(date.get(Calendar.DATE)));</span><br><span class="line">        <span class="comment">//获得文件名字</span></span><br><span class="line">        String originalFile = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//得到完整路径名</span></span><br><span class="line">        File newFile = <span class="keyword">new</span> File(rootPath+ File.separator+dateFile+File.separator+originalFile);</span><br><span class="line">        <span class="comment">//文件不存在就创建</span></span><br><span class="line">        <span class="keyword">if</span>(!newFile.getParentFile().exists())&#123;</span><br><span class="line">            newFile.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.transferTo(newFile);</span><br><span class="line">        String url=<span class="string">"/upload/"</span>+date.get(Calendar.YEAR)+<span class="string">"/"</span>+(date.get(Calendar.MONTH)+<span class="number">1</span>)+<span class="string">"/"</span>+date.get(Calendar.DATE)+<span class="string">"/"</span>+file.getOriginalFilename();</span><br><span class="line">        JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        obj.put(<span class="string">"success"</span>,<span class="number">1</span>);</span><br><span class="line">        obj.put(<span class="string">"message"</span>, <span class="string">"上传成功"</span>);</span><br><span class="line">        obj.put(<span class="string">"url"</span>, url);</span><br><span class="line">       <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        obj.put(<span class="string">"success"</span>,<span class="number">0</span>);</span><br><span class="line">        obj.put(<span class="string">"message"</span>, <span class="string">"上传失败"</span>);</span><br><span class="line">        obj.put(<span class="string">"url"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传文件存放</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">uploadfolder:</span> <span class="string">D://upload/</span></span><br></pre></td></tr></table></figure><h2 id="配置路径映射-关键"><a href="#配置路径映射-关键" class="headerlink" title="配置路径映射(关键)"></a>配置路径映射(关键)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebPathFigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.uploadfolder&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uploadfolder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/upload/**"</span>).addResourceLocations(<span class="string">"file:///"</span>+uploadfolder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linux系统是没有<code>///</code>就只有<code>file:</code></p><blockquote><p>关于JSONObject需要添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    JSONObject --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot加入静态资源无法访问</title>
      <link href="/2020/08/09/SpringBoot%E5%8A%A0%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/08/09/SpringBoot%E5%8A%A0%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>我在项目里加入了一些图标,却不起作用3</p><p>其实只要在新加入的静态资源右键Recomplite就行了</p><p><img src="/2020/08/09/SpringBoot%E5%8A%A0%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/1563867257951.png" alt="1563867257951"></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成MarkDown编辑器</title>
      <link href="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成MarkDown编辑器"><a href="#SpringBoot集成MarkDown编辑器" class="headerlink" title="SpringBoot集成MarkDown编辑器"></a>SpringBoot集成MarkDown编辑器</h1><h2 id="下载文件-editor-md-master"><a href="#下载文件-editor-md-master" class="headerlink" title="下载文件 editor.md-master"></a>下载文件 <a href="https://github.com/pandao/editor.md/archive/master.zip" target="_blank" rel="noopener">editor.md-master</a></h2><h2 id="引入Resources"><a href="#引入Resources" class="headerlink" title="引入Resources"></a>引入Resources</h2><a id="more"></a><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564636471320.png" alt="1564636471320"></p><h3 id="注意要Rebuild一下，否则可能加载不出"><a href="#注意要Rebuild一下，否则可能加载不出" class="headerlink" title="注意要Rebuild一下，否则可能加载不出"></a>注意要Rebuild一下，否则可能加载不出</h3><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564636503931.png" alt="1564636503931"></p><h3 id="templates中加入full-html"><a href="#templates中加入full-html" class="headerlink" title="templates中加入full.html"></a>templates中加入full.html</h3><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564636680624.png" alt="1564636680624"></p><h3 id="注意里边的静态资源引入路径-和js里的path"><a href="#注意里边的静态资源引入路径-和js里的path" class="headerlink" title="注意里边的静态资源引入路径,和js里的path"></a>注意里边的静态资源引入路径,和js里的path</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/editor.md-master/examples/css/style.css&#125;"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../css/editormd.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/editor.md-master/css/editormd.css&#125;"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"https://pandao.github.io/editor.md/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/jquery.min.js"</span> th:src=<span class="string">"@&#123;/editor.md-master/examples/js/jquery.min.js&#125;"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">       &lt;script src="../</span>editormd.js<span class="string">"  th:src="</span>@&#123;/editor.md-master/editormd.js&#125;<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> testEditor;            </span><br><span class="line">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;               </span><br><span class="line">                $.<span class="keyword">get</span>('/editor.md-master/examples/test.md', function(md)&#123;</span><br><span class="line">                    testEditor = editormd(<span class="string">"test-editormd"</span>, &#123;</span><br><span class="line">                        width: <span class="string">"90%"</span>,</span><br><span class="line">                        height: <span class="number">740</span>,</span><br><span class="line">                        <span class="comment">//注意这个路径</span></span><br><span class="line">                        path : <span class="string">'../../../editor.md-master/lib/'</span>,</span><br><span class="line">                        ...........</span><br><span class="line">                      imageUploadURL : <span class="string">"/admin/uploadImg"</span>,</span><br></pre></td></tr></table></figure><h2 id="集成Markdown编辑器并解决图片上传问题"><a href="#集成Markdown编辑器并解决图片上传问题" class="headerlink" title="集成Markdown编辑器并解决图片上传问题"></a>集成Markdown编辑器并解决图片上传问题</h2><h3 id="图片不能直接复制在编辑器上，所以得手动添加"><a href="#图片不能直接复制在编辑器上，所以得手动添加" class="headerlink" title="图片不能直接复制在编辑器上，所以得手动添加"></a>图片不能直接复制在编辑器上，所以得手动添加</h3><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564644349997.png" alt="1564644349997"></p><p>action就是 imageUploadURL的值</p><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564491022305.png" alt="1564491022305"></p><p>后台,返回的路径自己随意设置,只要不被拦截就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">   BlogService blogService;</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/admin/uploadImg"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String  <span class="title">uploadImg</span><span class="params">(HttpServletRequest request, @RequestParam(value = <span class="string">"editormd-image-file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获得web项目的全路径</span></span><br><span class="line">           String rootPath = request.getSession().getServletContext().getRealPath(<span class="string">"/resource/upload/"</span>);</span><br><span class="line">           <span class="comment">//Calendar.getInstance()是获取一个Calendar对象并可以进行时间的计算，时区的指定</span></span><br><span class="line">           Calendar date = Calendar.getInstance();</span><br><span class="line">           <span class="comment">//获得日期路径,MONTH个值的初始值是0，因此我们要用它来表示正确的月份时就需要加1。</span></span><br><span class="line">           File dateFile = <span class="keyword">new</span> File(date.get(Calendar.YEAR)+<span class="string">"/"</span>+(date.get(Calendar.MONTH)+<span class="number">1</span>)+<span class="string">"/"</span>+(date.get(Calendar.DATE)));</span><br><span class="line">           <span class="comment">//获得文件最初的路径</span></span><br><span class="line">           String originalFile = file.getOriginalFilename();</span><br><span class="line">           <span class="comment">//得到完整路径名</span></span><br><span class="line">           File newFile = <span class="keyword">new</span> File(rootPath+File.separator+dateFile+File.separator+originalFile);</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*文件不存在就创建*/</span></span><br><span class="line">           <span class="keyword">if</span>(!newFile.getParentFile().exists())&#123;</span><br><span class="line">               newFile.getParentFile().mkdirs();</span><br><span class="line">           &#125;</span><br><span class="line">           file.transferTo(newFile);</span><br><span class="line">           String url=<span class="string">"/resource/upload/"</span>+date.get(Calendar.YEAR)+<span class="string">"/"</span>+(date.get(Calendar.MONTH)+<span class="number">1</span>)+<span class="string">"/"</span>+date.get(Calendar.DATE)+<span class="string">"/"</span>+file.getOriginalFilename();</span><br><span class="line">           <span class="keyword">return</span> LayuiJSON.jsonImg(<span class="number">1</span>,<span class="string">"上传成功"</span>,url);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">return</span> LayuiJSON.jsonImg(<span class="number">0</span>,<span class="string">"上传失败"</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>LayuiJSON工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//markdown图片上传</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonImg</span><span class="params">(<span class="keyword">int</span> success,String msg,String url)</span>  </span>&#123;</span><br><span class="line">       JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">       obj.put(<span class="string">"success"</span>,success);</span><br><span class="line">       obj.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">       obj.put(<span class="string">"url"</span>, url);</span><br><span class="line">       <span class="keyword">return</span> obj.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>解决了</p><h2 id="页面渲染html"><a href="#页面渲染html" class="headerlink" title="页面渲染html"></a>页面渲染html</h2><h3 id="页面引入静态资源-jQuery注意要引入"><a href="#页面引入静态资源-jQuery注意要引入" class="headerlink" title="页面引入静态资源,jQuery注意要引入"></a>页面引入静态资源,jQuery注意要引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/editor.md-master/css/editormd.preview.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/marked.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/prettify.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/raphael.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/underscore.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/sequence-diagram.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/flowchart.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/lib/jquery.flowchart.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editor.md-master/editormd.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渲染md格式"><a href="#渲染md格式" class="headerlink" title="渲染md格式"></a>渲染md格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于显示md编辑器的md格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"test-editormd-view"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"display: none;"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;blogById.content&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js开启渲染md"><a href="#js开启渲染md" class="headerlink" title="js开启渲染md"></a>js开启渲染md</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> testEditormdView;</span><br><span class="line">          testEditormdView = editormd.markdownToHTML(<span class="string">"test-editormd-view"</span>, &#123;</span><br><span class="line">            htmlDecode      : <span class="string">"style,script,iframe"</span>,  <span class="comment">// you can filter tags decode</span></span><br><span class="line">            emoji           : <span class="literal">true</span>,</span><br><span class="line">            taskList        : <span class="literal">true</span>,</span><br><span class="line">            tex             : <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">            flowChart       : <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">            sequenceDiagram : <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后台编辑页面"><a href="#后台编辑页面" class="headerlink" title="后台编辑页面"></a>后台编辑页面</h3><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564651022264.png" alt="1564651022264"></p><h3 id="前台显示页面"><a href="#前台显示页面" class="headerlink" title="前台显示页面"></a>前台显示页面</h3><p><img src="/2020/08/09/SpringBoot%E9%9B%86%E6%88%90MarkDown%E7%BC%96%E8%BE%91%E5%99%A8/1564651617028.png" alt="1564651617028"></p><p>可以了,如果不行那就是资源没有正确引入了</p>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro验证配置</title>
      <link href="/2020/08/09/Shiro%E9%AA%8C%E8%AF%81%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/09/Shiro%E9%AA%8C%E8%AF%81%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml添加依赖"><a href="#pom-xml添加依赖" class="headerlink" title="pom.xml添加依赖"></a>pom.xml添加依赖</h2><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加对shior的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加thymeleaf整合shiro标签 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取 subject</span></span><br><span class="line">Subject subject= SecurityUtils.getSubject();</span><br><span class="line"><span class="comment">//封装用户数据</span></span><br><span class="line">UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(user.getUsername(), CryptographyUtil.md5(user.getPassword(), <span class="string">"java"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.login(token);</span><br><span class="line">    User user2 = userMapper.findByName(user.getUsername());</span><br><span class="line">    <span class="comment">//把当前用户信息存到session中</span></span><br><span class="line">    SecurityUtils.getSubject().getSession().setAttribute(<span class="string">"currentUser"</span>, user2);</span><br><span class="line">    <span class="keyword">return</span> LayuiJSON.jsonStr(<span class="keyword">true</span>,<span class="string">"登陆成功！"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayuiJSON.jsonStr(<span class="keyword">false</span>,<span class="string">"用户名不存在！"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayuiJSON.jsonStr(<span class="keyword">false</span>,<span class="string">"密码错误！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LayuiJSON.jsonStr(true,”登陆成功！”);是我封装的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonStr</span><span class="params">(<span class="keyword">boolean</span> success,String msg)</span>  </span>&#123;</span><br><span class="line">        JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        obj.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">        obj.put(<span class="string">"success"</span>,success);</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</span></span><br><span class="line"><span class="comment">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，以为在</span></span><br><span class="line"><span class="comment">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Filter Chain定义说明 1、一个URL可以配置多个Filter，使用逗号分隔 2、当设置多个过滤器时，全部验证通过，才视为通过</span></span><br><span class="line"><span class="comment">     * 3、部分过滤器可指定参数，如perms，roles</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须设置 SecurityManager</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></span><br><span class="line">        <span class="comment">//设置 没有权限 登陆页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/admin"</span>);</span><br><span class="line">        <span class="comment">//设置 没有权限 登陆页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截器.</span></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">// 配置不会被拦截的链接 顺序判断</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/static/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/blog/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authIamge"</span>, <span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置退出过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></span><br><span class="line">        <span class="comment">// &lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></span><br><span class="line">        <span class="comment">//filterChainDefinitionMap.put("/**", "authc");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//authc需要 登陆才能访问</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/admin/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">//authc需要 登陆才能访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 安全管理器 SecurityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 设置realm.</span></span><br><span class="line">        securityManager.setRealm(myRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 身份认证realm; (这个需要自己写，账号密码校验；权限等)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRealm <span class="title">myRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyRealm myRealm = <span class="keyword">new</span> MyRealm();</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro生命周期处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Shiro的注解(如<span class="doctag">@RequiresRoles</span>,<span class="doctag">@RequiresPermissions</span>),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span></span><br><span class="line"><span class="comment">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"lifecycleBeanPostProcessor"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">advisorAutoProxyCreator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 ShiroDialect 用于thymeleaf 和shiro标签配合使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        String name=(String) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">        User user=userMapper.findByName(name);</span><br><span class="line">        SimpleAuthorizationInfo info=<span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        info.addStringPermission(<span class="string">"user:add"</span>); <span class="comment">//添加权限</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String name=(String)token.getPrincipal();</span><br><span class="line">        User user=userMapper.findByName(name);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            AuthenticationInfo authcInfo=<span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),<span class="string">"java"</span>);</span><br><span class="line">            <span class="keyword">return</span> authcInfo;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关键是拦截<strong>资源路径</strong>(路径指的是RequestMapping配置的路径)的配置 因为跳转</p><p>到登录界面RequestMapping配置的是/admin</p><p>先配置放行的资源,再配置<strong>登录后才能访问的资源</strong>,就是拦截资源这个很关键</p><p>比如你的登录逻辑判断访问路径是/admin/login下边,也会把你拦截,因为这个时候还没登录成功</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>prim算法(贪心算法)</title>
      <link href="/2020/08/09/prim%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/09/prim%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>prim算法就是利用了贪心算法的思想，目的是为了在一个无向带权图中找出连通了所有结点而且路径是<strong>最小的路径</strong>,例子,村子修路问题</p><a id="more"></a><h2 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h2><p>村子需要修路,但要求路要最短而且涉及所有村庄,每个村庄表示一个点,连线表示可供选择的路径,以及距离,那么就可以用无向带权图表示</p><p><img src="/2020/08/09/prim%E7%AE%97%E6%B3%95/1569913755182.png" alt="1569913755182"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="/2020/08/09/prim%E7%AE%97%E6%B3%95/1569916037324.png" alt="1569916037324"></p><p><img src="/2020/08/09/prim%E7%AE%97%E6%B3%95/1569917483034.png" alt="1569917483034"></p><h2 id="生成无向带权图"><a href="#生成无向带权图" class="headerlink" title="生成无向带权图"></a>生成无向带权图</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimGraph</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">// 村庄个数</span></span><br><span class="line"><span class="keyword">int</span>[][] arr;<span class="comment">// 村庄之间的距离</span></span><br><span class="line"><span class="keyword">char</span>[] data;<span class="comment">// 村庄名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrimGraph</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span>[][] arr, <span class="keyword">char</span>[] data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.size = size;</span><br><span class="line"><span class="keyword">this</span>.arr = arr;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径核心代码"><a href="#最短路径核心代码" class="headerlink" title="最短路径核心代码"></a>最短路径核心代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把无向带权图,和初始结点下标 传入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findMinWay</span><span class="params">(PrimGraph primGraph,<span class="keyword">int</span> v )</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] visited=<span class="keyword">new</span> <span class="keyword">int</span>[primGraph.size];</span><br><span class="line"><span class="comment">//初始结点设为已访问</span></span><br><span class="line">visited[v]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义下标</span></span><br><span class="line"><span class="keyword">int</span> i=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">999</span>;</span><br><span class="line"><span class="comment">//村庄有n个就遍历n-1次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; visited.length-<span class="number">1</span>; k++) &#123;</span><br><span class="line"><span class="comment">//在已访问的村庄中找没有访问过的村庄线路</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; visited.length; k2++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; visited.length; l++) &#123;</span><br><span class="line"><span class="comment">//找到路线后max始终保持最小</span></span><br><span class="line"><span class="keyword">if</span> (visited[k2]==<span class="number">1</span>&amp;&amp;visited[l]==<span class="number">0</span>&amp;&amp;primGraph.arr[k2][l]&lt;max) &#123;</span><br><span class="line">max=primGraph.arr[k2][l];</span><br><span class="line">i=k2;</span><br><span class="line">j=l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"路径:"</span>+primGraph.data[i]+<span class="string">"-&gt;"</span>+primGraph.data[j]+<span class="string">" 距离:"</span>+max);</span><br><span class="line"><span class="comment">//把选出来的村庄设置为已访问</span></span><br><span class="line">visited[j] = <span class="number">1</span>;</span><br><span class="line">max=<span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> size = data.length;</span><br><span class="line"><span class="comment">//999代表无法到达</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123; </span><br><span class="line">&#123; <span class="number">999</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">999</span> &#125;,</span><br><span class="line">&#123; <span class="number">4</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">9</span>, <span class="number">999</span>, <span class="number">6</span> &#125;,</span><br><span class="line">&#123; <span class="number">2</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">7</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">3</span> &#125;,</span><br><span class="line">&#123; <span class="number">999</span>, <span class="number">999</span>, <span class="number">7</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">8</span>, <span class="number">1</span> &#125;,</span><br><span class="line">&#123; <span class="number">999</span>, <span class="number">9</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">1</span>, <span class="number">999</span> &#125;,</span><br><span class="line">&#123; <span class="number">999</span>, <span class="number">999</span>, <span class="number">999</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">999</span>, <span class="number">5</span> &#125;,</span><br><span class="line">&#123; <span class="number">999</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">999</span>, <span class="number">5</span>, <span class="number">999</span> &#125; &#125;;</span><br><span class="line">PrimGraphprimGraph=<span class="keyword">new</span> PrimGraph(size,arr,data);</span><br><span class="line">    <span class="comment">//从B开始</span></span><br><span class="line">findMinWay(primGraph,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">路径:B-&gt;A 距离:<span class="number">4</span></span><br><span class="line">路径:A-&gt;C 距离:<span class="number">2</span></span><br><span class="line">路径:C-&gt;G 距离:<span class="number">3</span></span><br><span class="line">路径:G-&gt;D 距离:<span class="number">1</span></span><br><span class="line">路径:G-&gt;F 距离:<span class="number">5</span></span><br><span class="line">路径:F-&gt;E 距离:<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>从哪里开始都是一样的最短距离</strong></p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引底层原理分析</title>
      <link href="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql索引底层原理分析"><a href="#Mysql索引底层原理分析" class="headerlink" title="Mysql索引底层原理分析"></a>Mysql索引底层原理分析</h1><p>Mysql在没有索引的情况下是全表检索,就是所谓的遍历这是非常消耗IO的!</p><p>因此引入索引,底层默认使用的B+树</p><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>索引是一种能提高搜索效率的数据结构.</p><p>加入索引后,存储数据时都会使用该数据结构,如果创建很多索引的话,反而降低性能,所以要适当添加,主键自带索引</p><p>其中哈希表,完全平衡二叉树,B树,B+树都可以提高查询效率,但是Mysql使用B+树</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311170041919.png" alt="image-20200311170041919"></p><p>数组+链表的形式保存</p><p><strong>存在经过hash得到的值是一样的情况</strong>,又会有一个分辨的算法,当然如果一条链上只有一条数据,查询时非常快的,虽说IO次数减少,但整体查询效率就没有二叉树高,而且<strong>无法排序</strong>!</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>左边比右边小,因此<strong>可以排序</strong>,IO次数由树的高度决定,如下图要找到7就要有4次IO,查找也是很方便的!但是插入会重新组织二叉树,而且存在一种<strong>极端情况就是全往左偏或者全往右偏,那么IO是有相当多次的</strong>.所以这是缺点.</p><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311194209559.png" alt="image-20200311194209559"></p><h2 id="完全平衡二叉树"><a href="#完全平衡二叉树" class="headerlink" title="完全平衡二叉树"></a>完全平衡二叉树</h2><p>不会出现普通二叉树的极端情况,因为他会重新调整成为平衡,<strong>改变结构</strong>,这就是缺点,数据量大的话,结构会改变比较大,<strong>重构过程是很慢的</strong>!</p><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311194108256.png" alt="image-20200311194108256"></p><h2 id="B数"><a href="#B数" class="headerlink" title="B数"></a>B数</h2><p>按上述两种最少要4层也就是4次IO操作,但是B数可以一个节点存两个值,因此减少了树高,也就减少了IO操作,</p><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311195416456.png" alt="image-20200311195416456"></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p>是B树的升级<strong>,在最底部有有序的链表</strong>,虽然冗余但是终归还是效率最高的!</p><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311200903462.png" alt="image-20200311200903462"></p><p>Mysql数据库中的主键默认有索引</p><p>如果想要其他字段的索引查找方式如下</p><p><img src="/2020/08/09/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/image-20200311203947595.png" alt="image-20200311203947595"></p><p>首先找<code>002</code>这个值根据B+树找到了主键,再根据他的<code>主键2</code>找主键树中的<code>主键.值</code>的结点 找到值,这是InnDB引擎</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中ResultMap常用映射</title>
      <link href="/2020/08/09/Mybatis%E4%B8%ADResultMap%E5%B8%B8%E7%94%A8%E6%98%A0%E5%B0%84/"/>
      <url>/2020/08/09/Mybatis%E4%B8%ADResultMap%E5%B8%B8%E7%94%A8%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>Mybatis的ResultMap中collection和association的准确用法,以及常见的错误</p><a id="more"></a><h2 id="collection和association"><a href="#collection和association" class="headerlink" title="collection和association"></a>collection和association</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"pageList"</span> <span class="attr">type</span>=<span class="string">"cn.coderzhx.pojo.PageBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"index"</span> <span class="attr">property</span>=<span class="string">"index"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"数据库里的列"</span> <span class="attr">property</span>=<span class="string">"实体类里的属性"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"list"</span>  <span class="attr">javaType</span>=<span class="string">"ArrayList"</span>          <span class="attr">ofType</span>=<span class="string">"Blog"</span> <span class="attr">resultMap</span>=<span class="string">"blogMap"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogMap"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"category"</span> <span class="attr">property</span>=<span class="string">"category"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"likeit"</span> <span class="attr">property</span>=<span class="string">"likeit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"blogCategory"</span>       <span class="attr">javaType</span>=<span class="string">"cn.coderzhx.entity.BlogCategory"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"count"</span> <span class="attr">property</span>=<span class="string">"count"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"hits"</span> <span class="attr">property</span>=<span class="string">"hits"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// reslut</span></span><br><span class="line">    <span class="keyword">private</span> Integer index;</span><br><span class="line">    <span class="comment">//collection  ofType 里就是 T 实体类</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">    <span class="comment">//association </span></span><br><span class="line">    <span class="keyword">private</span> BlogCategory blogCategory;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listBlogs"</span> <span class="attr">resultMap</span>=<span class="string">"blogMap"</span> <span class="attr">parameterType</span>=<span class="string">"cn.coderzhx.pojo.PageBean"</span>&gt;</span></span><br><span class="line">    select b.*,c.name from blog b LEFT JOIN blog_category c  ON b.category_id=c.id order by create_time</span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"index!=null and index!=''"</span>&gt;</span></span><br><span class="line">    limit #&#123;index&#125;,#&#123;pageSize&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>ResultMap 的意义是存储结果集,结果集的列名就是column,他会把值放进property中</p></li><li><p>或者把参数传进去,只要名字一样,比如BlogCategory对象里的count属性作为参数#{count},就是property中的值</p></li></ul><h2 id="报selectOne错误"><a href="#报selectOne错误" class="headerlink" title="报selectOne错误"></a>报selectOne错误</h2><h3 id="1-你想要多个结果-却用了这个方法"><a href="#1-你想要多个结果-却用了这个方法" class="headerlink" title="1.你想要多个结果,却用了这个方法"></a>1.你想要多个结果,却用了这个方法</h3><p>接口里边一定要定义为List&lt;&gt;集合类型,比如</p><p><font color="red">我想查出所有的listBlogs放入List<Blog>再把list对象放进PageBean类里</Blog></font></p><p>ResultMap =”pageList”??,然后接口定义为这样?</p><p>PageBean list(PageBean pageBean)这是完全错误的!</p><p>你必须写List<Blog> list(PageBean pageBean),你想要封装进实体类,那是service层干的事</Blog></p><h3 id="2-你想要一个结果-却返回多个"><a href="#2-你想要一个结果-却返回多个" class="headerlink" title="2.你想要一个结果,却返回多个"></a>2.你想要一个结果,却返回多个</h3><p>那只能是数据库本身就有这么多数据</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis新增之后返回新数据id</title>
      <link href="/2020/08/09/Mybatis%E6%96%B0%E5%A2%9E%E4%B9%8B%E5%90%8E%E8%BF%94%E5%9B%9E%E6%96%B0%E6%95%B0%E6%8D%AEid/"/>
      <url>/2020/08/09/Mybatis%E6%96%B0%E5%A2%9E%E4%B9%8B%E5%90%8E%E8%BF%94%E5%9B%9E%E6%96%B0%E6%95%B0%E6%8D%AEid/</url>
      
        <content type="html"><![CDATA[<p>项目中用到了新增文章和标签功能，因为文章有多个标签，文章表设置了自增id，只能等到添加完成后返回id再添加标签表的外键，所以产生了这个问题</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBlog"</span> <span class="attr">parameterType</span>=<span class="string">"blog"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>keyColumn数据库主键字段，keyProperty实体类映射字段，useGeneratedKeys=”true”，我也不知道，我只知道要加上这个</p><h2 id="接口void-addBlog-Blog-blog"><a href="#接口void-addBlog-Blog-blog" class="headerlink" title="接口void addBlog(Blog blog)"></a>接口<code>void addBlog(Blog blog)</code></h2><p>获取id只需要<code>blog.getId()</code>因为他会自动映射进id属性</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis的一对多,多对一,多对多映射</title>
      <link href="/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/"/>
      <url>/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>应用场景:一篇文章有一个分类,一篇文章有多个标签,一个标签有多篇文章</p><a id="more"></a><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><p>Blog类里有Type类对象</p><h3 id="一个文章有一个分类"><a href="#一个文章有一个分类" class="headerlink" title="一个文章有一个分类"></a>一个文章有一个分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Type typeId;<span class="comment">//种类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">listBlog</span><span class="params">(Integer id)</span></span>;<span class="comment">//列出所有文章</span></span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>一对一<strong>关键字assocaition</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"blogMap"</span> type=<span class="string">"Blog"</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;association property=<span class="string">"typeId"</span> javaType=<span class="string">"cn.coderzhx.blog2.po.Type"</span>&gt;</span><br><span class="line">            &lt;result column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">            &lt;result column=<span class="string">"name"</span> property=<span class="string">"name"</span>/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;    </span><br><span class="line">    &lt;!--id接口方法--&gt;</span><br><span class="line">&lt;select id=<span class="string">"listBlog"</span> resultMap=<span class="string">"blogMap"</span> parameterType=<span class="string">"Integer"</span>&gt;</span><br><span class="line">        select b.id,c.name from t_blog b  LEFT JOIN t_type c  ON b.type_id=c.id</span><br><span class="line">         &lt;where&gt;</span><br><span class="line">             &lt;<span class="keyword">if</span> test=<span class="string">"typeId!=null"</span>&gt;</span><br><span class="line">                 and b.type_id=#&#123;typeId&#125;</span><br><span class="line">             &lt;/if&gt;       </span><br><span class="line">         &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h2><p>Type类中有Blog类的List集合</p><h3 id="一个分类下有多个文章"><a href="#一个分类下有多个文章" class="headerlink" title="一个分类下有多个文章"></a>一个分类下有多个文章</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer sum;<span class="comment">//记录数量</span></span><br><span class="line">    <span class="comment">//该分类下的文章</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Blog&gt; blogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapper接口-1"><a href="#mapper接口-1" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Type <span class="title">listBLogByTypeId</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><ul><li>调用listTypeById方法选出结果封装进resultMap中</li><li>resultMap查询collection的方法,访问listBLogByTypeId参数是typeId的值</li><li>查询结果封装进Blog集合中,再把整个pageList封装进Type类中</li></ul><p><img src="/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/1571729940321.png" alt="1571729940321"></p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p><strong>一个文章有多个标签,一个标签有多个文章</strong>应该可以想象其中的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//该标签下的文章</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Blog&gt; blogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String cover;<span class="comment">//封面</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line">   <span class="comment">//........</span></span><br><span class="line">    <span class="comment">//该文章下的所有标签</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Tag&gt; tags=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="mapper接口-2"><a href="#mapper接口-2" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Tag <span class="title">listBlogByTagId</span><span class="params">(Integer id)</span></span>;<span class="comment">//根据标签id列出所有文章</span></span><br></pre></td></tr></table></figure><ul><li>执行listBlogByTagId返回blogMap  封装进Type 的blogs集合,</li><li>到collection中的listTagByBlogId,参数是文章id查询出所有标签,封装进Blog的tags集合</li><li>你中有我,我中有你</li></ul><p><img src="/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/1571731770349.png" alt="1571731770349"></p><p><img src="/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/1571732007546.png" alt="1571732007546"></p><p><img src="/2020/08/09/Mybatis%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84/1571732153511.png" alt="1571732153511"></p><p>之间的关系是很乱的,我也是花费很久理清思路,具体代码我会开源在github中</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 深层理解</title>
      <link href="/2020/08/09/Mybatis%20%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/"/>
      <url>/2020/08/09/Mybatis%20%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-深层理解"><a href="#Mybatis-深层理解" class="headerlink" title="Mybatis 深层理解"></a>Mybatis 深层理解</h1><a id="more"></a><ul><li><p>定义xml文件,里边配置了数据库连接信息,以及mapper类路径</p></li><li><p>将xml文件转化为流</p></li><li><p>创建SqlSessionFactoryBuilder对象,通过它创建SqlSessionFactory对象,而且是单例的,只要项目创建过一次,直到项目关闭才会消失,</p></li><li><p>通过SqlSessionFactory得到SqlSession,这个接口中包含了所有操作数据库的方法</p></li><li><p>读取mapper接口类,找到接口类对应的mapper.xml文件,再根据接口方法找xml里的id为方法名的结点,解析出sql语句,如果没有找到方法则找接口类方法中的注解比如<code>@Select()</code>里找到sql语句,但如果xml和注解都写了sql语句,那么就会报错,因为底层是一个<code>Map&lt;String,MapperStatement&gt; mapperStatement=new StrictMap&lt;&gt;();</code> String存储id也就是方法名,它会生成一个MapperStatement对象,StrictMap继承了HashMap.可以重现put方法,当第二个相同的key进来时就会报错,因此xml和注解只能选择一个</p></li><li><p>获取sql后首先判断是<code>${}</code>还<code>是#{}</code>返回相应的对象dynamicSqlSourse还是staticSqlSourse,如果是静态的那么会把<code>#{}</code>转化为?,也就是预编译的形式,等到执行sql时才会把值传递进去,只要sql包含一个$那么就是动态的,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select $&#123;str&#125; from user where name=#&#123;name&#125; password=#&#123;password&#125;</span><br><span class="line"><span class="comment">//接口方法赋值str="id",$&#123;&#125;用的最多的也是这种方式</span></span><br><span class="line">select id from user where name=#&#123;name&#125; password=#&#123;password&#125;</span><br><span class="line"><span class="comment">//之后转化为?</span></span><br><span class="line"> select id from user where name=? password=?</span><br><span class="line"><span class="comment">//最后就是jdbc级常规操作,就是预编译的参数设定,执行</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用jdk动态代理把参数传入,形成最终要执行的sql语句,传值的问题jdk1.8和之前有差别,是否加<code>Param</code>的区别</p><p>因为jdk1.7时的反射机制还无法获取形参的名字<code>name</code>和<code>password</code>,只会生成<code>arg0</code>和<code>arg1</code>,djk1.8之后就可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User getUser(String name,String password)//1.8写法</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> &gt;</span></span><br><span class="line">    select * from user where name=#&#123;name&#125; password=#&#123;password&#125; //jdk1.8是可以传入值的</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">User getUser(@Param("name") String name,@Param("password") String password)//1.7写法</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> &gt;</span></span><br><span class="line">    select * from user where name=#&#123;name&#125; password=#&#123;password&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要在jdk.7下不加入<code>@Param</code>那么,还有一种方法是在pom.xml中的build下的configuration标签下下加入,pom.xml下加入build标签可以使之生成war包而不是jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compilerArg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven项目导入注意事项</title>
      <link href="/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven项目导入注意事项"><a href="#Maven项目导入注意事项" class="headerlink" title="Maven项目导入注意事项"></a>Maven项目导入注意事项</h1><a id="more"></a><h2 id="1-设置仓库为阿里云"><a href="#1-设置仓库为阿里云" class="headerlink" title="1.设置仓库为阿里云"></a>1.设置仓库为阿里云</h2><p><strong>下载Maven</strong>,设置环境变量就不说了,打开windows-&gt;preferences</p><p><img src="/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1561172849059.png" alt="1561172849059"></p><h2 id="2-修改java-Build-Path"><a href="#2-修改java-Build-Path" class="headerlink" title="2.修改java Build Path"></a>2.修改java Build Path</h2><p>右键项目属性,修改为Java-SE1.7就行</p><p><img src="/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1561174500100.png" alt="1561174500100"></p><h2 id="3-添加Maven依赖"><a href="#3-添加Maven依赖" class="headerlink" title="3.添加Maven依赖"></a>3.添加Maven依赖</h2><p><img src="/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1561174789763.png" alt="1561174789763"></p><p><img src="/2020/08/09/Maven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1561174830716.png" alt="1561174830716"></p><h2 id="4-Maven-install"><a href="#4-Maven-install" class="headerlink" title="4.Maven install"></a>4.Maven install</h2><ul><li>右键项目Run as-Maven Install</li><li>右键项目Maven -Update Project</li><li>顺便把Force Update of Snapshot/Releases也勾上</li><li>仅仅是项目有一个<font style="color:red">×</font>的话试着运行一下此时如果没报错那就行了</li><li>报错<font style="color:red">java.lang.ClassNotFoundException:org.springframework.web.context.ContextLoaderListener</font>是因为更新时候会把依赖去除,需要再次重复3步骤</li></ul><h2 id="5-其余错误"><a href="#5-其余错误" class="headerlink" title="5.其余错误"></a>5.其余错误</h2><p>找到Maven仓库路径关闭Eclipse删除路径下的所有jar包,重新update Project</p><p>默认路径C:\Users\hasee.m2\repository</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Redis</title>
      <link href="/2020/08/09/Linux%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2020/08/09/Linux%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h1><ol><li><p>下载<code>wget http://download.redis.io/releases/redis-5.0.5.tar.gz</code></p></li><li><p>进入目录解压<code>tar -xvf redis-5.0.5.tar.gz</code></p></li><li><p>进入redis-5.0.5目录<code>cd redis-5.0.5/</code> 之后编译<code>make install</code></p></li><li><p>启动服务<code>redis-server</code></p></li><li><p>就出现了经典启动界面</p></li></ol><h2 id="外部通过ip连接Redis"><a href="#外部通过ip连接Redis" class="headerlink" title="外部通过ip连接Redis"></a>外部通过ip连接Redis</h2><p>需要修改<code>redis.conf</code>文件 </p><ol><li>进入redis文件夹 <code>vi redis.conf</code> 修改文件</li><li>注释掉bind 127.0.0.1 使用# 还有把protected-mode的yes改成no,把daemonize no 改成yes</li><li>如果不行,则修改bind 127.0.0.12为0.0.0.0不需要注释</li><li><img src="/2020/08/09/Linux%E5%AE%89%E8%A3%85Redis/image-20200331133736926.png" alt="image-20200331133736926"></li></ol><p><img src="/2020/08/09/Linux%E5%AE%89%E8%A3%85Redis/image-20200331140529293.png" alt="image-20200331140529293"></p><p>重启服务<code>redis-server redis.conf</code>   意思就是使用配置文件redis.conf启动redis-server </p><p>这个配置文件可以复制多个,使用<code>redis-server 其他文件.conf</code></p><h2 id="关闭已经启动的Redis"><a href="#关闭已经启动的Redis" class="headerlink" title="关闭已经启动的Redis"></a>关闭已经启动的Redis</h2><p>已经存在则关闭服务 <code>ps -aux | grep redis-server</code>查看服务端口</p><p><img src="/2020/08/09/Linux%E5%AE%89%E8%A3%85Redis/image-20200331141120818.png" alt="image-20200331141120818"></p><p>关闭服务<code>kill 7077</code></p><p>如果报错<code>redis java.net.SocketException: Connection reset</code></p><p>只需要等待一段时间就行,读取产生冲突导致</p><h2 id="启动多个Redis"><a href="#启动多个Redis" class="headerlink" title="启动多个Redis"></a>启动多个Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli &#x2F;&#x2F;默认端口的Redis</span><br><span class="line">redis-cli -h ip地址  &#x2F;&#x2F;指定服务器的redis</span><br><span class="line">redis-cli -p 端口号  &#x2F;&#x2F;指定端口的Redis</span><br><span class="line">redis-cli -h ip地址 -p 端口号 &#x2F;&#x2F;指定服务器的指定端口的redis</span><br></pre></td></tr></table></figure><p>修改端口启动时直接后边加端口号就可以修改<code>redis-server --port 端口号</code>  ,可用于启动多个Redis服务</p><p>此时redis-cli也需要加上端口<code>redis-cli -p 端口号</code></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui下拉框异步获取后台数据</title>
      <link href="/2020/08/09/Layui%E4%B8%8B%E6%8B%89%E6%A1%86%E5%BC%82%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/08/09/Layui%E4%B8%8B%E6%8B%89%E6%A1%86%E5%BC%82%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Layui访问接口-后台返回json格式-通过ajax渲染"><a href="#Layui访问接口-后台返回json格式-通过ajax渲染" class="headerlink" title="Layui访问接口,后台返回json格式,通过ajax渲染"></a>Layui访问接口,后台返回json格式,通过ajax渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"awardYear"</span> <span class="attr">id</span>=<span class="string">"awardYear"</span> &gt;</span> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: layui.setter.host + <span class="string">"/award/dict/awardYear"</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;item.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item[i].dictValue!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">          alert(item[i].dictValue)</span><br><span class="line">          $(<span class="string">"select[name=awardYear]"</span>).append(<span class="string">'&lt;option value="'</span>+item[i].dictKey+<span class="string">'"&gt;'</span>+item[i].dictValue+<span class="string">'&lt;/option&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    layui.form.render(<span class="string">"select"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有待完善….</p>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Layui实现点击表格直接修改</title>
      <link href="/2020/08/09/Layui%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E8%A1%A8%E6%A0%BC%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9/"/>
      <url>/2020/08/09/Layui%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E8%A1%A8%E6%A0%BC%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/08/09/Layui%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E8%A1%A8%E6%A0%BC%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9/1565670966626.png" alt="1565670966626"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h1><ul><li><p>修改后的值,改修改的字段名,修改的改行id</p></li><li><p>ajax提交,SpringBoot后台自动映射进实体类中</p></li><li><p>sql语句 update set 字段=修改后的值 where id=改行id</p></li></ul><a id="more"></a><h2 id="1-要修改的字段加上edit-true"><a href="#1-要修改的字段加上edit-true" class="headerlink" title="1.要修改的字段加上edit:true"></a>1.要修改的字段加上<code>edit:true</code></h2><p>table.render那里加</p><h2 id="2-监听事件"><a href="#2-监听事件" class="headerlink" title="2.监听事件"></a>2.监听事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听单元格编辑 dataTable 对应 &lt;table&gt; 中的 lay-filter="dataTable"</span></span><br><span class="line">table.on(<span class="string">'edit(LAY-app-content-tags)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = obj.value, <span class="comment">//得到修改后的值</span></span><br><span class="line">        data = obj.data, <span class="comment">//得到所在行所有键值</span></span><br><span class="line">        field = obj.field; <span class="comment">//得到字段</span></span><br><span class="line">    <span class="comment">//操作父节点</span></span><br><span class="line">    <span class="keyword">if</span> (field.substring(<span class="number">0</span>,<span class="number">1</span>)==<span class="string">"p"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data1 = &#123;&#125;;</span><br><span class="line">      data1[field]=value;</span><br><span class="line">      data1[<span class="string">"cid"</span>]=data.cid;</span><br><span class="line">        $.post(<span class="string">'/config/editMenu1'</span>,&#123;<span class="attr">pid</span>:data.pid,<span class="attr">field</span>:value&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.success)&#123;layer.msg(<span class="string">'修改成功'</span>);&#125;</span><br><span class="line">        &#125;,<span class="string">'json'</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>思路就是</p><h2 id="ajax的data中的键是变量"><a href="#ajax的data中的键是变量" class="headerlink" title="ajax的data中的键是变量"></a>ajax的data中的键是变量</h2><p>因为field是变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data1 = &#123;&#125;;</span><br><span class="line">data1[field]=value;</span><br><span class="line">data1[<span class="string">"cid"</span>]=data.cid;</span><br><span class="line">  $.post(<span class="string">'/config/editMenu2'</span>,data1,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(result.success)&#123;layer.msg(<span class="string">'修改成功'</span>);&#125;</span><br><span class="line">  &#125;,<span class="string">'json'</span>);</span><br></pre></td></tr></table></figure><h2 id="提交后台SpringBoot自动把值注入对象里的属性"><a href="#提交后台SpringBoot自动把值注入对象里的属性" class="headerlink" title="提交后台SpringBoot自动把值注入对象里的属性"></a>提交后台SpringBoot自动把值注入对象里的属性</h2><h2 id="Mybatis自定义字段"><a href="#Mybatis自定义字段" class="headerlink" title="Mybatis自定义字段"></a>Mybatis自定义字段</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"editMenu1"</span> <span class="attr">parameterType</span>=<span class="string">"cn.coderzhx.pojo.MenuPojo"</span>&gt;</span></span><br><span class="line">    update menu</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set会自动删除最后的逗号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pname!=null"</span>&gt;</span>name =#&#123;pname &#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"purl!=null"</span>&gt;</span>url=#&#123;purl&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pstatus!=0"</span>&gt;</span>status=#&#123;pstatus&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"porderno!=0"</span>&gt;</span>orderno=#&#123;porderno&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;pid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台就可以就可以修改了</p>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>layui日期踩坑记录</title>
      <link href="/2020/08/09/layui%E6%97%A5%E6%9C%9F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/09/layui%E6%97%A5%E6%9C%9F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>laydate.js必须与他的css文件theme文件处于同一级目录下不然不能生效日期插件</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Layui的checkbox开关异步修改</title>
      <link href="/2020/08/09/Layui%E7%9A%84checkbox%E5%BC%80%E5%85%B3%E5%BC%82%E6%AD%A5%E4%BF%AE%E6%94%B9/"/>
      <url>/2020/08/09/Layui%E7%9A%84checkbox%E5%BC%80%E5%85%B3%E5%BC%82%E6%AD%A5%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>开关,点击后ajax修改数据库0或1状态</p><a id="more"></a><h2 id="1-使用layui-的模板-他就是在script标签里的-1就是已发布-0就是未使用"><a href="#1-使用layui-的模板-他就是在script标签里的-1就是已发布-0就是未使用" class="headerlink" title="1.使用layui 的模板,他就是在script标签里的  1就是已发布 0就是未使用"></a>1.使用layui 的模板,他就是在script标签里的  1就是已发布 0就是未使用</h2><p><img src="/2020/08/09/Layui%E7%9A%84checkbox%E5%BC%80%E5%85%B3%E5%BC%82%E6%AD%A5%E4%BF%AE%E6%94%B9/1565594258882.png" alt="1565594258882"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"status"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"isuse"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;d.isuse&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">lay-skin</span>=<span class="string">"switch"</span> <span class="attr">itemid</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;d.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">lay-text</span>=<span class="string">"已发布|未使用"</span> <span class="attr">lay-filter</span>=<span class="string">"link_isuse"</span> </span></span><span class="template-variable">&#123;&#123; d.isuse == 1 ? 'checked' : '' &#125;&#125;</span><span class="xml"><span class="tag">/&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>itemid这个用来记录该行的主键id</p><h2 id="2-在table-render里的相应字段加上"><a href="#2-在table-render里的相应字段加上" class="headerlink" title="2.在table.render里的相应字段加上"></a>2.在table.render里的相应字段加上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">,toolbar: &#39;#status&#39;</span><br></pre></td></tr></table></figure><h2 id="3-js部分"><a href="#3-js部分" class="headerlink" title="3.js部分"></a>3.js部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//改行数据的主键和是否使用1和0传到后台 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update_useIt</span>(<span class="params">id,useIt</span>)</span>&#123;</span><br><span class="line">  $.post(<span class="string">'/config/editIsuse'</span>,&#123;<span class="attr">id</span>:id,<span class="attr">isuse</span>:useIt&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.success)&#123;</span><br><span class="line">      layer.msg(<span class="string">'修改成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="string">'json'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否显示</span></span><br><span class="line">form.on(<span class="string">'switch(link_isuse)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取该行id,   obj.elem.checked绿色就是true即显示,否则就是灰色的</span></span><br><span class="line">  <span class="keyword">var</span> id = $(<span class="keyword">this</span>).attr(<span class="string">'itemid'</span>);</span><br><span class="line">  <span class="keyword">if</span>(obj.elem.checked)&#123;</span><br><span class="line">    update_useIt(id,<span class="number">1</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    update_useIt(id,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2020/08/09/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/09/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p> KMP算法用于匹配字符串,而且是暴力匹配算法的优化版</p><p>暴力匹配算法如下图所示,可以看到每次匹配失败时只会前进一格,而KMP算法可以<strong>判断之前已经匹配过的字符而直接前进n格</strong></p><a id="more"></a><h2 id="暴力匹配算法"><a href="#暴力匹配算法" class="headerlink" title="暴力匹配算法"></a>暴力匹配算法</h2><p>如图所示一目了然</p><p><img src="/2020/08/09/KMP%E7%AE%97%E6%B3%95/1.gif" alt="1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">matchStr</span><span class="params">(String str1,String str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//c1的下标</span></span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;<span class="comment">//c2的下标</span></span><br><span class="line"><span class="comment">//退出循环说明找到了,或者没找到</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;str1.length()) &#123;</span><br><span class="line"><span class="keyword">if</span>(str1.charAt(i)==str2.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">i=i-j+<span class="number">1</span>;<span class="comment">//i回退</span></span><br><span class="line">j=<span class="number">0</span>;<span class="comment">//归零</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line"><span class="keyword">if</span> (j==str2.length()) &#123;</span><br><span class="line"><span class="keyword">return</span> i-j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没找到</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片取自<a href="https://blog.csdn.net/qq_37969433/article/details/82947411" target="_blank" rel="noopener">https://blog.csdn.net/qq_37969433/article/details/82947411</a></p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p><img src="/2020/08/09/KMP%E7%AE%97%E6%B3%95/1569818644187.png" alt="1569818644187"></p><h3 id="部分匹配表的实现"><a href="#部分匹配表的实现" class="headerlink" title="部分匹配表的实现"></a>部分匹配表的实现</h3><p><strong>字符串abaabcac</strong>创建部分匹配表的过程</p><ul><li>a无前缀,无后缀自然没有公共串为0</li><li>ab前缀a,后缀b,没有公共串因此为0</li><li>aba前缀a,ab后缀 a,公共串a因此为1</li><li>abaa前缀a,ab,aba后缀a,aa,baa公共串a因此为1</li><li>abaab前缀a,ab,aba,abaa,后缀b,ab,aab,baab公共串ab因此为1</li><li>同理得到部分匹配表</li></ul><h3 id="代码实现部分匹配表"><a href="#代码实现部分匹配表" class="headerlink" title="代码实现部分匹配表"></a>代码实现部分匹配表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分匹配表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] matchTable(String str) &#123;</span><br><span class="line"><span class="comment">//新建匹配表数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</span><br><span class="line"><span class="comment">//一个元素无前缀和后缀必须是0</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span> ,j = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="comment">//这个很难理解,是kmp算法的规律</span></span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;str.charAt(i)!=str.charAt(j)) &#123;</span><br><span class="line">j=arr[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前一个和后一个比较相同就+1</span></span><br><span class="line"><span class="keyword">if</span> (str.charAt(i)==str.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">arr[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改造暴力匹配得到KMP算法"><a href="#改造暴力匹配得到KMP算法" class="headerlink" title="改造暴力匹配得到KMP算法"></a>改造暴力匹配得到KMP算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String str1,String str2,<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//c1的下标</span></span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;<span class="comment">//c2的下标</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;str1.length()) &#123;</span><br><span class="line"><span class="comment">//难理解,这是kmp算法的规律</span></span><br><span class="line">        <span class="comment">//目的是为了有效的回退j,以及不需要回退i</span></span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;str1.charAt(i)!=str2.charAt(j)) &#123;</span><br><span class="line">j=arr[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str1.charAt(i)==str2.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line"><span class="keyword">if</span> (j==str2.length()) &#123;</span><br><span class="line"><span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没找到</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现链表数据结构</title>
      <link href="/2020/08/09/Java%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/08/09/Java%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>线性表(类似数组)在插入和删除时需要移动大量数据,因为中间动一个数据后续的所有都要移动,这是很浪费性能的但是查询速度是非常快,因为 [基地址+元素大小*k] 就能找到第k个元素的地址,根据地址找到值</p><p>如果需要频繁地添加删除,那么就需要链表</p><a id="more"></a><p>下边我用java模拟单链表</p><p><img src="/2020/08/09/Java%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1566995220105.png" alt="1566995220105"></p><p>头结点是不记录数据的,指向第一个结点</p><h2 id="首先定义接口链表的方法"><a href="#首先定义接口链表的方法" class="headerlink" title="首先定义接口链表的方法"></a>首先定义接口链表的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt; </span>&#123;<span class="comment">//泛型避免非法类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;<span class="comment">//添加结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">//节点数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//是否为空</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray();<span class="comment">//转换为对象数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;<span class="comment">//根据下标获取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(E data )</span></span>;<span class="comment">//是否包含某值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index ,E data)</span></span>;<span class="comment">//根据下标修改数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span></span>;<span class="comment">//删除指定数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ILinkImpl</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ILink</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//上述是尾巴</span></span><br><span class="line"><span class="comment">//下述是头</span></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e==<span class="keyword">null</span>) &#123;<span class="comment">//如果保存的数据是null,那结束</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">Node newNode=<span class="keyword">new</span> Node(e);<span class="comment">//创建新节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.root==<span class="keyword">null</span>) &#123;<span class="comment">//为空则是头</span></span><br><span class="line"><span class="keyword">this</span>.root=newNode;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.root.addNode(newNode);<span class="comment">//到这说明有头结点了,那么开始addNode是不是尾巴的判断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//记录个数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.count==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> foot;<span class="comment">//用于记录数组下标</span></span><br><span class="line"><span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数组</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.foot=<span class="number">0</span>;<span class="comment">//清空下标</span></span><br><span class="line"><span class="keyword">this</span>.returnData=<span class="keyword">new</span> Object[<span class="keyword">this</span>.count]; <span class="comment">//新建对象数组</span></span><br><span class="line"><span class="keyword">this</span>.root.toArrayNode();<span class="comment">//把链表转化为数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.returnData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&gt;=<span class="keyword">this</span>.count) &#123;<span class="comment">//下标超过或等于总个数,那就是null的</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.foot=<span class="number">0</span>;<span class="comment">//清空下标</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.root.getNode(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (data==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.root.containNode(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&gt;=<span class="keyword">this</span>.count) &#123;<span class="comment">//下标超过或等于总个数,那就是null的</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.foot=<span class="number">0</span>;<span class="comment">//清空下标</span></span><br><span class="line"><span class="keyword">this</span>.root.setNode(index,data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.contain(data)) &#123;<span class="comment">//包含该数据再判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.root.data==data) &#123;</span><br><span class="line"><span class="keyword">this</span>.root=<span class="keyword">this</span>.root.next;<span class="comment">//下一个节点覆盖给当前的</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.root.removeNode(<span class="keyword">this</span>.root,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是-------------分割线---------------------------</span></span><br><span class="line">    <span class="comment">//定义链表的数据结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> E data;<span class="comment">//存储数据</span></span><br><span class="line"><span class="keyword">private</span> Node next;<span class="comment">//保存的下一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data=data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node newNode)</span> </span>&#123;<span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.next=newNode ;<span class="comment">//当前结点的下一个节点为空的话说明是最后的结点</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.next.addNode(newNode);<span class="comment">//调用自己类似递归</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toArrayNode</span><span class="params">()</span> </span>&#123;<span class="comment">//把链表转化为数组</span></span><br><span class="line"><span class="comment">//下标和链表的数据一一对应</span></span><br><span class="line">ILinkImpl.<span class="keyword">this</span>.returnData[ILinkImpl.<span class="keyword">this</span>.foot++]=<span class="keyword">this</span>.data;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next!=<span class="keyword">null</span>) &#123;<span class="comment">//只要还有下一个就递归</span></span><br><span class="line"><span class="keyword">this</span>.next.toArrayNode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;<span class="comment">//从下标0开始递归找,直到找到为止</span></span><br><span class="line"><span class="keyword">if</span> (ILinkImpl.<span class="keyword">this</span>.foot++==index) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.next.getNode(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">setNode</span><span class="params">(<span class="keyword">int</span> index,E data)</span> </span>&#123;<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">if</span> (ILinkImpl.<span class="keyword">this</span>.foot++==index) &#123;</span><br><span class="line"> <span class="keyword">this</span>.data=data;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">this</span>.next.setNode(index,data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">removeNode</span><span class="params">(Node preNode, E data)</span> </span>&#123;<span class="comment">//从下标0开始递归找,直到找到为止</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.data.equals(data)) &#123;<span class="comment">//不是头结点的情况,把前边的节点的next指向当前的下一个</span></span><br><span class="line">preNode.next=<span class="keyword">this</span>.next;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next!=<span class="keyword">null</span>) &#123;<span class="comment">//只要有后续结点,就递归往下找</span></span><br><span class="line"><span class="keyword">this</span>.next.removeNode(<span class="keyword">this</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containNode</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.data.equals(data)) &#123;<span class="comment">//值比较,从开头开始找,找到为止</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next==<span class="keyword">null</span>) &#123;<span class="comment">//没有下一个说明找不到了</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.next.containNode(data);<span class="comment">//有下一个一直递归</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main测试"><a href="#main测试" class="headerlink" title="main测试"></a>main测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lianbiao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ILink&lt;String&gt; aILink=<span class="keyword">new</span> ILinkImpl&lt;String&gt;();</span><br><span class="line"><span class="comment">//System.out.println(aILink.size());</span></span><br><span class="line">aILink.add(<span class="string">"java"</span>);</span><br><span class="line">aILink.add(<span class="string">"love"</span>);</span><br><span class="line">aILink.add(<span class="string">"me"</span>);</span><br><span class="line"><span class="comment">//System.out.println(aILink.size());</span></span><br><span class="line">aILink.set(<span class="number">2</span>, <span class="string">"you"</span>);</span><br><span class="line">aILink.remove(<span class="string">"java"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aILink.size(); i++) &#123;</span><br><span class="line">System.out.println(aILink.toArray()[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(aILink.get(2));</span></span><br><span class="line"><span class="comment">//System.out.println(aILink.contain("you"));</span></span><br><span class="line"><span class="comment">//System.out.println(aILink.contain("love"));</span></span><br><span class="line"><span class="comment">//System.out.println(aILink.contain("1"));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*创建人:</span></span><br><span class="line"><span class="comment">*项目名:zhx</span></span><br><span class="line"><span class="comment">*2019年8月27日-下午8:41:33</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java深克隆浅克隆</title>
      <link href="/2020/08/09/Java%E6%B7%B1%E5%85%8B%E9%9A%86%E6%B5%85%E5%85%8B%E9%9A%86/"/>
      <url>/2020/08/09/Java%E6%B7%B1%E5%85%8B%E9%9A%86%E6%B5%85%E5%85%8B%E9%9A%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前我只听说过这个概念,以为很深奥的,但是随着自己慢慢学习java过程中很通俗的了解了什么是深克隆浅克隆?</p></blockquote><a id="more"></a><h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>我们都知道一个对象是存储在堆内存中的,对象的引用来源于此,基本数据类型不存在这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Person p2=p1;</span><br></pre></td></tr></table></figure><p><code>p1</code>和<code>p2</code>都指向同一个Person对象,当<code>p1</code>和<code>p2</code> 其中任意一个修改了Person的值那么Person对象就会发生改变,所以直接赋值就是浅克隆.</p><h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>我们需要产生一个完完全全的副本,类似于复印件供别人随意使用,修改,最简单的做法就是新建一个对象然后统统set进去,如果出现一个List集合那么<strong>工作量是巨大的</strong>,比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Person p2=<span class="keyword">new</span> Person();</span><br><span class="line">p2.setName(p1.getName());<span class="comment">//等等等.....</span></span><br><span class="line"><span class="comment">//出现集合,还需要遍历添加到新的集合中,因为集合对象也是存在堆中的</span></span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">forEach(String p2:p1.getList())&#123;</span><br><span class="line">    list.add(p2)<span class="comment">//循环添加</span></span><br><span class="line">&#125;</span><br><span class="line">p2.setList(list);<span class="comment">//最后赋值</span></span><br></pre></td></tr></table></figure><p>可想而知,如果实体类里多来几个集合那么,代码会变得很多,<strong>只需要实现接口即可</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Person implements Cloneable &#123;</span><br><span class="line">    <span class="comment">//属性省略....</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Person p2=p1.clone();<span class="comment">//深克隆</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 克隆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer.parseInt()和Integer.valueOf()区别</title>
      <link href="/2020/08/09/Integer.parseInt()%E5%92%8CInteger.valueOf()%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/09/Integer.parseInt()%E5%92%8CInteger.valueOf()%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Integer.parseInt()返回int类型</p><p>Integer.valueOf()返回Integer类型</p><a id="more"></a><p><strong>底层实现都是Integer.parseInt(String s ,int radix)</strong></p><p>Integer.valueOf(String s ,int radix)其实就是</p><p>new Integer(Integer.parseInt(s, radix))</p><p>radix是进制数在2到36之间,因为0-9,a-z正好只够36个的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*IntegerCache.low为 -128；</span></span><br><span class="line"><span class="comment">        IntegerCache.high默认为127，但可以在JVM进行配置，一般默认就是127*/</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="comment">/*如果i在-128~127之间，从缓存中取对象*/</span></span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="comment">/*如果i不在-128~127之间，重新创建一个对象*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="这就解释了为什么"><a href="#这就解释了为什么" class="headerlink" title="这就解释了为什么"></a>这就解释了为什么</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      Integer cInteger=<span class="number">127</span>;</span><br><span class="line">Integer dInteger=<span class="number">127</span>;</span><br><span class="line">System.out.println(cInteger==dInteger);<span class="comment">//true</span></span><br><span class="line">Integer cInteger2=<span class="number">128</span>;</span><br><span class="line">Integer dInteger2=<span class="number">128</span>;</span><br><span class="line">System.out.println(cInteger2==dInteger2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>因为超过了127就是新的Integer对象</p><p>而==比较是地址是否相同,对象不同自然不同了.</p><p>对于基本类型==就是比较的值是否相同</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA热部署配置</title>
      <link href="/2020/08/09/IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/09/IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="关于Spring-Boot-项目的热部署"><a href="#关于Spring-Boot-项目的热部署" class="headerlink" title="关于Spring Boot 项目的热部署"></a>关于Spring Boot 项目的热部署</h2><h2 id="如果是Gradle构建"><a href="#如果是Gradle构建" class="headerlink" title="如果是Gradle构建"></a>如果是Gradle构建</h2><p>只需在application.properties中加入以下</p><a id="more"></a><h2 id="如果是Maven要在pom-xml加入"><a href="#如果是Maven要在pom-xml加入" class="headerlink" title="如果是Maven要在pom.xml加入"></a>如果是Maven要在pom.xml加入</h2><h3 id="热部署生效"><a href="#热部署生效" class="headerlink" title="热部署生效"></a>热部署生效</h3><p>spring.devtools.restart.enabled: true</p><h3 id="设置重启的目录"><a href="#设置重启的目录" class="headerlink" title="设置重启的目录"></a>设置重启的目录</h3><p>spring.devtools.restart.additional-paths: src/main/java</p><h3 id="classpath目录下的WEB-INF文件夹内容修改不重启"><a href="#classpath目录下的WEB-INF文件夹内容修改不重启" class="headerlink" title="classpath目录下的WEB-INF文件夹内容修改不重启"></a>classpath目录下的WEB-INF文件夹内容修改不重启</h3><p>spring.devtools.restart.exclude: WEB-INF/**</p><p>热部署jar包<br>spring-boot-devtools</p><p>Ctrl+Shift+Alt+/  选择Register</p><p><img src="/2020/08/09/IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/1560308442807.png" alt="1560308442807"></p><p>勾选 Close就好了</p><p><img src="/2020/08/09/IDEA%E7%83%AD%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/1560308343209.png" alt="1560308343209"></p><p>集成mybatis</p><p>mybatis-spring-boot-starter </p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashSet,HashMap为什么要重写hashCode和equals?</title>
      <link href="/2020/08/09/HashSet,HashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E5%86%99hashCode%E5%92%8Cequals/"/>
      <url>/2020/08/09/HashSet,HashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E5%86%99hashCode%E5%92%8Cequals/</url>
      
        <content type="html"><![CDATA[<h2 id="Hash是数组和链表的混合-数组的每一项都是一个链表"><a href="#Hash是数组和链表的混合-数组的每一项都是一个链表" class="headerlink" title="Hash是数组和链表的混合,数组的每一项都是一个链表"></a>Hash是数组和链表的混合,数组的每一项都是一个链表</h2><a id="more"></a><h2 id="利用简单的例子阐述原理"><a href="#利用简单的例子阐述原理" class="headerlink" title="利用简单的例子阐述原理"></a>利用简单的例子阐述原理</h2><h3 id="先定义一个类"><a href="#先定义一个类" class="headerlink" title="先定义一个类"></a>先定义一个类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person1&#123;</span><br><span class="line">public int age;</span><br><span class="line">public String name;</span><br><span class="line">public Person1(String name,int age) &#123;</span><br><span class="line">this.age&#x3D;age;</span><br><span class="line">this.name&#x3D;name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;name: &quot;+name+&quot;age: &quot;+age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写和不重写的区别"><a href="#重写和不重写的区别" class="headerlink" title="重写和不重写的区别"></a>重写和不重写的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class tanxinsuanfa &#123;</span><br><span class="line">&#x2F;**</span><br><span class="line">*创建人:</span><br><span class="line">*项目名:</span><br><span class="line">*test</span><br><span class="line">*2019年4月16日-上午10:41:17</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">HashSet&lt;Person1&gt; set&#x3D;new HashSet&lt;&gt;();</span><br><span class="line">set.add(new Person1(&quot;abc&quot;,22));</span><br><span class="line">set.add(new Person1(&quot;abc&quot;,22));</span><br><span class="line">set.add(new Person1(&quot;bcd&quot;,22));</span><br><span class="line">set.add(new Person1(&quot;bcd&quot;,22));</span><br><span class="line">System.out.println(set);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; set2&#x3D;new HashSet&lt;&gt;();</span><br><span class="line">set2.add(new String(&quot;abc&quot;));</span><br><span class="line">set2.add(new String(&quot;abc&quot;));</span><br><span class="line">set2.add(new String(&quot;bcd&quot;));</span><br><span class="line">set2.add(new String(&quot;bcd&quot;));</span><br><span class="line">System.out.println(set2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[name: abc age: 22</span><br><span class="line">, name: bcd age: 22</span><br><span class="line">, name: bcd age: 22</span><br><span class="line">, name: abc age: 22</span><br><span class="line">]</span><br><span class="line">[bcd, abc]</span><br></pre></td></tr></table></figure><h2 id="为什么Person1类有四个而String类结果只有两个"><a href="#为什么Person1类有四个而String类结果只有两个" class="headerlink" title="为什么Person1类有四个而String类结果只有两个?"></a>为什么Person1类有四个而String类结果只有两个?</h2><p>Person1类4个都是new出来的新的不同对象,地址都不相同,equals方法默认判断地址是否相同,当然是false,</p><h2 id="而String类内部实现了hashCode和equals方法"><a href="#而String类内部实现了hashCode和equals方法" class="headerlink" title="而String类内部实现了hashCode和equals方法"></a>而String类内部实现了hashCode和equals方法</h2><p>去掉了仅仅因为地址不同的重复对象</p><p>第一个对象new String(“abc”) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static int hashCode(byte[] value) &#123;&#x2F;&#x2F;String类底层方法</span><br><span class="line">        int h &#x3D; 0;</span><br><span class="line">        for (byte v : value) &#123;</span><br><span class="line">            h &#x3D; 31 * h + (v &amp; 0xff);</span><br><span class="line">        &#125;</span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color="springgreen" size="4"><strong>0xff是16进制的255，也就是二进制的 11111111,当前字节与运算</strong> </font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 1 1 1 1 1 1   &#x3D;255</span><br><span class="line">0 1 1 0 0 0 0 1   &#x3D;97(ASCII码)&#x3D;a   也就是255 &amp; 97</span><br><span class="line">0 1 1 0 0 0 0 1   &#x3D;97</span><br></pre></td></tr></table></figure><p>​        v &amp; 0xff其实就是v本身,所以我不知道大佬是什么想法这样做的目的 ,先不管了!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">31 * 0 + 97  &#x3D;97</span><br><span class="line">31 * 97 + 98  &#x3D;3105</span><br><span class="line">31 * 3105 + 99  &#x3D;96354</span><br></pre></td></tr></table></figure><p>​        new String(“abc”) .hashCode()=96354</p><p>​            第二次又来了一个new String(“abc”)也是96354 ,集合在容器内找到了有相同hashCode的对象,所以要调用第二层equal方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static boolean equals(byte[] value, byte[] other) &#123;</span><br><span class="line">        if (value.length &#x3D;&#x3D; other.length) &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                if (value[i] !&#x3D; other[i]) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是对象具体的值进行比较 “abc”=”abc”所以返回true,因此是同一个,<font color="springgreen" size="4">后来的覆盖先前的</font></p><p><strong>可能存在偶然情况恰好hashCode是true,但是equals是false,只要有一个是false,那就是不同的对象</strong></p><h2 id="想要达到同样的效果-因此我们要在Person类中也要重写hashCode和equals来达到去重的效果"><a href="#想要达到同样的效果-因此我们要在Person类中也要重写hashCode和equals来达到去重的效果" class="headerlink" title="想要达到同样的效果,因此我们要在Person类中也要重写hashCode和equals来达到去重的效果"></a>想要达到同样的效果,因此我们要在Person类中也要重写hashCode和equals来达到去重的效果</h2><h2 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">return name.hashCode()+31*age;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if(this &#x3D;&#x3D; obj)return true;</span><br><span class="line">if(obj &#x3D;&#x3D; null)return false;&#x2F;&#x2F;这两步每次重写都得有</span><br><span class="line">if(obj instanceof Person1)&#123;</span><br><span class="line">Person1 p &#x3D; (Person1)obj;&#x2F;&#x2F;强转类型</span><br><span class="line">return name.equals(p.name) &amp;&amp; age&#x3D;&#x3D;p.age;&#x2F;&#x2F;比较值</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么不直接重写equals-而要两个都要呢"><a href="#为什么不直接重写equals-而要两个都要呢" class="headerlink" title="为什么不直接重写equals,而要两个都要呢?"></a>为什么不直接重写equals,而要两个都要呢?</h2><p>equals为true hashCode一定是true,那么为什么还要重写hashCode呢</p><p>因为hashCode比的是数字速度快,而equals啥都比较,速度当然较慢,</p><p>所以先比较hashCode,相同了再equals,这样保证了效率</p><h2 id="HashMap比较的是键也是同样的原理"><a href="#HashMap比较的是键也是同样的原理" class="headerlink" title="HashMap比较的是键也是同样的原理"></a>HashMap比较的是键也是同样的原理</h2><p>HashSet底层是依靠HashMap实现的,hashMap 的key有唯一性,如果出现重复的,会覆盖掉上一个,相对于HashSet来说那就是没变,实际上是把原来的覆盖了,1覆盖1,不还是1嘛!</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap深层理解</title>
      <link href="/2020/08/09/HashMap%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/"/>
      <url>/2020/08/09/HashMap%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>key-value方式存储,线程不安全,因此效率高,键值都可以为空,且无序</p><a id="more"></a><p>jdk1.8之前是数组+链表形式,构造方法默认创建16长度的<code>Entry&lt;k,v&gt;[]</code>数组,任意形式的对象,经过hash算法(<strong>hash%数组长度</strong>)(<code>hashcode()</code>)得到一个数,这个数会放在数组中,如果得到相同的hash值(<strong>哈希碰撞</strong>),会经过<code>equals()</code>,双重判断为true那么就说明key是相同的,则覆盖掉上一个插入的,为false则说明key不用则会在链表中一个个接着匹配,直到链表所有都是false ,这样才能确定不是重复的key,最后添加到链表尾部中.</p><p><img src="/2020/08/09/HashMap%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/image-20200312174048531.png" alt="image-20200312174048531"></p><p>1.8之后就优化了,采用<strong>数组+链表+红黑树</strong>的形式,调用<code>put()</code>才会创建<code>Node&lt;k,v&gt;[]</code>数组也是16长度hash算法(<strong>hash&amp;(长度-1)</strong>)一般长度是2的n次幂最大容量2的30次,为了减少hash碰撞,如果设置初始大小不是2次的,那么会自动转化为大于这个数的最小二次幂,参考hashMap底层 <code>tableSizeFor(int cap)</code>方法</p><p><img src="/2020/08/09/HashMap%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/image-20200317100947175.png" alt="image-20200317100947175"></p><ul><li>链表长度大于8,数组长度小于64时,只会形成数组扩容,一位数据量小没必要采用结构复杂的红黑数</li><li>链表长度大于8,数组长度大于64时,链表会形成红黑树以保证搜索效率,因为红黑树结构原因添加删除效率并不高,只有大数据量下才能利大于弊</li></ul><p><img src="/2020/08/09/HashMap%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3/image-20200313102637612.png" alt="image-20200313102637612"></p><p>加载因子默认是0.75表示16的长度达到16*0.75也就是12时会扩容,当然也是可以自定义的,扩容涉及到rehash,复制数据的过程是非常消耗性能的,因此最好指定合适的初始长度</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本命令</title>
      <link href="/2020/08/09/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/09/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id><a href="#" class="headerlink" title></a></h1><table><thead><tr><th>-</th><th>-</th></tr></thead><tbody><tr><td>git init</td><td>添加版本控制</td></tr><tr><td>git add 文件名</td><td>添加到缓存区</td></tr><tr><td>git add .</td><td>添加全部到缓存区</td></tr><tr><td>git commit -m “注释”</td><td>提交缓存区到本地仓库</td></tr><tr><td>git log –pretty==oneline</td><td>查看历史版本(只显示之前)</td></tr><tr><td>git reset –hard 版本号</td><td>回退到之前的版本</td></tr><tr><td>git reflog</td><td>查看历史操作 (用于回退回退后无法查看之前)</td></tr><tr><td>git colne  gihub链接</td><td>克隆到本地</td></tr><tr><td>git push gihub链接</td><td>上传到github仓库(下班第一件事)</td></tr><tr><td>git pull</td><td>上班第一件事拉取远端代码</td></tr><tr><td>git branch</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把分支名和当前分支合并</td></tr><tr><td>git branch -d 分支名</td><td>删除分支(前提当前不是该分支)</td></tr><tr><td>touch .gitignore</td><td>这个文件里,写了需要忽略提交的文件</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="push-出现403-未认证-需要到-git-config文件中修改"><a href="#push-出现403-未认证-需要到-git-config文件中修改" class="headerlink" title="push 出现403 未认证,需要到.git/config文件中修改"></a>push 出现403 未认证,需要到.git/config文件中修改</h3><h3 id="gitignore的写法"><a href="#gitignore的写法" class="headerlink" title=".gitignore的写法"></a>.gitignore的写法</h3><ul><li><code>/文件夹/</code>    :表示过滤这个文件夹</li><li><code>*.zip</code>  :表示过滤这个类型的文件</li><li><code>/文件夹/xx.txt</code>:表示过滤具体的文件</li><li><code>!xx.txt</code>:表示不过滤该文件</li><li><code>#</code>:用于注释</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RequestMapping注解映射相对路径问题</title>
      <link href="/2020/08/09/@RequestMapping%E6%98%A0%E5%B0%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/09/@RequestMapping%E6%98%A0%E5%B0%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="RequestMapping映射相对路径问题"><a href="#RequestMapping映射相对路径问题" class="headerlink" title="@RequestMapping映射相对路径问题"></a>@RequestMapping映射相对路径问题</h1><p>我在项目中遇到例如@RequestMapping(“/blog/xxx”)导致静态资源路径里加上了/blog,以至于无法加载</p><a id="more"></a><p><img src="/2020/08/09/@RequestMapping%E6%98%A0%E5%B0%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/1563806454549.png" alt="1563806454549"></p><p>关键在于你的静态资源没有<font color="red"> <strong>/</strong> </font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/base.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/index.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/m.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的静态资源只要加上了<font color="red"> <strong>/</strong> </font>就会变成绝对路径</p>]]></content>
      
      
      <categories>
          
          <category> 业务实现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/02/hello-world/"/>
      <url>/2020/07/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
